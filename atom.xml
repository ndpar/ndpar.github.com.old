<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Side Notes]]></title>
  <link href="http://blog.ndpar.com/atom.xml" rel="self"/>
  <link href="http://blog.ndpar.com/"/>
  <updated>2014-10-14T08:11:57-04:00</updated>
  <id>http://blog.ndpar.com/</id>
  <author>
    <name><![CDATA[Andrey Paramonov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GC visualization]]></title>
    <link href="http://blog.ndpar.com/2014/10/13/gc-visualization/"/>
    <updated>2014-10-13T08:00:00-04:00</updated>
    <id>http://blog.ndpar.com/2014/10/13/gc-visualization</id>
    <content type="html"><![CDATA[<p>While I was working through the chapter 5.3 of <a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-33.html#%_sec_5.3.2">SICP</a>, I created small visualization of the <em>stop-and-copy</em> garbage collection algorithm.</p>

<p>I start with the following memory structure example.</p>

<p><img class="center" src="http://blog.ndpar.com/images/posts/gc-01.png" /></p>

<p>The content of the <code>root</code> register is a pointer <code>p4</code> to the list of registers <code>(x y z)</code>. The register <code>x</code> points to address 6 where improper list <code>(1 . 2)</code> saved. The register <code>y</code> points to address 8 where list <code>(x x)</code> starts. Finally, the register <code>z</code> points to address 10 where list <code>(3 4 5)</code> starts. Addresses 1, 3, 5, 9, 11, 13, 15 contain garbage.</p>

<p>After we ran the GC algorithm, we got the following memory structure.</p>

<p><img class="center" src="http://blog.ndpar.com/images/posts/gc-52.png" /></p>

<p><code>root</code> now points to address 0, <code>x</code> to 1, <code>y</code> to 3, and <code>z</code> to 6.</p>

<!-- more -->

<p>Here is the visualization</p>

<p><img class="center" src="https://raw.githubusercontent.com/CompSciCabal/SMRTYPRTY/master/experiments/ndpar/sicp-5.3-gc/gc.gif" /></p>

<h2 id="references">References</h2>

<ul>
  <li>Bigger picture on <a href="https://raw.githubusercontent.com/CompSciCabal/SMRTYPRTY/master/experiments/ndpar/sicp-5.3-gc/gc.gif">GitHub</a>.</li>
  <li>Animation frames for better view on <a href="https://github.com/CompSciCabal/SMRTYPRTY/tree/master/experiments/ndpar/sicp-5.3-gc">GitHub</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fast Fourier transform in J]]></title>
    <link href="http://blog.ndpar.com/2014/10/12/fft-j/"/>
    <updated>2014-10-12T08:00:00-04:00</updated>
    <id>http://blog.ndpar.com/2014/10/12/fft-j</id>
    <content type="html"><![CDATA[<p>In the previous <a href="http://blog.ndpar.com/2014/10/11/dft-j/">post</a> we discussed the discrete Fourier transform (DFT). Its J implementation was pretty straightforward, and the program looked almost identical to its mathematical definition. In this post, I want to explore how to implement fast Fourier transform (FFT), a recursively defined version of DFT that reduces algorithmic complexity from $O(n^2)$ to $O(N\log{N})$.</p>

<h2 id="math">Math</h2>

<p>Recall the DFT formula from the previous post</p>

<script type="math/tex; mode=display">
\mathcal{F}_N\mathbf{f}[m] = \sum_{n=0}^{N-1} \mathbf{f}[n] e^{-2\pi i mn/N}, \quad m = 0, \dots , N-1
</script>

<p>I use a slightly different notation here to make recursive definition easier to understand.</p>

<p>We assume that <em>N</em> is a power of 2. Using basic arithmetic and properties of complex exponentials, we can derive the formula for the DFT of order <em>2N</em> in terms of two DFTs of order <em>N</em></p>

<script type="math/tex; mode=display">
\mathcal{F}_{2N}\mathbf{f}[m]=\mathcal{F}_N\mathbf{f}_{even}+e^{-\pi im/N}\mathcal{F}_N\mathbf{f}_{odd}
</script>

<script type="math/tex; mode=display">
\mathcal{F}_{2N}\mathbf{f}[m+N]=\mathcal{F}_N\mathbf{f}_{even}-e^{-\pi im/N}\mathcal{F}_N\mathbf{f}_{odd}
</script>

<p>where $m=0,\dots,N-1$. The base case, when $N=1$, is</p>

<script type="math/tex; mode=display">
\mathcal{F}_1\mathbf{f}[0] = \mathbf{f}[0]
</script>

<p>i.e. the identity function.</p>

<!-- more -->

<h2 id="programming">Programming</h2>

<p>Let’s express the FFT algorithm in words. If $N=1$ then the <code>fft</code> function is just the identity function (<code>]</code> in J). Overwise, it’s a function involving a recursive call on an input vector of half the length. Here is the same phrase written in J</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">fft=: something_recursive_here ` ] @. (1 = #)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If $N&gt;1$, we split the input vector into two vectors by even and odd indices. We apply FFT recursively to each of these vectors. We multiply the first output vector by 1 and the second one by $e^{-\pi im/N}$. Then, we find the sum and difference of the result vectors, and concatenate them. That should be it.</p>

<p>Let’s start with the split function. To split a vector by even and odd indices in J, we can split it by groups of two elements, stack the groups on top of each other making an $N\times2$ matrix, then transpose it to get $2\times N$ matrix, which gives us the two vectors we need. Here is the implementation of the split function</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">spl=: |:@(_2 ]\ ])</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and here is an example of applying this function to a range vector</p>

<pre><code>   spl 0 1 2 3 4 5 6 7
0 2 4 6
1 3 5 7
</code></pre>

<p>The next step is the function $e^{-\pi im/N}$. We implement it in two steps: first, scalar $\omega=e^{\pi i/N}$, then vector $\boldsymbol\omega=\omega^{-m}$. The implementation is analogous to the one from the previous <a href="http://blog.ndpar.com/2014/10/11/dft-j/">post</a>, with the difference of $\pi i/N$ instead of $2\pi i/N$, and vector $\boldsymbol\omega$ instead of matrix $\Omega$</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">omg=: ^@o.@(0j1&amp;%)
</span><span class="line">omv=: omg ^ -@i.</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The new matrix $\Omega$ is build by stacking a unit vector $[1,\dots,1]$ of length <em>N</em> on top of the vector $\boldsymbol\omega$</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Omg=: 1 ,: omv</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Here is an example of its application to $N=4$</p>

<pre><code>   Omg 4
1                  1              1                   1
1 0.707107j_0.707107 2.22045e_16j_1 _0.707107j_0.707107
</code></pre>

<p>Now we can go back to the <code>fft</code> function and add some code to the <code>something_recursive_here</code> placeholder</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">fft=: final_piece_here@(Omg@#@{. * $:"1)@spl ` ] @. (1 = #)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>$:"1</code> means the <code>fft</code> function is recursively applied to every row of its input matrix (which is the result of the <code>spl</code> function above). <code>Omg@#@{.</code> means: take the first row of the input matrix, get the length of it, and pass it to the <code>Omg</code> function.</p>

<p><code>final_piece_here</code> is then what we described above as “find the sum and difference of the result vectors, and concatenate them”. In J it’s implemented as the fork <code>+/ , -/</code>. Now we have all the pieces in place, and the final program is</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">spl=: |:@(_2 ]\ ])
</span><span class="line">omg=: ^@o.@(0j1&amp;%)
</span><span class="line">omv=: omg ^ -@i.
</span><span class="line">Omg=: 1 ,: omv
</span><span class="line">fft=: (+/ , -/)@(Omg@#@{. * $:"1)@spl ` ] @. (1 = #)</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="references">References</h2>

<ul>
  <li>Source code with examples on <a href="https://github.com/ndpar/j/blob/master/fourier.ijs">GitHub</a></li>
  <li>Official FFT add-on on <a href="http://www.jsoftware.com/jwiki/Addons/math/fftw">jsoftware</a> wiki.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Discrete Fourier transform in J]]></title>
    <link href="http://blog.ndpar.com/2014/10/11/dft-j/"/>
    <updated>2014-10-11T08:00:00-04:00</updated>
    <id>http://blog.ndpar.com/2014/10/11/dft-j</id>
    <content type="html"><![CDATA[<p>The Fourier analysis in general and the Fourier transform in particular has always been one of my favourite topics in mathematics. When I started learning the <a href="http://www.jsoftware.com">J programming language</a> I thought that implementing the discrete Fourier transform (DFT) in J must be really elegant. One rainy weekend I finally found time to do that, and this post is a result of my experiments.</p>

<h2 id="math">Math</h2>

<p>The definition of one-dimensional DFT is pretty simple. It is just a function that maps a given vector <strong>f</strong> of length <em>N</em> to a vector <strong>F</strong> of the same length by the following formula</p>

<script type="math/tex; mode=display">
\mathbf{F}[m] = \sum_{n=0}^{N-1} \mathbf{f}[n] e^{-2\pi i mn/N}, \quad m = 0, \dots , N-1
</script>

<p>To implement this formula the only thing we need is basic arithmetic for complex numbers. Not only does J provide such an arithmetic, it has special code for complex exponentiation, which makes the implementation much easier than it would be in other languages.</p>

<p>Before we start coding let’s rewrite the formula in terms of matrix multiplication so that we can utilize this feature of J. Let $\omega$ be the primitive <em>N</em>th root of unity $\omega = e^{2\pi i/N}$, then the DFT formula becomes</p>

<script type="math/tex; mode=display">
\mathbf{F} = \mathbf{f} \cdot \Omega
</script>

<p>where <strong>f</strong> is an input vector and $\Omega$ is a symmetric matrix $(\omega^{-mn})$ with $m,n=0,\dots,N-1$.</p>

<!-- more -->

<h2 id="programming">Programming</h2>

<p>We are now ready to code. Let’s start with $\omega = e^{2\pi i/N}$. As I said before J has special code for function $e^{\pi x}$, namely the composition <code>^@o.@</code>. In our case $x$ is equal to $2i/N$, where $N$ is an input to the function $\omega$. In other words, $x$ is a function that divides $2i$ by its input, which in J is written as <code>0j2&amp;%</code>. That means the complete little omega implementation is</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">omg=: ^@o.@(0j2&amp;%)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The next step is the matrix $\Omega=(\omega^{-mn})$. We can think of it this way: make a multiplication table of vectors $[0,\dots,N-1]$ and $-[0,\dots,N-1]$, then raise $\omega$ to the power of every element from that table. In J the multiplication table of a vector by its negative is implemented as the hook <code>*/ -</code>. For building a range-vector $[0,\dots,N-1]$ we can use the function <code>i.</code>. Therefore, the implementation of a square matrix $(-mn)$ in J is the composition <code>(*/ -)@i.</code>, and the function of $\Omega$ is</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Omg=: omg ^ (*/ -)@i.</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The last piece of the DFT program is the formula $\mathbf{f}\cdot\Omega$. Our <code>Omg</code> function accepts as a parameter the length of the input vector, while the <code>dft</code> function does the vector itself. That means we need to compose <code>Omg</code> function with the length function <code>#</code>. Then the composition <code>Omg@#</code> will work on vectors.</p>

<p>The matrix (and vector) multiplication function in J is <code>+/ .*</code>. Therefore, the product of the input vector and the function <code>Omg@#</code> is just a hook</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">dft=: +/ .* Omg@#</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That’s it. This is a complete implementation of DFT in J. Let’s put all three lines together.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">omg=: ^@o.@(0j2&amp;%)
</span><span class="line">Omg=: omg ^ (*/ -)@i.
</span><span class="line">dft=: +/ .* Omg@#</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The whole program fits in one tweet. If you like one-liners, you can do this as well</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">dft=: +/ .* ^@o.@(0j2&amp;% * (*/ -)@i.)@#</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="references">References</h2>

<ul>
  <li>Source code with examples on <a href="https://github.com/ndpar/j/blob/master/fourier.ijs">GitHub</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang Factory Lite 2013]]></title>
    <link href="http://blog.ndpar.com/2013/11/23/efl-toronto-2013/"/>
    <updated>2013-11-23T07:00:00-05:00</updated>
    <id>http://blog.ndpar.com/2013/11/23/efl-toronto-2013</id>
    <content type="html"><![CDATA[<p>For the last four months I’ve been actively involved in organizing EFL in Toronto.
Now when the conference is over I want to take a few minutes to express my appreciation to all the people who made it happen.</p>

<p><img class="center" src="http://blog.ndpar.com/images/posts/tefl-2013.jpg" /></p>

<p>My big thank you goes to (in alphabetical order)</p>

<ul>
  <li>Carlo Barrettara, Wioletta Dec, Michael DiBernardo, Monika Jarzyna, Michael Russo, Dann Toliver</li>
  <li>All speakers: Louis-Philippe Gauthier, Fred Hebert, Christopher Meiklejohn, Igor Ostaptchenko, Yurii Rashkovskii, Tom Santero, Garrett Smith</li>
  <li>All attendees</li>
  <li>My family</li>
</ul>

<p>Thank you all! Without you this conference wouldn’t be possible.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[12PM bug in Java]]></title>
    <link href="http://blog.ndpar.com/2013/07/28/java-12pm-bug/"/>
    <updated>2013-07-28T08:00:00-04:00</updated>
    <id>http://blog.ndpar.com/2013/07/28/java-12pm-bug</id>
    <content type="html"><![CDATA[<p>I’ve recently hit on a nasty bug in Java. It sits in <code>Date</code> class and shows up only at noon!
I’m going to demonstrate it using Groovy shell, but you can reproduce it in plain Java environment too.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="groovy"><span class="line"><span class="n">format</span> <span class="o">=</span> <span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="na">text</span><span class="o">.</span><span class="na">SimpleDateFormat</span><span class="o">(</span><span class="s1">&#39;EEE MMM d hh:mm:ss z yyyy&#39;</span><span class="o">)</span>
</span><span class="line"><span class="c1">//= java.text.SimpleDateFormat@fbb27a1c</span>
</span><span class="line">
</span><span class="line"><span class="n">originalDate</span> <span class="o">=</span> <span class="s1">&#39;Sun Jul 28 13:14:15 EDT 2013&#39;</span>
</span><span class="line"><span class="c1">//= Sun Jul 28 13:14:15 EDT 2013</span>
</span><span class="line">
</span><span class="line"><span class="n">date</span> <span class="o">=</span> <span class="n">format</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">originalDate</span><span class="o">)</span>
</span><span class="line"><span class="c1">//= Sun Jul 28 13:14:15 EDT 2013</span>
</span><span class="line">
</span><span class="line"><span class="n">parsedDate</span> <span class="o">=</span> <span class="n">date</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span>
</span><span class="line"><span class="c1">//= Sun Jul 28 13:14:15 EDT 2013</span>
</span><span class="line">
</span><span class="line"><span class="k">assert</span> <span class="n">originalDate</span> <span class="o">==</span> <span class="n">parsedDate</span>
</span><span class="line"><span class="c1">//= null</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>So far so good.</p>

<p>I chose a specific formatter on line 1 to make the bug even more evident. With this formatter lines 5, 8, and 11 must be identical on my machine, and they are in this example. The assertion on line 13 also proves the equality.</p>

<p>Now let’s change the example date to one hour earlier</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="groovy"><span class="line"><span class="n">originalDate</span> <span class="o">=</span> <span class="s1">&#39;Sun Jul 28 12:14:15 EDT 2013&#39;</span>
</span><span class="line"><span class="c1">//= Sun Jul 28 12:14:15 EDT 2013</span>
</span><span class="line">
</span><span class="line"><span class="n">date</span> <span class="o">=</span> <span class="n">format</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">originalDate</span><span class="o">)</span>
</span><span class="line"><span class="c1">//= Sun Jul 28 00:14:15 EDT 2013</span>
</span><span class="line">
</span><span class="line"><span class="n">parsedDate</span> <span class="o">=</span> <span class="n">date</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span>
</span><span class="line"><span class="c1">//= Sun Jul 28 00:14:15 EDT 2013</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Lines 2, 5, and 8 are not identical any more. The String representation of the date is 12 hours off.</p>

<p>To make sure the problem is in <code>toString</code> and not in <code>parse</code>, let’s format the date using formatter</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="groovy"><span class="line"><span class="n">format</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">date</span><span class="o">)</span>
</span><span class="line"><span class="c1">//= Sun Jul 28 12:14:15 EDT 2013</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Looks good. The problem is in <code>toString</code> indeed. Or is it?</p>

<p>Let’s parse 13 o’clock date and 12 o’clock date. The difference between them should be 1 hour. In reality</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="groovy"><span class="line"><span class="n">date13</span> <span class="o">=</span> <span class="s1">&#39;Sun Jul 28 13:14:15 EDT 2013&#39;</span>
</span><span class="line"><span class="c1">//= Sun Jul 28 13:14:15 EDT 2013</span>
</span><span class="line">
</span><span class="line"><span class="n">date12</span> <span class="o">=</span> <span class="s1">&#39;Sun Jul 28 12:14:15 EDT 2013&#39;</span>
</span><span class="line"><span class="c1">//= Sun Jul 28 12:14:15 EDT 2013</span>
</span><span class="line">
</span><span class="line"><span class="o">(</span><span class="n">format</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">date13</span><span class="o">).</span><span class="na">time</span> <span class="o">-</span> <span class="n">format</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">date12</span><span class="o">).</span><span class="na">time</span><span class="o">)</span> <span class="s">/ (1000 * 60 * 60)</span>
</span><span class="line"><span class="s">/</span><span class="o">/=</span> <span class="mi">13</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Wow, the problem is actually in <code>parse</code>. Then how come the <code>format</code> returned the correct value? That’s still a mystery to me.</p>

<p>I’m actually quite surprised that this bug survived through JDK 1.7.0_09, and neither Sun nor Oracle hasn’t fixed it yet.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lambda Jam 2013]]></title>
    <link href="http://blog.ndpar.com/2013/07/08/lambdajam-2013/"/>
    <updated>2013-07-08T05:00:00-04:00</updated>
    <id>http://blog.ndpar.com/2013/07/08/lambdajam-2013</id>
    <content type="html"><![CDATA[<p>This is my impressionistic non-canonical irregular Clojuresque-Erlangish notes on <a href="http://lambdajam.com">Lambda Jam</a> conference which took place in Chicago on July 8–10, 2013.
These notes are pretty long, and I don’t split them on purpose.
If you read them all, you should become overwhelmed and overloaded with the information.
Only this way you can feel the same I felt on the last day of the conference :)</p>

<p><img src="http://lambdajam.com/storage/2013/GrandBallroom2_header.jpg.jpeg?__SQUARESPACE_CACHEVERSION=1361043346973" /></p>

<!-- more -->

<h2 id="stuart-sierra--data-visibility-and-abstraction">Stuart Sierra — Data, Visibility, and Abstraction</h2>

<ul>
  <li>Video: <a href="http://www.infoq.com/presentations/data-visibility-abstraction">InfoQ</a></li>
</ul>

<h3 id="quotes">Quotes</h3>

<ul>
  <li>QBasic distinguished between subroutines and functions.</li>
  <li>Perl is a QBasic of Linux.</li>
  <li>Perl provided bunch of abstractions that made my life easier.</li>
  <li>Just a few generic data structures can represent pretty much any kind of data.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="c1">#!/usr/bin/env perl</span>
</span><span class="line">
</span><span class="line"><span class="k">my</span> <span class="nv">$user</span> <span class="o">=</span>
</span><span class="line">  <span class="p">{</span> <span class="n">name</span>  <span class="o">=&gt;</span> <span class="s">&quot;Stuart&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="n">age</span>   <span class="o">=&gt;</span> <span class="mi">15</span><span class="p">,</span>
</span><span class="line">    <span class="n">langs</span> <span class="o">=&gt;</span> <span class="p">[</span> <span class="s">&quot;BASIC&quot;</span><span class="p">,</span>
</span><span class="line">               <span class="s">&quot;C++&quot;</span><span class="p">,</span>
</span><span class="line">               <span class="s">&quot;Perl&quot;</span> <span class="p">]</span> <span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="p">{</span><span class="s">&#39;langs&#39;</span><span class="p">}[</span><span class="mi">2</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><code>Tie::File</code> — Access the lines of a disk file via a Perl array.</li>
  <li>XSLT is a homoiconic programming language.</li>
  <li>[In XSLT] you can write the entire program as a series of data transformations.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#!/usr/bin/env bash</span>
</span><span class="line">saxon one.xslt site.xml t1.xml
</span><span class="line">saxon two.xslt t1.xml t2.xml
</span><span class="line">saxon three.xslt t2.xml t3.xml
</span><span class="line">saxon four.xslt t3.xml index.html
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Clojure has universal data structures.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">user</span> <span class="p">{</span><span class="ss">:name</span> <span class="s">&quot;Stuart&quot;</span>
</span><span class="line">           <span class="ss">:age</span> <span class="mi">25</span>
</span><span class="line">           <span class="ss">:langs</span> <span class="p">[</span><span class="s">&quot;Lisp&quot;</span>
</span><span class="line">                   <span class="s">&quot;Ruby&quot;</span>
</span><span class="line">                   <span class="s">&quot;Clojure&quot;</span><span class="p">]})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>I’m frequently suspicious of libraries that use a lot of macros to create their abstractions because it means I can’t see them, I can’t manipulate them with the tools I already have.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">require</span> <span class="ss">&#39;clojure.inspector</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">clojure.inspector/inspect-tree</span> <span class="nv">user</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://blog.ndpar.com/images/posts/clojure.inspector.png" /></p>

<ul>
  <li>I started to write my programs as a series of data transformations with just one set of side-effects at the very end.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">gather-information</span> <span class="p">[</span><span class="nv">state</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">assoc </span><span class="nv">state</span> <span class="ss">:analysis</span>
</span><span class="line">               <span class="p">(</span><span class="nf">computation</span> <span class="p">(</span><span class="ss">:input</span> <span class="nv">state</span><span class="p">))))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">make-decision</span> <span class="p">[</span><span class="nv">state</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">assoc </span><span class="nv">state</span> <span class="ss">:response</span>
</span><span class="line">               <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">condition?</span> <span class="p">(</span><span class="ss">:analysis</span> <span class="nv">state</span><span class="p">))</span>
</span><span class="line">                   <span class="ss">:launch-missile</span>
</span><span class="line">                   <span class="ss">:erase-hard-drive</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">take-action</span> <span class="p">[</span><span class="nv">state</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nf">case</span> <span class="p">(</span><span class="ss">:response</span> <span class="nv">state</span><span class="p">)</span>
</span><span class="line">    <span class="ss">:launch-missile</span> <span class="p">(</span><span class="nf">launch-missile</span><span class="p">)</span>
</span><span class="line">    <span class="ss">:erase-hard-drive</span> <span class="p">(</span><span class="nf">erase-hard-drive</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">complex-process</span> <span class="p">[</span><span class="nv">initial-state</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">-&gt; </span><span class="nv">initial-state</span>
</span><span class="line">      <span class="nv">gather-information</span>
</span><span class="line">      <span class="nv">make-decision</span>
</span><span class="line">      <span class="nv">take-action</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>I try to pursue abstractions that make programs more visible, make easier to see what the program is doing.</li>
</ul>

<blockquote><p>Being abstract is something profoundly different from being vague…</p><p>The purpose of abstraction is not to be vague, but to create a new semantic level in which one can be absolutely precise.</p><footer><strong>Edsger Dijkstra</strong></footer></blockquote>

<h2 id="aditya-siram--simile-free-monad-recipes">Aditya Siram — Simile-Free Monad Recipes</h2>

<ul>
  <li>Slides: <a href="https://github.com/strangeloop/lambdajam2013/blob/master/slides/Siram-SimileFreeMonadRecipes.pdf">GitHub</a></li>
</ul>

<h3 id="non-idiomatic-haskell-monad-tutorial">Non-idiomatic Haskell monad tutorial</h3>

<p>Working with monads is a switching between monadic and non-monadic context.</p>

<h3 id="io">IO</h3>

<ul>
  <li><code>&lt;-</code> operator gets the value from monadic context.</li>
  <li><code>return</code> puts the value into monadic context.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">main</span> <span class="ow">::</span> <span class="kt">IO</span> <span class="nb">()</span>
</span><span class="line"><span class="nf">main</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class="line">  <span class="n">writeFile</span> <span class="s">&quot;test.txt&quot;</span> <span class="s">&quot;a,b,c,d,e&quot;</span> <span class="ow">::</span> <span class="kt">IO</span> <span class="nb">()</span>
</span><span class="line">  <span class="n">x</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">&lt;-</span> <span class="n">readFile</span> <span class="s">&quot;test.txt&quot;</span> <span class="ow">::</span> <span class="kt">IO</span> <span class="kt">String</span>
</span><span class="line">  <span class="kr">let</span> <span class="n">upCased</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">=</span> <span class="n">map</span> <span class="n">toUpper</span> <span class="n">x</span>
</span><span class="line">  <span class="n">y</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">&lt;-</span> <span class="n">return</span> <span class="n">upCased</span> <span class="ow">::</span> <span class="kt">IO</span> <span class="kt">String</span>
</span><span class="line">  <span class="n">print</span> <span class="n">y</span> <span class="ow">::</span> <span class="kt">IO</span> <span class="nb">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="reader">Reader</h3>

<ul>
  <li>Reader = Read-only State + Result</li>
  <li><code>runReader</code> :: Reader Monad -&gt; Read-Only State -&gt; Result</li>
  <li><code>ask</code> extracts the state from the monad for inspection.</li>
</ul>

<h3 id="writer">Writer</h3>

<ul>
  <li>Writer = Append-Only State + Result</li>
  <li><code>runWriter</code> :: Writer Monad -&gt; (Result, Accumulated State)</li>
  <li>State is accumulated using <code>tell</code>.</li>
</ul>

<h3 id="state">State</h3>

<ul>
  <li>State Monad = Mutable State + Result</li>
  <li><code>get</code>, <code>put</code> do what they sound like.</li>
  <li><code>runState</code> :: State Monad -&gt; Initial State -&gt; (Result, New State)</li>
  <li>Initial State is required.</li>
</ul>

<h2 id="dean-wampler--copious-data-the-killer-app-for-fp">Dean Wampler — Copious Data, the “Killer App” for FP</h2>

<ul>
  <li>Slides: <a href="https://github.com/strangeloop/lambdajam2013/blob/master/slides/Wampler-CopiousDataTheKillerAppForFP.pdf">GitHub</a></li>
  <li>Video: <a href="http://www.infoq.com/presentations/big-data-functional-programming">InfoQ</a></li>
</ul>

<h3 id="quotes-1">Quotes</h3>

<ul>
  <li>It’s hard to implement many algorithms in MapReduce.</li>
  <li>MapReduce is very course-grained.</li>
  <li>For Hadoop in particularly, the Java API is hard to use.</li>
  <li>Hadoop is the EJBs of our time</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.*</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapred.*</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">class</span> <span class="nc">WCMapper</span> <span class="kd">extends</span> <span class="n">MapReduceBase</span>
</span><span class="line">    <span class="kd">implements</span> <span class="n">Mapper</span><span class="o">&lt;</span><span class="n">LongWritable</span><span class="o">,</span> <span class="n">Text</span><span class="o">,</span> <span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">static</span> <span class="kd">final</span> <span class="n">IntWritable</span> <span class="n">one</span> <span class="o">=</span> <span class="k">new</span> <span class="n">IntWritable</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class="line">    <span class="kd">static</span> <span class="kd">final</span> <span class="n">Text</span> <span class="n">word</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Text</span><span class="o">();</span> <span class="c1">// Value will be set in a non-thread-safe way!</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">map</span><span class="o">(</span><span class="n">LongWritable</span> <span class="n">key</span><span class="o">,</span> <span class="n">Text</span> <span class="n">valueDocContents</span><span class="o">,</span>
</span><span class="line">            <span class="n">OutputCollector</span><span class="o">&lt;</span><span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">&gt;</span> <span class="n">output</span><span class="o">,</span> <span class="n">Reporter</span> <span class="n">reporter</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">String</span><span class="o">[]</span> <span class="n">tokens</span> <span class="o">=</span> <span class="n">valueDocContents</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;\\s+&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="nl">wordString:</span> <span class="n">tokens</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">wordString</span><span class="o">.</span><span class="na">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">word</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">wordString</span><span class="o">.</span><span class="na">toLowerCase</span><span class="o">());</span>
</span><span class="line">                <span class="n">output</span><span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="n">one</span><span class="o">);</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">class</span> <span class="nc">Reduce</span> <span class="kd">extends</span> <span class="n">MapReduceBase</span>
</span><span class="line">    <span class="kd">implements</span> <span class="n">Reducer</span><span class="o">&lt;</span><span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">,</span> <span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">reduce</span><span class="o">(</span><span class="n">Text</span> <span class="n">keyWord</span><span class="o">,</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">IntWritable</span><span class="o">&gt;</span> <span class="n">valuesCounts</span><span class="o">,</span>
</span><span class="line">            <span class="n">OutputCollector</span><span class="o">&lt;</span><span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">&gt;</span> <span class="n">output</span><span class="o">,</span> <span class="n">Reporter</span> <span class="n">reporter</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">totalCount</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">        <span class="k">while</span> <span class="o">(</span><span class="n">valuesCounts</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">            <span class="n">totalCount</span> <span class="o">+=</span> <span class="n">valuesCounts</span><span class="o">.</span><span class="na">next</span><span class="o">().</span><span class="na">get</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="n">output</span><span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">keyWord</span><span class="o">,</span> <span class="k">new</span> <span class="n">IntWritable</span><span class="o">(</span><span class="n">totalCount</span><span class="o">));</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Use Cascalog</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">lowercase</span> <span class="p">[</span><span class="nv">w</span><span class="p">]</span> <span class="p">(</span><span class="nf">.toLowerCase</span> <span class="nv">w</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nf">?&lt;-</span> <span class="p">(</span><span class="nf">stdout</span><span class="p">)</span> <span class="p">[</span><span class="nv">?word</span> <span class="nv">?count</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nf">sentence</span> <span class="nv">?s</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nf">split</span> <span class="nv">?s</span> <span class="ss">:&gt;</span> <span class="nv">?word1</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nf">lowercase</span> <span class="nv">?word1</span> <span class="ss">:&gt;</span> <span class="nv">?word</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nf">c/count</span> <span class="nv">?count</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Use Spark</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">object</span> <span class="nc">WordCountSpark</span> <span class="o">{</span>
</span><span class="line">    <span class="k">def</span> <span class="n">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="o">{</span>
</span><span class="line">        <span class="k">val</span> <span class="n">file</span> <span class="k">=</span> <span class="n">spark</span><span class="o">.</span><span class="n">textFile</span><span class="o">(</span><span class="n">args</span><span class="o">(</span><span class="mi">0</span><span class="o">))</span>
</span><span class="line">        <span class="k">val</span> <span class="n">counts</span> <span class="k">=</span> <span class="n">file</span><span class="o">.</span><span class="n">flatMap</span><span class="o">(</span><span class="n">line</span> <span class="k">=&gt;</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="o">(</span><span class="s">&quot;\\W+&quot;</span><span class="o">))</span>
</span><span class="line">                         <span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">word</span> <span class="k">=&gt;</span> <span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="mi">1</span><span class="o">))</span>
</span><span class="line">                         <span class="o">.</span><span class="n">reduceByKey</span><span class="o">(</span><span class="k">_</span> <span class="o">+</span> <span class="k">_</span><span class="o">)</span>
</span><span class="line">        <span class="n">counts</span><span class="o">.</span><span class="n">saveAsTextFile</span><span class="o">(</span><span class="n">args</span><span class="o">(</span><span class="mi">1</span><span class="o">))</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Data problems are fundamentally Mathematics!</li>
  <li>Data will drive widespread FP adoption.</li>
</ul>

<h3 id="resources">Resources</h3>

<ul>
  <li><a href="http://www.cascading.org">Cascading</a> — an application framework for Java developers to simply develop Data Analytics applications on Hadoop.</li>
  <li>Nathan Marz — Introducing Cascalog: a Clojure-based query language for Hadoop. [<a href="http://nathanmarz.com/blog/introducing-cascalog-a-clojure-based-query-language-for-hado.html">blog</a>]</li>
  <li><a href="http://storm-project.net">Storm</a> — free and open source distributed realtime computation system.</li>
  <li><a href="http://spark-project.org">Spark</a> — an open source cluster computing system that aims to make data analytics fast.</li>
  <li>Evan Miller — The Mathematical Hacker. [<a href="http://www.evanmiller.org/mathematical-hacker.html">blog</a>]</li>
</ul>

<h2 id="jam">Jam</h2>

<p>A jam is similar to a code retreat, only you work in groups instead of pairs. It starts with a problem description. Then you form a group and work on the problem for three hours. In the end you share your experience with the audience.</p>

<p>The problem of the first jam was Peter Norvig’s <a href="http://norvig.com/spell-correct.html">Spelling Corrector</a>. I was wandering the room looking for an Erlang group to join when I bumped into this bunch of wonderful people: <a href="https://twitter.com/Bruce_Adams">Bruce Adams</a>, <a href="https://twitter.com/joeerl">Joe Armstrong</a>, <a href="https://twitter.com/gar1t">Garrett Smith</a>, <a href="https://twitter.com/bryan_hunter">Bryan Hunter</a>, and <a href="https://twitter.com/karl_grz">Karl Grzeszczak</a>.</p>

<p><img class="center" src="https://pbs.twimg.com/media/BOrdEK6CYAA2zlb.jpg" /></p>

<p>Soon the jam transformed into an Erlang master class from Joe Armstrong. We were watching Joe’s work flow, his way of thinking, learning his tips and tricks, listening to his brilliant comments about Erlang and Haskell.</p>

<p><img class="center" src="https://pbs.twimg.com/media/BOrk-wfCEAE3kKr.jpg" /></p>

<p>At some point I remarked how elegant was the function Joe Armstrong just implemented, on which he replied: <strong><em>There is not much intelligence here. It’s all about practice.</em></strong></p>

<blockquote><p>Today I watched @joeerl implementing a parallel spell checker in Erlang. That was worth the price of admission alone. Thank you! #LambdaJam</p><footer><strong>@karl_grz</strong> <cite><a href="https://twitter.com/karl_grz/statuses/354386650291380224">twitter.com/karl_grz/statuses/&hellip;</a></cite></footer></blockquote>

<h3 id="resources-1">Resources</h3>

<ul>
  <li><a href="https://github.com/ericnormand/spelling-jam/blob/master/code/erlang/spell.erl">Source code</a></li>
</ul>

<h2 id="joe-armstrong--keynote">Joe Armstrong — Keynote</h2>

<h3 id="systems-that-run-forever-self-heal-and-scale">Systems That Run Forever Self-Heal and Scale</h3>

<ul>
  <li>Slides: <a href="https://github.com/strangeloop/lambdajam2013/blob/master/slides/Armstrong-SystemsThatRunForever.pdf">GitHub</a></li>
  <li>Video: <a href="http://www.infoq.com/presentations/self-heal-scalable-system">InfoQ</a></li>
</ul>

<h3 id="quotes-2">Quotes</h3>

<ul>
  <li>I’m not interested in programming languages. I’m interested in solving problems.</li>
  <li>Primary goal Erlang was designed for is the fault-talerant computation.</li>
  <li>I think it’s a bad idea to design your system for 10 people and then scale it up for 10,000. It’s better to design it for 10M and scale it down.</li>
  <li>The difficult part of making reliable system is to make multiple machines work independently in parallel.</li>
</ul>

<p>Why distributed programming is hard</p>

<ol>
  <li>Difficulty in identifying and dealing with failures.</li>
  <li>Achieving consistency in data across processes.</li>
  <li>Heterogeneous nature of the components involved in the system.</li>
  <li>Testing a distributed system is quite difficult.</li>
  <li>The technologies involved in distributed systems are not easy to understand.</li>
</ol>

<p><em>Chord</em> algorithm: distributing data across several machines</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">S1 <span class="nv">IP</span> <span class="o">=</span> 235.23.34.12
</span><span class="line">S2 <span class="nv">IP</span> <span class="o">=</span> 223.23.141.53
</span><span class="line">S3 <span class="nv">IP</span> <span class="o">=</span> 122.67.12.23
</span><span class="line">
</span><span class="line">md5<span class="o">(</span>ip<span class="o">(</span>s1<span class="o">))</span> <span class="o">=</span> C82D4DB065065DBDCDADFBC5A727208E
</span><span class="line">md5<span class="o">(</span>ip<span class="o">(</span>s2<span class="o">))</span> <span class="o">=</span> 099340C20A42E004716233AB216761C3
</span><span class="line">md5<span class="o">(</span>ip<span class="o">(</span>s3<span class="o">))</span> <span class="o">=</span> A0E607462A563C4D8CCDB8194E3DEC8B
</span><span class="line">
</span><span class="line">Sorted:
</span><span class="line"><span class="nv">099340C20A42E004716233AB216761C3</span> <span class="o">=</span>&gt; s2
</span><span class="line"><span class="nv">A0E607462A563C4D8CCDB8194E3DEC8B</span> <span class="o">=</span>&gt; s3
</span><span class="line"><span class="nv">C82D4DB065065DBDCDADFBC5A727208E</span> <span class="o">=</span>&gt; s1
</span><span class="line">
</span><span class="line">lookup <span class="nv">Key</span> <span class="o">=</span> <span class="s2">&quot;mail-23412&quot;</span>
</span><span class="line">md5<span class="o">(</span><span class="s2">&quot;mail-23412&quot;</span><span class="o">)</span> <span class="o">=</span>&gt; B91AF709D7C1E6988FCEE7ADF7094A26
</span><span class="line">
</span><span class="line">So the Value is on machine s3 <span class="o">(</span>first machine with Md5 lower than md5 of key<span class="o">)</span>
</span><span class="line">
</span><span class="line">Replica:
</span><span class="line">md5<span class="o">(</span>md5<span class="o">(</span><span class="s2">&quot;mail-23412&quot;</span><span class="o">))</span> <span class="o">=</span>&gt; D604E7A54DC18FD7AC70D12468C34B63
</span><span class="line">
</span><span class="line">So the replica is on machine s1
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>What if master dies? <em>Paxos</em> — distributed leadership election algorithm. Very complicated algorithm that only few people understand.</li>
  <li>The leadership election is solved in OTP (mnesia, gen_leader) and Riak.</li>
  <li>You don’t need libraries to write web server. Any fool can write them. But distributed data storage is difficult.</li>
</ul>

<p>Six rules for building HA systems</p>

<ol>
  <li>Isolation</li>
  <li>Concurrency</li>
  <li>Failure detection</li>
  <li>Fault identification</li>
  <li>Live code upgrade</li>
  <li>Stable storage</li>
</ol>

<ul>
  <li>With stable storage you don’t need backups. You need snapshots, because you override the data, but you don’t need backups.</li>
  <li>Threads are evil because they share resources.</li>
  <li>We already solved the problem with parallel computing (in Erlang). <em>We are working on detecting bottlenecks now.</em></li>
</ul>

<h3 id="resources-2">Resources</h3>

<ul>
  <li>Ericsson <a href="http://www.ericsson.com/ourportfolio/products/sgsn-mme">SGSN-MME</a>.</li>
  <li>Rajith Attapattu — 5 reasons why Distributed Systems are hard to program. [<a href="http://rajith.2rlabs.com/2008/07/23/5-reasons-why-distributed-systems-are-hard-to-develop/">blog</a>]</li>
  <li><a href="http://en.wikipedia.org/wiki/Chord_(peer-to-peer)">Chord</a> algorithm.</li>
  <li><a href="http://en.wikipedia.org/wiki/Paxos_(computer_science)">Paxos</a> algorithm.</li>
  <li>Leslie Lamport — Paxos Made Simple. [<a href="http://www.cs.utexas.edu/users/lorenzo/corsi/cs380d/past/03F/notes/paxos-simple.pdf">pdf</a>]</li>
  <li>Thomas Arts, Koen Claessen, Hans Svensson — Semi-formal development of a fault-tolerant leader election protocol in Erlang. [<a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.101.3220">article</a>]</li>
  <li><a href="http://concurix.com">Concurix</a> — performance tool for Erlang.</li>
</ul>

<h2 id="erlang-beer-with-joe-armstrong">Erlang beer with Joe Armstrong</h2>

<blockquote><p>For those who didn&#39;t hear, we&#39;re meeting up at The Public House - 400 N State St.</p><footer><strong>@gar1t</strong> <cite><a href="https://twitter.com/gar1t/statuses/354375863971749888">twitter.com/gar1t/statuses/&hellip;</a></cite></footer></blockquote>

<p>This was the best part of the first day :)</p>

<h2 id="john-daily--distributed-programming-with-riak-core-and-pipe">John Daily — Distributed Programming with Riak Core and Pipe</h2>

<ul>
  <li>Slides: <a href="https://github.com/strangeloop/lambdajam2013/blob/master/slides/Daily-RiakCorePipe.pdf">GitHub</a></li>
</ul>

<p>Distributed programming is hard (clocks, latency, lost messages, servers break). Use Riak.</p>

<h3 id="resources-3">Resources</h3>

<ul>
  <li>Sources: Riak <a href="https://github.com/basho/riak_core">core</a> and <a href="https://github.com/basho/riak_pipe">pipe</a>.</li>
  <li>Eric Redmond — A Little Riak <a href="https://github.com/coderoshi/little_riak_book/tree/master/rendered/">Book</a>.</li>
</ul>

<h2 id="tracy-harms--semantics-clarity-and-notation-the-benefits-of-expressions-over-statements">Tracy Harms — Semantics, clarity, and notation: the benefits of expressions over statements</h2>

<blockquote><p>@kaleidic&#8217;s &#8220;Benefits of Expressions Over Statements&#8221; is gold. Brain is barely keeping up.</p><footer><strong>@bryan_hunter</strong> <cite><a href="https://twitter.com/bryan_hunter/statuses/354619102792396803">twitter.com/bryan_hunter/&hellip;</a></cite></footer></blockquote>

<ul>
  <li>Expressions condense meaning in space, and eliminate time.</li>
  <li>Understanding occurs only when meaning is selected and simplified enough for a mind to think about it.</li>
</ul>

<blockquote><p>This is the example @kaleidic is showing now</p><footer><strong>@gazoombo</strong> <cite><a href="https://twitter.com/gazoombo/statuses/354622989599383552">twitter.com/gazoombo/statuses/&hellip;</a></cite></footer></blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class=""><span class="line">allmasks=: 2 #:@i.@^ #
</span><span class="line">firstend=: 1 0 i.&amp;1@E."1 ]
</span><span class="line">laststart=: 0 1 {:@I.@E."1 ]
</span><span class="line">noncont=: &lt;@#~ (#~ firstend &lt; laststart)@allmasks
</span><span class="line">
</span><span class="line">   noncont 1+i.4
</span><span class="line">┌───┬───┬───┬─────┬─────┐
</span><span class="line">│2 4│1 4│1 3│1 3 4│1 2 4│
</span><span class="line">└───┴───┴───┴─────┴─────┘
</span><span class="line">
</span><span class="line">   noncont 'aeiou'
</span><span class="line">┌──┬──┬──┬───┬───┬──┬──┬───┬──┬───┬───┬────┬───┬───┬────┬────┐
</span><span class="line">│iu│eu│eo│eou│eiu│au│ao│aou│ai│aiu│aio│aiou│aeu│aeo│aeou│aeiu│
</span><span class="line">└──┴──┴──┴───┴───┴──┴──┴───┴──┴───┴───┴────┴───┴───┴────┴────┘
</span><span class="line">
</span><span class="line">   #noncont i.10
</span><span class="line">968</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="resources-4">Resources</h3>

<ul>
  <li>P. J. Landin — The Next 700 Programming Languages. [<a href="http://www.cs.cmu.edu/~crary/819-f09/Landin66.pdf">pdf</a>]</li>
  <li>Tracy Harms — J: A Programming Language. [<a href="http://kaleidic.com/talks/ELC2013-1-1.pdf">pdf</a>]</li>
</ul>

<h2 id="chris-ford--functional-composition">Chris Ford — Functional composition</h2>

<ul>
  <li>Video: <a href="http://www.infoq.com/presentations/music-functional-language">InfoQ</a></li>
  <li>Demo source code: <a href="https://github.com/ctford/functional-composition/tree/LambdaJam-2013">GitHub</a></li>
</ul>

<h3 id="quotes-3">Quotes</h3>

<ul>
  <li>Western music notation is a DSL designed to be executed on a pecular kind of FSM called the musician.</li>
  <li>Sound error correction happening in the brain.</li>
  <li>Given the audience, let’s try <em>F sharp blues</em>.</li>
  <li>A canon is defined as a series of notes that are accompanied by a functional transformation of themselves.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">canon</span> <span class="p">[</span><span class="nv">f</span> <span class="nv">notes</span><span class="p">]</span> <span class="p">(</span><span class="nb">concat </span><span class="nv">notes</span> <span class="p">(</span><span class="nf">f</span> <span class="nv">notes</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>These are all pure functions, so we can compose them together. And that’s what composers did long before the lambda calculus was invented.</li>
</ul>

<h2 id="clinton-dreisbach--functional-web-development-with-clojure">Clinton Dreisbach — Functional Web Development with Clojure</h2>

<p>The Clojure way of web development: lots of loosely coupled libraries.</p>

<h3 id="ring">Ring</h3>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defproject </span><span class="nv">request-echo</span> <span class="s">&quot;0.1.0-SNAPSHOT&quot;</span>
</span><span class="line">
</span><span class="line">  <span class="ss">:dependencies</span> <span class="p">[[</span><span class="nv">org.clojure/clojure</span> <span class="s">&quot;1.5.1&quot;</span><span class="p">]</span>
</span><span class="line">                 <span class="p">[</span><span class="nv">ring</span> <span class="s">&quot;1.1.8&quot;</span><span class="p">]]</span>
</span><span class="line">
</span><span class="line">  <span class="ss">:plugins</span> <span class="p">[[</span><span class="nv">lein-ring</span> <span class="s">&quot;0.8.3&quot;</span><span class="p">]]</span>
</span><span class="line">
</span><span class="line">  <span class="ss">:ring</span> <span class="p">{</span><span class="ss">:handler</span> <span class="nv">request-echo/handler</span>
</span><span class="line">         <span class="ss">:port</span> <span class="mi">3001</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<pre><code>lein ring server
</code></pre>

<p><img class="center" src="http://blog.ndpar.com/images/posts/ring.png" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">ns </span><span class="nv">request-echo</span>
</span><span class="line">  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.pprint</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">pprint</span><span class="p">]]))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">handler</span> <span class="p">[</span><span class="nv">request</span><span class="p">]</span>
</span><span class="line">  <span class="p">{</span><span class="ss">:status</span> <span class="mi">200</span>
</span><span class="line">   <span class="ss">:headers</span> <span class="p">{</span><span class="s">&quot;Content-Type&quot;</span> <span class="s">&quot;text/html&quot;</span><span class="p">}</span>
</span><span class="line">   <span class="ss">:body</span> <span class="p">(</span><span class="nb">str </span><span class="s">&quot;&lt;h1&gt;Request Echo&lt;/h1&gt;&lt;pre&gt;&quot;</span>
</span><span class="line">              <span class="p">(</span><span class="nb">with-out-str </span><span class="p">(</span><span class="nf">pprint</span> <span class="nv">request</span><span class="p">))</span>
</span><span class="line">              <span class="s">&quot;&lt;/pre&gt;&quot;</span><span class="p">)})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="compojure">Compojure</h3>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">compojure.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">])</span>
</span><span class="line"><span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">compojure.route</span> <span class="ss">:as</span> <span class="nv">route</span><span class="p">])</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nf">routes</span>
</span><span class="line">  <span class="c1">;verb  route   parameters        handler</span>
</span><span class="line">  <span class="p">(</span><span class="nf">GET</span>   <span class="s">&quot;/&quot;</span>     <span class="p">[]</span>                <span class="p">(</span><span class="nf">index-page</span><span class="p">))</span>
</span><span class="line">  <span class="p">(</span><span class="nf">GET</span>   <span class="s">&quot;/debts/:person&quot;</span> <span class="p">[</span><span class="nv">person</span><span class="p">]</span> <span class="p">(</span><span class="nf">person-page</span> <span class="nv">person</span><span class="p">))</span>
</span><span class="line">  <span class="p">(</span><span class="nf">GET</span>   <span class="s">&quot;/add-debt&quot;</span> <span class="p">[]</span>            <span class="p">(</span><span class="nf">add-debt-page</span><span class="p">))</span>
</span><span class="line">  <span class="p">(</span><span class="nf">POST</span>  <span class="s">&quot;/add-debt&quot;</span> <span class="p">[</span><span class="nv">from</span> <span class="nv">to</span> <span class="nv">amount</span><span class="p">]</span>
</span><span class="line">         <span class="p">(</span><span class="nf">add-debt-post</span> <span class="p">{</span><span class="ss">:from</span> <span class="nv">from</span>, <span class="ss">:to</span> <span class="nv">to</span>, <span class="ss">:amount</span> <span class="nv">amount</span><span class="p">}))</span>
</span><span class="line">  <span class="p">(</span><span class="nf">route/resources</span> <span class="s">&quot;/&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nf">route/not-found</span> <span class="s">&quot;Page not found&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="hiccup">Hiccup</h3>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">hiccup.core</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">html</span><span class="p">]])</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nf">html</span> <span class="p">[</span><span class="ss">:a.btn</span>         <span class="c1">; element + class or id</span>
</span><span class="line">       <span class="p">{</span><span class="ss">:href</span> <span class="s">&quot;/go&quot;</span><span class="p">}</span>  <span class="c1">; map for attributes</span>
</span><span class="line">       <span class="s">&quot;Click here&quot;</span><span class="p">])</span> <span class="c1">; Content</span>
</span><span class="line"><span class="c1">;;=&gt; &quot;&lt;a class=&quot;btn&quot; href=&quot;/go&quot;&gt;Click here&lt;/a&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="cheshire">Cheshire</h3>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">cheshire.core</span> <span class="ss">:as</span> <span class="nv">json</span><span class="p">])</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">debts</span> <span class="p">(</span><span class="ss">:debts</span> <span class="err">@</span><span class="nv">db</span><span class="p">)</span>
</span><span class="line">      <span class="nv">balances</span> <span class="p">(</span><span class="nf">debts/balances</span> <span class="nv">debts</span><span class="p">)]</span>
</span><span class="line">  <span class="p">{</span><span class="ss">:status</span> <span class="mi">200</span>
</span><span class="line">   <span class="ss">:headers</span> <span class="p">{</span><span class="s">&quot;Content-Type&quot;</span> <span class="s">&quot;application/json&quot;</span><span class="p">}</span>
</span><span class="line">   <span class="ss">:body</span> <span class="p">(</span><span class="nf">json/generate-string</span>
</span><span class="line">          <span class="p">{</span><span class="ss">:debts</span> <span class="nv">debts</span>
</span><span class="line">           <span class="ss">:balances</span> <span class="nv">balances</span><span class="p">})})</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nf">routes</span>
</span><span class="line">  <span class="p">(</span><span class="nf">POST</span> <span class="s">&quot;/add-debt.json&quot;</span> <span class="p">{</span><span class="nv">body</span> <span class="ss">:body</span><span class="p">}</span>
</span><span class="line">        <span class="p">(</span><span class="nf">views/add-debt-json</span> <span class="nv">db</span> <span class="p">(</span><span class="nb">slurp </span><span class="nv">body</span><span class="p">))))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">add-debt-json</span> <span class="p">[</span><span class="nv">db</span> <span class="nv">body</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nf">json/parse-string</span> <span class="nv">body</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="garden">Garden</h3>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">garden.units</span> <span class="ss">:as</span> <span class="nv">u</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">px</span> <span class="nv">pt</span><span class="p">]])</span>
</span><span class="line"><span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">garden.core</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">css</span><span class="p">]])</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">default-color</span> <span class="s">&quot;#EFE&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="p">[[</span><span class="ss">:body</span>
</span><span class="line">  <span class="p">{</span><span class="ss">:background-color</span> <span class="nv">default-color</span><span class="p">}]</span>
</span><span class="line">
</span><span class="line"> <span class="p">[</span><span class="ss">:.btn-primary</span>
</span><span class="line">  <span class="p">{</span><span class="ss">:border-width</span> <span class="p">(</span><span class="nf">px</span> <span class="mi">5</span><span class="p">)}</span>
</span><span class="line">  <span class="p">[</span><span class="err">:</span><span class="o">&amp;</span><span class="ss">:hover</span>
</span><span class="line">   <span class="p">{</span><span class="ss">:border-color</span> <span class="s">&quot;black&quot;</span><span class="p">}]]]</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nf">routes</span>
</span><span class="line">  <span class="p">(</span><span class="nf">GET</span> <span class="s">&quot;/*.css&quot;</span> <span class="p">{</span> <span class="p">{</span><span class="nb">path </span><span class="ss">:*</span><span class="p">}</span> <span class="ss">:route-params</span><span class="p">}</span>
</span><span class="line">       <span class="p">(</span><span class="nf">views/css-page-memoized</span> <span class="nv">path</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">css-page</span> <span class="p">[</span><span class="nv">path</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">when-let </span><span class="p">[</span><span class="nv">garden-url</span> <span class="p">(</span><span class="nf">io/resource</span> <span class="p">(</span><span class="nb">str </span><span class="s">&quot;public/&quot;</span> <span class="nb">path </span><span class="s">&quot;.garden&quot;</span><span class="p">))]</span>
</span><span class="line">    <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">garden-data</span> <span class="p">(</span><span class="nb">load-file </span><span class="p">(</span><span class="nf">.getPath</span> <span class="nv">garden-url</span><span class="p">))]</span>
</span><span class="line">      <span class="p">{</span><span class="ss">:status</span> <span class="mi">200</span>
</span><span class="line">       <span class="ss">:headers</span> <span class="p">{</span><span class="s">&quot;Content-Type&quot;</span> <span class="s">&quot;text/css&quot;</span><span class="p">}</span>
</span><span class="line">       <span class="ss">:body</span> <span class="p">(</span><span class="nf">css</span> <span class="nv">garden-data</span><span class="p">)})))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="k">def </span><span class="nv">css-page-memoized</span> <span class="p">(</span><span class="nf">memoize</span> <span class="nv">css-page</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="resources-5">Resources</h3>

<ul>
  <li><a href="https://github.com/noir-clojure/lib-noir">lib-noir</a> — a set of utilities and helpers for building ring apps.</li>
  <li><a href="http://www.luminusweb.net/">Luminus</a> — another Clojure web framework.</li>
  <li><a href="https://github.com/clojure/clojurescript">ClojureScript</a> — Clojure to JS compiler.</li>
  <li><a href="http://pedestal.io">Pedestal</a> — another framework.</li>
  <li><a href="http://clojure-liberator.github.io/liberator/">Liberator</a> — WebMachine in Clojure.</li>
</ul>

<h2 id="gerald-sussman--keynote">Gerald Sussman — Keynote</h2>

<h3 id="programming-for-the-expression-of-ideas">Programming for the Expression of Ideas</h3>

<ul>
  <li>Slides: <a href="https://github.com/strangeloop/lambdajam2013/blob/master/slides/Sussman-ExpressionOfIdeas.pdf">GitHub</a></li>
  <li>Video: <a href="http://www.infoq.com/presentations/Expression-of-Ideas">InfoQ</a></li>
</ul>

<blockquote><p>Gerald Sussman on stage and Joe Armstrong in the front row nodding along. #LambdaJam is a special place.</p><footer><strong>@bryan_hunter</strong> <cite><a href="https://twitter.com/bryan_hunter/statuses/354717953125650432">twitter.com/bryan_hunter/&hellip;</a></cite></footer></blockquote>

<p><img class="center" src="http://d3j5vwomefv46c.cloudfront.net/photos/large/789035195.jpg" /></p>

<p>Lagrange’s equations of motion in Leibniz notation (with type violation)</p>

<script type="math/tex; mode=display">
\frac{\mathrm d}{\mathrm d t} \left(\frac{\partial L}{\partial \dot{q}^i}\right) - \frac{\partial L}{\partial q^i} = 0
</script>

<p>Expanded form (correct but ugly)</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\frac{\mathrm d}{\mathrm d t} \left(\left.\frac{\partial L(t,q,\dot{q})}{\partial \dot{q}}\right|_{\begin{aligned}q &= w(t)\\ \dot{q} &= \frac{\mathrm d w(t)}{\mathrm d t}\end{aligned}}\right) - \left.\frac{\partial L(t,q,\dot{q})}{\partial q}\right|_{\begin{aligned}q &= w(t)\\ \dot{q} &= \frac{\mathrm d w(t)}{\mathrm d t}\end{aligned}} = 0
 %]]&gt;</script>

<p>Functional form (correct and beautiful)</p>

<script type="math/tex; mode=display">
D((\partial_2 L) \circ (\Gamma[w])) - (\partial_1 L) \circ (\Gamma[w]) = 0
</script>

<p>where</p>

<script type="math/tex; mode=display">
(Df)(t) = \left.\frac{\mathrm d}{\mathrm d x} f(x)\right|_{x=t}  \qquad  \Gamma[w](t) = (t, w(t), Dw(t))
</script>

<p>As Scheme code</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="scheme"><span class="line"><span class="p">(</span><span class="k">define </span><span class="p">((</span><span class="nf">Lagrange-equations</span> <span class="nv">Lagrangian</span><span class="p">)</span> <span class="nv">w</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nf">D</span> <span class="p">(</span><span class="nf">compose</span> <span class="p">((</span><span class="nf">partial</span> <span class="mi">2</span><span class="p">)</span> <span class="nv">Lagrangian</span><span class="p">)</span>
</span><span class="line">                 <span class="p">(</span><span class="nf">Gamma</span> <span class="nv">w</span><span class="p">)))</span>
</span><span class="line">     <span class="p">(</span><span class="nf">compose</span> <span class="p">((</span><span class="nf">partial</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">Lagrangian</span><span class="p">)</span>
</span><span class="line">              <span class="p">(</span><span class="nf">Gamma</span> <span class="nv">w</span><span class="p">))))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="k">define </span><span class="p">((</span><span class="nf">Gamma</span> <span class="nv">w</span><span class="p">)</span> <span class="nv">t</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nf">up</span> <span class="nv">t</span> <span class="p">(</span><span class="nf">w</span> <span class="nv">t</span><span class="p">)</span> <span class="p">((</span><span class="nf">D</span> <span class="nv">w</span><span class="p">)</span> <span class="nv">t</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We can even generate LaTeX from the Scheme code.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="scheme"><span class="line"><span class="p">(</span><span class="nf">show-expression</span>
</span><span class="line">  <span class="p">(((</span><span class="nf">Lagrange-equations</span> <span class="p">(</span><span class="nf">L-harmonic</span> <span class="ss">&#39;m</span> <span class="ss">&#39;k</span><span class="p">))</span>
</span><span class="line">    <span class="nv">proposed-solution</span><span class="p">)</span>
</span><span class="line">   <span class="ss">&#39;t</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The moral: originally, Lagrange’s equations had missing parameters and a type error. Programming them forced an elegant and <em>effective</em> statement.</p>

<p><img class="center" src="https://pbs.twimg.com/media/BOxIoM5CEAIpW0o.jpg" /></p>

<h3 id="quotes-4">Quotes</h3>

<ul>
  <li>Computer revolution changed the way we think.</li>
  <li>The way we teach students is not the same way we do it ourselves.</li>
  <li>I’ve been doing it all my life. My real goal is to transform things that are hard to understand to the things that are easy to understand. Programming was one of the tools of doing that.</li>
  <li>Students have to learn simultaneously the language and the culture, as well as the content.</li>
  <li>I like to tell students what is going on.</li>
  <li>Idioms make reading hard.</li>
  <li>Leibniz notation for the derivatives happens to be a disaster.</li>
  <li>Let’s get to the General Relativity… I’ll be mercifully short.</li>
  <li>The point is, it makes it comprehensible what was badly expressed in the traditional form.</li>
  <li>I have no problem of enslaving electronic apparatus.</li>
</ul>

<h3 id="resources-6">Resources</h3>

<ul>
  <li>Michael Spivak — Calculus. [<a href="http://ia801606.us.archive.org/22/items/Calculus_643/Spivak-Calculus.pdf">pdf</a>]</li>
  <li>Gerald Jay Sussman, Jack Wisdom — Functional Differential Geometry. [<a href="http://mitpress.mit.edu/books/functional-differential-geometry">MIT</a>]</li>
  <li>Marvin Minsky — Why programming is a good medium for expressing poorly understood and sloppily-formulated ideas. [<a href="http://web.media.mit.edu/~minsky/papers/Why%20programming%20is--.html">html</a>]</li>
</ul>

<h2 id="erlang-cocktail">Erlang cocktail</h2>

<p>with
<a href="https://twitter.com/bryan_hunter">Bryan Hunter</a>,
<a href="https://twitter.com/joeerl">Joe Armstrong</a>, and
<a href="https://twitter.com/kscaldef">Kevin Scaldeferri</a></p>

<p><img class="center" src="https://pbs.twimg.com/media/BOx-YSyCQAAA_TQ.jpg" /></p>

<p>Wonderful ending of the second day.</p>

<h2 id="dave-thomas--living-in-big-data-with-vector-functional-programming">Dave Thomas — Living in Big Data with Vector Functional Programming</h2>

<ul>
  <li>Slides: <a href="https://github.com/strangeloop/lambdajam2013/blob/master/slides/Thomas-LivingInBigDataWithVectorFunctionalProgramming.pdf">GitHub</a></li>
</ul>

<blockquote><p>This is the first time I&#8217;ve been in the audience of a talk on vector languages.</p><footer><strong>@kaleidic</strong> <cite><a href="https://twitter.com/kaleidic/statuses/354961117816176642">twitter.com/kaleidic/statuses/&hellip;</a></cite></footer></blockquote>

<ul>
  <li>Extreme cases — that’s what is interesting.</li>
  <li>I don’t do Big Data, I don’t have a petabyte in my pocket.</li>
  <li>I’m an industrial language pimp.</li>
  <li>I’ve got 3 characters on the screen and I have no idea what they’re doing.</li>
  <li>What slows languages down is scalars and non-scalars, boxing and unboxing.</li>
  <li>How to learn an array language? Slowly.</li>
</ul>

<p><img class="center" src="https://pbs.twimg.com/media/BO0b6S-CMAI2CFd.jpg" /></p>

<ul>
  <li>Pairing is a great way to learn new things.</li>
  <li>Most programs, by 2020, will be queries.</li>
  <li>There are five error messages, they are all irritating.</li>
  <li>WTF (what the function?) error message.</li>
  <li>All IDEs are bad. Intellij is the best of worst.</li>
</ul>

<h3 id="resources-7">Resources</h3>

<ul>
  <li>Emily Bache — An introduction to Array Languages. [<a href="http://coding-is-like-cooking.info/2013/09/an-introduction-to-array-languages/">blog</a>]</li>
  <li>Bryan Cantrilla — Conversation with Arthur Whitney. [<a href="http://queue.acm.org/detail.cfm?id=1531242">article</a>]</li>
</ul>

<h2 id="steve-vinoski--addressing-network-congestion-in-riak-clusters">Steve Vinoski — Addressing Network Congestion in Riak Clusters</h2>

<ul>
  <li>Slides: <a href="https://dl.dropboxusercontent.com/u/10363968/vinoski-addressing-network-congestion-in-riak.pdf">Dropbox</a></li>
  <li>
    <p>Video: <a href="http://www.youtube.com/watch?v=Y6PG6hkUHPM">YouTube</a></p>
  </li>
  <li>Riak — A distributed highly available eventually consistent highly scalable open source key-value database written primarily in Erlang, built for operational ease.</li>
  <li>Riak TCP traffic:
    <ol>
      <li>Client requests: made to any node in the ring</li>
      <li>Coordination: node receiving client request coordinates the operation across the owning replicas</li>
      <li>Gossip: Riak nodes share ring state via a gossip protocol</li>
      <li>Active Anti-Entropy: nodes actively verify and repair data consistency across the ring</li>
      <li>Erlang: distributed Erlang nodes form a full mesh and do periodic node availability checks</li>
      <li>Handoff</li>
    </ol>
  </li>
  <li>TCP incast.</li>
  <li>Low Extra Delay Background Transport (LEDBAT).</li>
  <li>Micro Transport Protocol (μTP, or uTP).</li>
</ul>

<h3 id="resources-8">Resources</h3>

<ul>
  <li>Amazon’s Dynamo Paper and <a href="http://docs.basho.com/riak/latest/theory/dynamo/">Riak</a>.</li>
  <li><a href="https://github.com/bittorrent/libutp">libutp</a> — The uTorrent Transport Protocol library.</li>
  <li><a href="https://github.com/basho-labs/gen_utp">gen_utp</a> — an API and driver for the uTP protocol.</li>
</ul>

<h2 id="mahesh-paolini-subramanya--finite-state-machines-why-the-fear">Mahesh Paolini-Subramanya — Finite State Machines. Why the fear?</h2>

<ul>
  <li>Slides: <a href="http://www.slideshare.net/dieswaytoofast/genfsm-the-erlang-behavior-that-gets-no-respect">Slideshare</a></li>
</ul>

<blockquote><p>Sitting behind @webyrd, @dfried00, Sussman, and @joeerl in @dieswaytoofast&#8217;s finite state machine talk.</p><footer><strong>@gazoombo</strong> <cite><a href="https://twitter.com/gazoombo/statuses/354991392247906305">twitter.com/gazoombo/statuses/&hellip;</a></cite></footer></blockquote>

<p><img class="center" src="https://pbs.twimg.com/media/BO0uyloCAAAS7X4.jpg" /></p>

<ul>
  <li>Write a project in C++ or Java and you’re creating work for 5 other devs. Write it in Erlang and you’re done.</li>
  <li>There is a special place in hell for the people who came up with the Oauth 2.0 spec.</li>
  <li>Everything is an FSM. Problem with actually modeling this is complexity of large FSMs. Answer is encapsulation.</li>
  <li>Design your system as a big FSM that is a collection of little FSMs. Only transition between them as needed.</li>
</ul>

<h2 id="sean-cribbs-chris-meiklejohn--functional-web-applications-with-webmachine">Sean Cribbs, Chris Meiklejohn — Functional Web Applications with Webmachine</h2>

<p>The keyword here is <em>Functional</em>.</p>

<ul>
  <li>Slides: <a href="https://github.com/strangeloop/lambdajam2013/blob/master/slides/CribbsMeiklejohn-Webmachine.pdf">GitHub</a></li>
  <li>Tutorial: <a href="https://github.com/cmeiklejohn/webmachine-tutorial">GitHub</a></li>
  <li>Webmachine <a href="https://github.com/basho/webmachine/wiki/Diagram">diagram</a></li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">git clone git@github.com:cmeiklejohn/webmachine-tutorial.git
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://blog.ndpar.com/images/posts/webmachine-diagram.png" /></p>

<pre><code>git checkout hello-world
</code></pre>

<ul>
  <li>f(ReqData,State) -&gt; {RetV,ReqData,State}.</li>
  <li><code>iolist()</code></li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>src/tweeter_resource.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="erlang"><span class="line"><span class="nf">init</span><span class="p">([])</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">[]}.</span>
</span><span class="line">
</span><span class="line"><span class="nf">to_html</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="p">{[</span><span class="s">&quot;&lt;html&gt;&lt;body&gt;&quot;</span><span class="p">,</span> <span class="nn">wrq</span><span class="p">:</span><span class="nf">get_req_header</span><span class="p">(</span><span class="s">&quot;host&quot;</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">),</span> <span class="s">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span><span class="p">],</span>
</span><span class="line">     <span class="nv">ReqData</span><span class="p">,</span>
</span><span class="line">     <span class="nv">State</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Supervisor: resources, routes, dispatch</p>

<pre><code>git checkout -f load-tweets
</code></pre>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>src/tweeter_sup.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="erlang"><span class="line"><span class="nf">init</span><span class="p">([])</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="p">...</span>
</span><span class="line">    <span class="nv">Resources</span> <span class="o">=</span> <span class="p">[</span><span class="n">tweeter_wm_tweet_resource</span><span class="p">,</span> <span class="n">tweeter_wm_asset_resource</span><span class="p">],</span>
</span><span class="line">    <span class="nv">Dispatch</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">flatten</span><span class="p">([</span><span class="nv">Module</span><span class="p">:</span><span class="nf">routes</span><span class="p">()</span> <span class="p">||</span> <span class="nv">Module</span> <span class="o">&lt;-</span> <span class="nv">Resources</span><span class="p">]),</span>
</span><span class="line">    <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>src/tweeter_wm_tweet_resource.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="erlang"><span class="line"><span class="nf">routes</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="p">[{[</span><span class="s">&quot;tweets&quot;</span><span class="p">],</span> <span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="p">[]}].</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>src/tweeter_wm_asset_resource.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="erlang"><span class="line"><span class="nf">routes</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="p">[{[</span><span class="s">&quot;&quot;</span><span class="p">],</span> <span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="p">[]},</span> <span class="p">{[</span><span class="n">&#39;*&#39;</span><span class="p">],</span> <span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="p">[]}].</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Media Types</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>src/tweeter_wm_tweet_resource.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="erlang"><span class="line"><span class="nf">content_types_provided</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="p">{[{</span><span class="s">&quot;application/json&quot;</span><span class="p">,</span> <span class="n">to_json</span><span class="p">},</span>
</span><span class="line">      <span class="p">{</span><span class="s">&quot;application/x-erlang-binary&quot;</span><span class="p">,</span> <span class="n">to_erlang</span><span class="p">}],</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">}.</span>
</span><span class="line">
</span><span class="line"><span class="nf">to_json</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="nv">Tweets</span> <span class="o">=</span> <span class="p">[</span><span class="nv">Value</span> <span class="p">||</span> <span class="p">[{_</span><span class="nv">Key</span><span class="p">,</span> <span class="nv">Value</span><span class="p">}]</span> <span class="o">&lt;-</span> <span class="nn">ets</span><span class="p">:</span><span class="nf">match</span><span class="p">(</span><span class="n">tweets</span><span class="p">,</span> <span class="n">&#39;$1&#39;</span><span class="p">)],</span>
</span><span class="line">    <span class="nv">Content</span> <span class="o">=</span> <span class="nn">mochijson2</span><span class="p">:</span><span class="nf">encode</span><span class="p">({</span><span class="n">struct</span><span class="p">,</span> <span class="p">[{</span><span class="n">tweets</span><span class="p">,</span> <span class="nv">Tweets</span><span class="p">}]}),</span>
</span><span class="line">    <span class="p">{</span><span class="nv">Content</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">}.</span>
</span><span class="line">
</span><span class="line"><span class="nf">to_erlang</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="nv">Tweets</span> <span class="o">=</span> <span class="p">[</span><span class="nv">Value</span> <span class="p">||</span> <span class="p">[{_</span><span class="nv">Key</span><span class="p">,</span> <span class="nv">Value</span><span class="p">}]</span> <span class="o">&lt;-</span> <span class="nn">ets</span><span class="p">:</span><span class="nf">match</span><span class="p">(</span><span class="n">tweets</span><span class="p">,</span> <span class="n">&#39;$1&#39;</span><span class="p">)],</span>
</span><span class="line">    <span class="nv">Content</span> <span class="o">=</span> <span class="nb">term_to_binary</span><span class="p">(</span><span class="nv">Tweets</span><span class="p">),</span>
</span><span class="line">    <span class="p">{</span><span class="nv">Content</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ curl -i -H "Accept:application/x-erlang-binary" "http://localhost:8080/tweets"
</span><span class="line">HTTP/1.1 200 OK
</span><span class="line">Vary: Accept
</span><span class="line">Server: MochiWeb/1.1 WebMachine/1.10.0 (never breaks eye contact)
</span><span class="line">Content-Type: application/x-erlang-binary
</span><span class="line">
</span><span class="line">?llhdavatarmZhttps://si0.twimg.com/profile_images/2536088319/4sl2go65was3o0km520j_reasonably_small.jpeghdmessageCaremad.jlhdavatarm\https://si0.twimg.com/profile_images/3778090444/e4fde2cad4b921cd8c07fcecc0ff2fff_bigger.jpeghdmessagemRubby is over!jlhdavatarmZhttps://si0.twimg.com/profile_images/2536088319/4sl2go65was3o0km520j_reasonably_small.jpeghdmessagemYou boys having a taste?jj</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>resource_exists</code></p>

<pre><code>git checkout -f tweet-urls
</code></pre>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>src/tweeter_wm_tweet_resource.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="erlang"><span class="line"><span class="nf">routes</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="p">[{[</span><span class="s">&quot;tweets&quot;</span><span class="p">,</span> <span class="n">tweet_id</span><span class="p">],</span> <span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="p">[]}].</span>
</span><span class="line">
</span><span class="line"><span class="nf">tweet_id</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="n">time_from_timestamp</span><span class="p">(</span><span class="nn">wrq</span><span class="p">:</span><span class="nf">path_info</span><span class="p">(</span><span class="n">tweet_id</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">)).</span>
</span><span class="line">
</span><span class="line"><span class="nf">resource_exists</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="k">case</span> <span class="n">maybe_retrieve_tweet</span><span class="p">(</span><span class="nv">Context</span><span class="p">,</span> <span class="n">tweet_id</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">))</span> <span class="k">of</span>
</span><span class="line">        <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nv">NewContext</span><span class="p">}</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">NewContext</span><span class="p">};</span>
</span><span class="line">        <span class="p">{</span><span class="n">false</span><span class="p">,</span> <span class="nv">Context</span><span class="p">}</span>   <span class="o">-&gt;</span> <span class="p">{</span><span class="n">false</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">}</span>
</span><span class="line">    <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ curl http://localhost:8080/tweets
</span><span class="line">{"tweets":[
</span><span class="line">  {"avatar":"https://si0.twimg.com/profile_images/2536088319/4sl2go65was3o0km520j_reasonably_small.jpeg","message":"Caremad.","id":"1376843311536798"},
</span><span class="line">  {"avatar":"https://si0.twimg.com/profile_images/3778090444/e4fde2cad4b921cd8c07fcecc0ff2fff_bigger.jpeg","message":"Rubby is over!","id":"1376843311536799"},
</span><span class="line">  {"avatar":"https://si0.twimg.com/profile_images/2536088319/4sl2go65was3o0km520j_reasonably_small.jpeg","message":"You boys having a taste?","id":"1376843311536800"}]}</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ curl -i http://localhost:8080/tweets/1376843311536798
</span><span class="line">HTTP/1.1 200 OK
</span><span class="line">
</span><span class="line">{"tweet":{"avatar":"https://si0.twimg.com/profile_images/2536088319/4sl2go65was3o0km520j_reasonably_small.jpeg","message":"Caremad."}}</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ curl -i http://localhost:8080/tweets/42
</span><span class="line">HTTP/1.1 404 Object Not Found
</span><span class="line">
</span><span class="line">&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;404 Not Found&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;H1&gt;Not Found&lt;/H1&gt;The requested document was not found on this server.&lt;P&gt;&lt;HR&gt;&lt;ADDRESS&gt;mochiweb+webmachine web server&lt;/ADDRESS&gt;&lt;/BODY&gt;&lt;/HTML&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>POST</code>, response header</p>

<pre><code>git checkout -f create-tweets
</code></pre>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>src/tweeter_wm_tweets_resource.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="erlang"><span class="line"><span class="nf">allowed_methods</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="p">{[</span><span class="n">&#39;HEAD&#39;</span><span class="p">,</span> <span class="n">&#39;GET&#39;</span><span class="p">,</span> <span class="n">&#39;POST&#39;</span><span class="p">],</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">}.</span>
</span><span class="line">
</span><span class="line"><span class="nf">post_is_create</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">}.</span>
</span><span class="line">
</span><span class="line"><span class="nf">create_path</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="k">case</span> <span class="n">maybe_create_tweet</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">)</span> <span class="k">of</span>
</span><span class="line">        <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nv">NewContext</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class="line">            <span class="p">{</span><span class="nv">Id</span><span class="p">,</span> <span class="p">_}</span> <span class="o">=</span> <span class="nv">NewContext</span><span class="nl">#context.tweet</span><span class="p">,</span>
</span><span class="line">            <span class="nv">Resource</span> <span class="o">=</span> <span class="s">&quot;/tweets/&quot;</span> <span class="o">++</span> <span class="nb">binary_to_list</span><span class="p">(</span><span class="n">time_to_timestamp</span><span class="p">(</span><span class="nv">Id</span><span class="p">)),</span>
</span><span class="line">            <span class="nv">NewReqData</span> <span class="o">=</span> <span class="nn">wrq</span><span class="p">:</span><span class="nf">set_resp_header</span><span class="p">(</span><span class="s">&quot;Location&quot;</span><span class="p">,</span> <span class="nv">Resource</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">),</span>
</span><span class="line">            <span class="p">{</span><span class="nv">Resource</span><span class="p">,</span> <span class="nv">NewReqData</span><span class="p">,</span> <span class="nv">NewContext</span><span class="p">};</span>
</span><span class="line">        <span class="p">{</span><span class="n">false</span><span class="p">,</span> <span class="nv">Context</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class="line">            <span class="p">{</span><span class="s">&quot;/users&quot;</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">}</span>
</span><span class="line">    <span class="k">end</span><span class="p">.</span>
</span><span class="line">
</span><span class="line"><span class="nf">content_types_accepted</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="p">{[{</span><span class="s">&quot;application/json&quot;</span><span class="p">,</span> <span class="n">from_json</span><span class="p">}],</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">}.</span>
</span><span class="line">
</span><span class="line"><span class="nf">from_json</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="k">case</span> <span class="n">maybe_create_tweet</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">)</span> <span class="k">of</span>
</span><span class="line">        <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nv">NewContext</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class="line">            <span class="p">{_,</span> <span class="nv">Tweet</span><span class="p">}</span> <span class="o">=</span> <span class="nv">NewContext</span><span class="nl">#context.tweet</span><span class="p">,</span>
</span><span class="line">            <span class="nv">Response</span> <span class="o">=</span> <span class="nn">mochijson2</span><span class="p">:</span><span class="nf">encode</span><span class="p">({</span><span class="n">struct</span><span class="p">,</span> <span class="p">[{</span><span class="n">tweet</span><span class="p">,</span> <span class="nv">Tweet</span><span class="p">}]}),</span>
</span><span class="line">            <span class="nv">NewReqData</span> <span class="o">=</span> <span class="nn">wrq</span><span class="p">:</span><span class="nf">set_resp_body</span><span class="p">(</span><span class="nv">Response</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">),</span>
</span><span class="line">            <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nv">NewReqData</span><span class="p">,</span> <span class="nv">NewContext</span><span class="p">};</span>
</span><span class="line">        <span class="p">{</span><span class="n">false</span><span class="p">,</span> <span class="nv">Context</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class="line">            <span class="p">{</span> <span class="p">{</span><span class="n">halt</span><span class="p">,</span> <span class="mi">409</span><span class="p">},</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">}</span>
</span><span class="line">    <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ curl -i -X POST -H "Content-Type:application/json" \
</span><span class="line">      http://localhost:8080/tweets --data @-
</span><span class="line">{
</span><span class="line">  "tweet":{
</span><span class="line">    "message":"testing...",
</span><span class="line">    "avatar":"https://si0.twimg.com/profile_images/3778090444/e4fde2cad4b921cd8c07fcecc0ff2fff_bigger.jpeg"
</span><span class="line">  }
</span><span class="line">}
</span><span class="line">HTTP/1.1 201 Created
</span><span class="line">Location: /tweets/1376847941255278
</span><span class="line">Content-Type: application/json
</span><span class="line">
</span><span class="line">{"tweet":{"message":"testing...","avatar":"https://si0.twimg.com/profile_images/3778090444/e4fde2cad4b921cd8c07fcecc0ff2fff_bigger.jpeg"}}</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ curl -i -X POST -H "Content-Type:application/xml" \
</span><span class="line">      http://localhost:8080/tweets --data @-
</span><span class="line">{
</span><span class="line">  "tweet":{
</span><span class="line">    "message":"testing...",
</span><span class="line">    "avatar":"https://si0.twimg.com/profile_images/3778090444/e4fde2cad4b921cd8c07fcecc0ff2fff_bigger.jpeg"
</span><span class="line">  }
</span><span class="line">}
</span><span class="line">HTTP/1.1 415 Unsupported Media Type
</span><span class="line">Location: /tweets/1376848621307991
</span><span class="line">Content-Type: text/html
</span><span class="line">
</span><span class="line">&lt;html&gt;&lt;head&gt;&lt;title&gt;415 Unsupported Media Type&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Unsupported Media Type&lt;/h1&gt;Unsupported Media Type&lt;p&gt;&lt;hr&gt;&lt;address&gt;mochiweb+webmachine web server&lt;/address&gt;&lt;/body&gt;&lt;/html&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Note: <code>create_path</code> is called before <code>content_types_accepted</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ curl -i -X POST -H "Content-Type:application/xml" \
</span><span class="line">      http://localhost:8080/tweets --data @-
</span><span class="line">&lt;tweet&gt;
</span><span class="line">  &lt;message&gt;testing...&lt;/message&gt;
</span><span class="line">  &lt;avatar&gt;https://si0.twimg.com/profile_images/3778090444/e4fde2cad4b921cd8c07fcecc0ff2fff_bigger.jpeg&lt;/avatar&gt;
</span><span class="line">&lt;/tweet&gt;
</span><span class="line">HTTP/1.1 500 Internal Server Error
</span><span class="line">Content-Type: text/html
</span><span class="line">
</span><span class="line">&lt;html&gt;&lt;head&gt;&lt;title&gt;500 Internal Server Error&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Internal Server Error&lt;/h1&gt;The server encountered an error while processing this request:&lt;br&gt;&lt;pre&gt;{"create_path not a string",
</span><span class="line"> {error,
</span><span class="line">     {...}}}&lt;/pre&gt;&lt;P&gt;&lt;HR&gt;&lt;ADDRESS&gt;mochiweb+webmachine web server&lt;/ADDRESS&gt;&lt;/body&gt;&lt;/html&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>ETags, caching, preconditions</p>

<pre><code>git checkout -f etag-tweets
</code></pre>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>src/tweeter_wm_tweets_resource.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="erlang"><span class="line"><span class="nf">generate_etag</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="p">{_,</span> <span class="nv">NewContext</span><span class="p">}</span> <span class="o">=</span>  <span class="n">maybe_retrieve_tweets</span><span class="p">(</span><span class="nv">Context</span><span class="p">),</span>
</span><span class="line">    <span class="nv">ETag</span> <span class="o">=</span> <span class="nn">mochihex</span><span class="p">:</span><span class="nf">to_hex</span><span class="p">(</span><span class="nn">erlang</span><span class="p">:</span><span class="nb">phash2</span><span class="p">(</span><span class="nv">NewContext</span><span class="nl">#context.tweets</span><span class="p">)),</span>
</span><span class="line">    <span class="p">{</span><span class="nv">ETag</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">NewContext</span><span class="p">}.</span>
</span><span class="line">
</span><span class="line"><span class="nf">last_modified</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="nv">Id</span> <span class="o">=</span> <span class="nn">ets</span><span class="p">:</span><span class="nf">last</span><span class="p">(</span><span class="n">tweets</span><span class="p">),</span>
</span><span class="line">    <span class="p">{</span><span class="nn">calendar</span><span class="p">:</span><span class="nf">now_to_datetime</span><span class="p">(</span><span class="nv">Id</span><span class="p">),</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ curl -i http://localhost:8080/tweets
</span><span class="line">HTTP/1.1 200 OK
</span><span class="line">Last-Modified: Sun, 18 Aug 2013 21:44:50 GMT
</span><span class="line">ETag: "30008d7"
</span><span class="line">
</span><span class="line">{"tweets":[
</span><span class="line">  {"avatar":"https://si0.twimg.com/profile_images/2536088319/4sl2go65was3o0km520j_reasonably_small.jpeg","message":"Caremad.","id":"1376860726482913"},
</span><span class="line">  {"avatar":"https://si0.twimg.com/profile_images/3778090444/e4fde2cad4b921cd8c07fcecc0ff2fff_bigger.jpeg","message":"Rubby is over!","id":"1376860726482914"},
</span><span class="line">  {"avatar":"https://si0.twimg.com/profile_images/2536088319/4sl2go65was3o0km520j_reasonably_small.jpeg","message":"You boys having a taste?","id":"1376860726482915"}]}</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ curl -i -H 'If-None-Match:"30008d7"' http://localhost:8080/tweets
</span><span class="line">HTTP/1.1 304 Not Modified
</span><span class="line">ETag: "30008d7"</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ curl -i -H 'If-Modified-Since:Sun, 18 Aug 2013 21:45:41 GMT' http://localhost:8080/tweets
</span><span class="line">HTTP/1.1 304 Not Modified
</span><span class="line">ETag: "30008d7"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Authorization, CSRF</p>

<pre><code>git checkout -f csrf
</code></pre>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>src/tweeter_wm_tweets_resource.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="erlang"><span class="line"><span class="nf">forbidden</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="p">{</span><span class="nn">tweeter_security</span><span class="p">:</span><span class="nf">is_protected</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">),</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Visual debugger</p>

<pre><code>git checkout -f debugger
</code></pre>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>src/tweeter_wm_asset_resource.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="erlang"><span class="line"><span class="nf">init</span><span class="p">([])</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="nn">wmtrace_resource</span><span class="p">:</span><span class="nf">add_dispatch_rule</span><span class="p">(</span><span class="s">&quot;wmtrace&quot;</span><span class="p">,</span> <span class="s">&quot;/tmp&quot;</span><span class="p">),</span>
</span><span class="line">    <span class="p">{</span> <span class="p">{</span><span class="nb">trace</span><span class="p">,</span> <span class="s">&quot;/tmp&quot;</span><span class="p">},</span> <span class="nl">#context</span><span class="p">{}}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://blog.ndpar.com/images/posts/webmachine-debugger-1.png" /></p>

<p><img class="center" src="http://blog.ndpar.com/images/posts/webmachine-debugger-2.png" /></p>

<p>ErlyDTL, Dialyzer</p>

<h3 id="resources-9">Resources</h3>

<ul>
  <li>Webmachine: <a href="https://github.com/basho/webmachine/wiki/Request-Data-API">Request Data API</a></li>
  <li>James Hague — A Ramble Through Erlang IO Lists. [<a href="http://prog21.dadgum.com/70.html">blog</a>]</li>
  <li>Andrei Neculau — <a href="https://github.com/andreineculau/http-decision-diagram">http-decision-diagram</a></li>
</ul>

<h2 id="david-nolen--keynote">David Nolen — Keynote</h2>

<h3 id="everything-i-have-learned-i-have-learned-from-someone-else">Everything I Have Learned I Have Learned From Someone Else</h3>

<ul>
  <li>Slides: <a href="https://github.com/strangeloop/lambdajam2013/blob/master/slides/Nolen-EverythingIHaveLearned.pdf">GitHub</a></li>
  <li>Video: <a href="http://www.infoq.com/presentations/learning-developer">InfoQ</a></li>
</ul>

<blockquote><p>It is practically impossible to teach good programming to students that have had a prior exposure to BASIC: as potential programmers they are mentally mutilated beyond hope of regeneration.</p><footer><strong>Edsger Dijkstra</strong></footer></blockquote>

<h3 id="quotes-5">Quotes</h3>

<ul>
  <li>We sick of the status quo, and there is a resurgence among engineers and excitement around new programming languages.</li>
  <li>In Clojure we can pattern match on persistent vectors and hashmaps.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">x</span> <span class="nv">true</span>
</span><span class="line">      <span class="nv">y</span> <span class="nv">true</span>
</span><span class="line">      <span class="nv">z</span> <span class="nv">true</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nf">match</span> <span class="p">[</span><span class="nv">x</span> <span class="nv">y</span> <span class="nv">z</span><span class="p">]</span>
</span><span class="line">    <span class="p">[</span><span class="nv">_</span> <span class="nv">false</span> <span class="nv">true</span><span class="p">]</span> <span class="mi">1</span>
</span><span class="line">    <span class="p">[</span><span class="nv">false</span> <span class="nv">true</span> <span class="nv">_</span> <span class="p">]</span> <span class="mi">2</span>
</span><span class="line">    <span class="p">[</span><span class="nv">_</span> <span class="nv">_</span> <span class="nv">false</span><span class="p">]</span> <span class="mi">3</span>
</span><span class="line">    <span class="p">[</span><span class="nv">_</span> <span class="nv">_</span> <span class="nv">true</span><span class="p">]</span> <span class="mi">4</span>
</span><span class="line">    <span class="ss">:else</span> <span class="mi">5</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nf">match</span> <span class="p">[</span><span class="nv">x</span><span class="p">]</span>
</span><span class="line">  <span class="p">[{</span><span class="ss">:a</span> <span class="nv">_</span> <span class="ss">:b</span> <span class="mi">2</span><span class="p">}]</span> <span class="mi">1</span>
</span><span class="line">  <span class="p">[{</span><span class="ss">:a</span> <span class="mi">1</span> <span class="ss">:b</span> <span class="mi">1</span><span class="p">}]</span> <span class="mi">2</span>
</span><span class="line">  <span class="p">[{</span><span class="ss">:c</span> <span class="mi">3</span> <span class="ss">:d</span> <span class="nv">_</span> <span class="ss">:e</span> <span class="mi">4</span><span class="p">}]</span> <span class="mi">3</span>
</span><span class="line">  <span class="ss">:else</span> <span class="mi">4</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>The best way to predict the future is to read papers and <em>engineer</em> it.</li>
</ul>

<h3 id="papers">Papers</h3>

<ul>
  <li>Phil Bagwell — Ideal Hash Trees [<a href="http://lampwww.epfl.ch/papers/idealhashtrees.pdf">pdf</a>]</li>
  <li>Phil Bagwell, Tiark Rompf — RRB-Trees: Efficient Immutable Vectors [<a href="http://infoscience.epfl.ch/record/169879/files/RMTrees.pdf">pdf</a>]</li>
  <li>William E. Byrd — Relational Programming in miniKanren: Techniques, Applications, and Implementations [<a href="https://scholarworks.iu.edu/dspace/bitstream/handle/2022/8777/Byrd_indiana_0093A_10344.pdf">pdf</a>]</li>
  <li>David C. Bender, Lindsey Kuper, William E. Byrd, Daniel P. Friedman — Efficient representations for triangular substitutions: A comparison in miniKanren [<a href="http://www.cs.indiana.edu/~lkuper/papers/walk.pdf">pdf</a>]</li>
  <li>William A. Kornfeld — Equality for Prolog [<a href="http://www.ijcai.org/Past%20Proceedings/IJCAI-83-VOL-1/PDF/120.pdf">pdf</a>]</li>
  <li>Philip Wadler, Stephen Blott — Ho to make <em>ad-hoc</em> polymorphism less <em>ad hoc</em> [<a href="http://homepages.inf.ed.ac.uk/wadler/papers/class/class.ps">ps</a>]</li>
  <li>James Cheney, Christian Urban — Nominal Logic Programming [<a href="http://arxiv.org/pdf/cs/0609062v2.pdf">pdf</a>]</li>
  <li>Alexey Radul, Gerald Jay Sussman — The Art of the Propagator [<a href="http://web.mit.edu/~axch/www/art.pdf">pdf</a>]</li>
  <li>Craig Chambers, Weimin Chen — Efficient Multiple and Predicate Dispatching [<a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.37.6735&amp;rep=rep1&amp;type=pdf">pdf</a>]</li>
  <li>Luc Maranget — Compiling Pattern Matching to good Decision Trees [<a href="http://www.cs.tufts.edu/~nr/cs257/archive/luc-maranget/jun08.pdf">pdf</a>]</li>
  <li>Philip Wadler — Views: A way for pattern matching to cohabit with data abstraction [<a href="http://homepages.inf.ed.ac.uk/wadler/papers/view/view.ps">ps</a>]</li>
  <li>Sam Tobin-Hochstadt — Extensible Pattern Matching in an Extensible Language [<a href="http://arxiv.org/pdf/1106.2578v1.pdf">pdf</a>]</li>
  <li>Anurag Mendhekar, Gregor Kiczales, John Lamping — Compilation Strategies as Objects [<a href="http://cl-projects.org/project.OLD/suave/darcs/_darcs/current/experimental/suavescript-old/research/kiczales-compilation-strategies-as-objects.pdf">pdf</a>]</li>
  <li>Emden R. Gansner, John H. Reppy — A Multi-threaded Higher-order User Interface Toolkit [<a href="http://www.cs.tufts.edu/~nr/cs257/archive/john-reppy/exene.ps">ps</a>]</li>
  <li>Conal Elliott, Paul Hudak — Functional Reactive Animation [<a href="http://conal.net/papers/icfp97/icfp97.pdf">pdf</a>]</li>
</ul>

<h3 id="books">Books</h3>

<ul>
  <li>Chris Okasaki — Purely Functional Data Structures [<a href="http://www.cs.cmu.edu/~rwh/theses/okasaki.pdf">pdf</a>]</li>
  <li>Daniel P. Friedman, William E. Byrd, Oleg Kiselyov — The Reasoned Schemer [<a href="http://mitpress.mit.edu/books/reasoned-schemer">MIT</a>]</li>
  <li>Peter Van Roy, Seif Haridi — Concepts, Techniques, and Models of Computer Programming [<a href="http://mitpress.mit.edu/books/concepts-techniques-and-models-computer-programming">MIT</a>]</li>
  <li>Gregor Kiczales, Jim des Rivieres, Daniel G. Bobrow — The Art of the Metaobject Protocol [<a href="http://mitpress.mit.edu/books/art-metaobject-protocol">MIT</a>]</li>
  <li>C. A. R. Hoare — Communicating Sequential Processes [<a href="http://www.usingcsp.com/cspbook.pdf">pdf</a>]</li>
</ul>

<h3 id="resources-10">Resources</h3>

<ul>
  <li>core.logic — <a href="https://github.com/clojure/core.logic">GitHub</a></li>
  <li>core.match — <a href="https://github.com/clojure/core.match">GitHub</a></li>
</ul>

<h2 id="bonus-1-joe-armstrong--ceug--26-years-with-erlang">Bonus 1: Joe Armstrong @ CEUG — 26 Years With Erlang</h2>

<p>Video: <a href="http://www.youtube.com/watch?v=HCwRGHj5jOE">YouTube</a></p>

<ul>
  <li>If you are an academic you think to develop a programming language in three or four years because that’s the time it takes to get your PhD, then you finish your PhD and the whole world will use it. It doesn’t work like that. You got to do quite few other things.</li>
  <li>That’s what we did in 1985, before the Internet: we were creating programming languages.</li>
  <li>Version 1.03 lost in the mists of time.</li>
  <li>When Prolog program goes wrong, it says <em>No</em>.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="prolog"><span class="line"><span class="s-Atom">uni</span> <span class="s-Atom">---&gt;</span>
</span><span class="line">    <span class="nf">case</span><span class="p">(</span><span class="s-Atom">wait</span><span class="p">,[</span>
</span><span class="line">        <span class="s-Atom">n</span> <span class="s-Atom">=&gt;</span> <span class="p">[</span><span class="s-Atom">term</span><span class="p">,</span><span class="s-Atom">exit</span><span class="p">],</span>
</span><span class="line">        <span class="s-Atom">h</span> <span class="s-Atom">=&gt;</span> <span class="p">[</span><span class="s-Atom">hold</span><span class="p">,</span>
</span><span class="line">              <span class="nf">case</span><span class="p">(</span><span class="s-Atom">new_call</span><span class="p">,[</span>
</span><span class="line">                  <span class="s-Atom">connected</span> <span class="s-Atom">=&gt;</span> <span class="s-Atom">multi</span><span class="p">,</span>
</span><span class="line">                  <span class="s-Atom">n</span> <span class="s-Atom">=&gt;</span> <span class="nf">case</span><span class="p">(</span><span class="s-Atom">gone_away</span><span class="p">,[</span>
</span><span class="line">                           <span class="s-Atom">yes</span> <span class="s-Atom">=&gt;</span> <span class="s-Atom">exit</span><span class="p">,</span>
</span><span class="line">                           <span class="s-Atom">no</span> <span class="s-Atom">=&gt;</span> <span class="p">[</span><span class="s-Atom">conv</span><span class="p">,</span><span class="s-Atom">uni</span><span class="p">]</span>
</span><span class="line">                       <span class="p">]),</span>
</span><span class="line">                  <span class="s-Atom">h</span> <span class="s-Atom">=&gt;</span> <span class="p">[</span><span class="s-Atom">conv</span><span class="p">,</span><span class="s-Atom">uni</span><span class="p">]</span>
</span><span class="line">              <span class="p">])</span>
</span><span class="line">             <span class="p">]</span>
</span><span class="line">    <span class="p">]).</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>This diagrams are nested state machines.</li>
  <li>You do not program the abnormal things, you do not make any decisions about how to program the stuff which is outside of the specification. What you do is you crash your program and let somebody else to resolve the problem and put back all the invariants.</li>
  <li>It took four days to re-write the whole Erlang.</li>
  <li>That’s the entire documentation of Erlang 1.05</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class=""><span class="line">h                help
</span><span class="line">reset            reset all queues
</span><span class="line">reset_erlang     kill all erlang definitions
</span><span class="line">load(F)          load erlang file &lt;F&gt;.erlang
</span><span class="line">load             load the same file as before
</span><span class="line">load(?)          what is the current load file
</span><span class="line">what_erlang      list all loaded erlang files
</span><span class="line">go               reduce the main queue to zero
</span><span class="line">send(A,B,C)      perform a send to the main queue
</span><span class="line">send(A,B)        perform a send to the main queue
</span><span class="line">cq               see queue — print main queue
</span><span class="line">wait_queue(N)    print wait_queue(N)
</span><span class="line">cf               see frozen — print all frozen states
</span><span class="line">cqns             see all equations
</span><span class="line">cqns(N)          see equation(N)
</span><span class="line">start(Mod,Goal)  starts Goal in Mod
</span><span class="line">top              top loop run system
</span><span class="line">q                quit top loop
</span><span class="line">open_dots(Node)  opens Node
</span><span class="line">talk(N)          N=1 verbose, =0 silent
</span><span class="line">peep(M)          set peeping point on M
</span><span class="line">no_peep(M)       unset peeping point on M
</span><span class="line">vsn(X)           erlang vsn number is X</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Don’t speculate about performance. Write the program, run it, and measure it.</li>
  <li>Robert collected the whole pile of papers on how abstract machines worked. I borrowed this file and took it for a weekend, and I read every single paper from beginning to end… and I understood nothing. Then Monday morning I suddenly woke up and I understood it.</li>
  <li>There is no garbage collection in atom table.</li>
  <li>The original Erlang movie was made for ISS 90. And we had script!</li>
  <li>Robert wanted to buy a train set on the money from the lab.</li>
  <li>“Amazing but true! Blindingly fast!”</li>
  <li>8 Dec 1995, AXE-N cancelled. 1996 AXD 301 started.</li>
  <li>AXD 301 could switch up to 160Gb/sec. For countries of the size of Sweeden you can only sell one. I think British Telecom bought 3 or something. It was great technical success but it didn’t earn any money.</li>
  <li>Banning things has interesting consequences. Erlang got open sourced. Four days after Erlang was banned all people who developed it left Ericsson and started their own company Bluetail.</li>
  <li>Now DNA of Erlang is spreading through various companies.</li>
</ul>

<h2 id="bonus-2-joe-armstrong--ceug--sherlocks-last-case">Bonus 2: Joe Armstrong @ CEUG — Sherlock’s Last Case</h2>

<p>Video: <a href="http://www.youtube.com/watch?v=hh4tmDB9iQI">YouTube</a></p>

<ul>
  <li>“How can you be more efficient programmer? By not programming.”</li>
  <li>When you program for 20–30 years, the “make it work” challenge is gone away. It’s more challenging to think what problem you are going to solve.</li>
  <li>The problem I’ve been thinking for the last five years is how to organize the data, how to organize ideas.</li>
  <li>Value store is a key-value store without keys. How to get the data out of this database?</li>
  <li>Sherlock’s Problem: There is $X$, and there are thousands of $Y_i$. Which $Y_i$ is the nearest to $X$?</li>
  <li>The categorization problem is extremly difficult. That’s why object-oriented programming is stupid.</li>
  <li>Concurrency oriented programming is a physical modelling.</li>
  <li>Measures of similarity. TF*IDF.</li>
  <li>Naive Bayesian</li>
</ul>

<script type="math/tex; mode=display">
P(A|B) P(B) = P(B|A) P(A)
</script>

<ul>
  <li>Normalized compression difference: If $A$ and $B$ are similar then size(compress($A$++$B$) will be wee bit larger than size(compress($A$)). It’s insensitive to choice of compression algorithm.</li>
  <li>Idea for IDE: Social programming network. It shows all the people working on the code similar to what you are typing.</li>
</ul>

<h3 id="q--a">Q &amp; A</h3>

<ul>
  <li>Macros and include files should be removed from the language.</li>
  <li>Maybe atoms should be garbage collected.</li>
  <li>The biggest problem in building technical systems is ‘connecting thing together’ problem.</li>
  <li>If I need to write a language, it wouldn’t be programming language. I would write a protocol description language.</li>
  <li>Principle of observational equivalence.</li>
  <li><a href="http://ubf.github.io/ubf/">UBF</a>.</li>
  <li>“There are languages that people bitch about, and there are languages that nobody’s using.” — Bjarne Stroustrup</li>
  <li>Scale change. Petabyte change is enormously interesting.</li>
  <li>We need to make cryptography available to all the people.</li>
  <li>Take the data out of the cloud, and put it into your home clouds.</li>
  <li>NSA will kill Google and Facebook.</li>
</ul>

<h2 id="epilogue">Epilogue</h2>

<blockquote><p>As I leave #LambdaJam I&#8217;m particularly happy at my improved sense of being able to think about OO stuff in FP terms. That may serve me well.</p><footer><strong>@kaleidic</strong> <cite><a href="https://twitter.com/kaleidic/statuses/355327906764959744">twitter.com/kaleidic/statuses/&hellip;</a></cite></footer></blockquote>

<blockquote><p>Life returning to normal. Have been suffering for PCSD (Post Conference Stress Disorder) — too many ideas in too short time + Jet Lag</p><footer><strong>@joeerl</strong> <cite><a href="https://twitter.com/joeerl/statuses/356672073675972609">twitter.com/joeerl/statuses/&hellip;</a></cite></footer></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sleeping Barber in Erlang]]></title>
    <link href="http://blog.ndpar.com/2013/06/11/sleeping-barber-in-erlang/"/>
    <updated>2013-06-11T20:43:00-04:00</updated>
    <id>http://blog.ndpar.com/2013/06/11/sleeping-barber-in-erlang</id>
    <content type="html"><![CDATA[<p>After working on <a href="http://en.wikipedia.org/wiki/Sleeping_barber_problem"><em>Sleeping Barber</em></a> problem at <a href="http://www.meetup.com/Toronto-Coding-Dojo/events/120577762/">Coding Dojo</a> I decided to implement it in Erlang. Because Erlang is the perfect language for these sorts of problems, many people have alredy solved it in many different ways. I found at least three groups of solutions: 1) direct implementation using message passing between processes, 2) OTP solution using <em>gen_server</em>, and 3) something resembling object-oriented approach.</p>

<p>Strangely enough, I didn’t see any solution based on <a href="https://en.wikipedia.org/wiki/Finite-state_machine">FSM</a>. That is odd because this is the first thing coming to my mind when I hear this problem. To fill the gap, I’m going to solve it using <em>gen_fsm</em>, which is a standard OTP behaviour for FSM.</p>

<!-- more -->

<h2 id="overview-of-genfsm">Overview of gen_fsm</h2>

<p>In essence gen_fsm behaviour is built the same way as a <a href="http://blog.ndpar.com/2009/11/12/state-machine-in-erlang/">naïve</a> implementation of FSM. It just hides the low-level code that deals with messages and provides integration with OTP framework. An implementation of gen_fsm behaviour consists of three parts</p>

<ul>
  <li>A <em>client API</em> that calls gen_fsm public interface</li>
  <li>gen_fsm <em>callbacks</em> required by OTP</li>
  <li>State <em>transition</em> functions</li>
</ul>

<p>We’ll see examples of all of them in a minute, but first</p>

<h2 id="dialogue">Dialogue</h2>

<p><em>Barber shop. The Barber is sleeping in the chair. Customer I comes in.</em></p>

<p><em>Customer I.</em> Good morning.<br />
<em>Barber.</em> Good morning. Please take a seat.</p>

<p><em>Barber starts shaving Customer I. Customer II comes in.</em></p>

<p><em>Customer II.</em> Good morning.<br />
<em>Barber.</em> I’m busy. You have to wait.<br />
<em>Customer II.</em> OK.</p>

<p><em>Customer II goes to waiting room. The same happens with Customers III and IV. Customer V comes in.</em></p>

<p><em>Customer V.</em> Good morning.<br />
<em>Barber.</em> Sorry Customer V. Not today.<br />
<em>Customer V.</em> Maybe tomorrow.</p>

<p><em>Customer V exits the shop. Meantime Barber finished Customer I’s haircut.</em></p>

<p><em>Barber.</em> Do you like your haircut?<br />
<em>Customer I.</em> Thank you.<br />
<em>Barber (looking at Customer II).</em> Next please.</p>

<p><em>The same happens with Customer II, III and IV. After that Barber takes the chair and sleeps.</em></p>

<h2 id="modules">Modules</h2>

<p>From this dialogue we can see we just need to implement two modules: <em>barber</em> and <em>customer</em>.
I’m not going to show all the functions here in this article, only those that are interesting from gen_fsm perspective.</p>

<p>Let’s start with <em>customer</em> because it’s simpler.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>customer.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
</pre></td><td class="code"><pre><code class="erlang"><span class="line"><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">customer</span><span class="p">).</span>
</span><span class="line"><span class="p">-</span><span class="ni">behaviour</span><span class="p">(</span><span class="n">gen_fsm</span><span class="p">).</span>
</span><span class="line">
</span><span class="line"><span class="c">%% API</span>
</span><span class="line"><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">sit_down</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">done</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">wait</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">sorry</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class="line">
</span><span class="line"><span class="c">%% Callback functions</span>
</span><span class="line"><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">init</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">handle_event</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span> <span class="n">handle_sync_event</span><span class="o">/</span><span class="mi">4</span><span class="p">,</span> <span class="n">handle_info</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span>
</span><span class="line">         <span class="n">terminate</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span> <span class="n">code_change</span><span class="o">/</span><span class="mi">4</span><span class="p">]).</span>
</span><span class="line">
</span><span class="line"><span class="c">%% FSM states</span>
</span><span class="line"><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">waiting</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">served</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class="line">
</span><span class="line"><span class="c">%%====================================================================</span>
</span><span class="line"><span class="c">%% API</span>
</span><span class="line"><span class="c">%%====================================================================</span>
</span><span class="line">
</span><span class="line"><span class="nf">start</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="nv">Pid</span><span class="p">}</span> <span class="o">=</span> <span class="nn">gen_fsm</span><span class="p">:</span><span class="nf">start</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="p">[],</span> <span class="p">[]),</span>
</span><span class="line">    <span class="nv">Pid</span><span class="p">.</span>
</span><span class="line">
</span><span class="line"><span class="nf">sit_down</span><span class="p">(</span><span class="nv">Customer</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="nn">gen_fsm</span><span class="p">:</span><span class="nf">send_event</span><span class="p">(</span><span class="nv">Customer</span><span class="p">,</span> <span class="n">sit_down</span><span class="p">).</span>
</span><span class="line">
</span><span class="line"><span class="nf">done</span><span class="p">(</span><span class="nv">Customer</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="nn">gen_fsm</span><span class="p">:</span><span class="nf">send_event</span><span class="p">(</span><span class="nv">Customer</span><span class="p">,</span> <span class="nb">exit</span><span class="p">).</span>
</span><span class="line">
</span><span class="line"><span class="nf">wait</span><span class="p">(</span><span class="nv">Customer</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="nn">gen_fsm</span><span class="p">:</span><span class="nf">send_event</span><span class="p">(</span><span class="nv">Customer</span><span class="p">,</span> <span class="n">wait</span><span class="p">).</span>
</span><span class="line">
</span><span class="line"><span class="nf">sorry</span><span class="p">(</span><span class="nv">Customer</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="nn">gen_fsm</span><span class="p">:</span><span class="nf">send_event</span><span class="p">(</span><span class="nv">Customer</span><span class="p">,</span> <span class="nb">exit</span><span class="p">).</span>
</span><span class="line">
</span><span class="line"><span class="c">%%====================================================================</span>
</span><span class="line"><span class="c">%% gen_fsm callbacks (empty functions are omitted)</span>
</span><span class="line"><span class="c">%%====================================================================</span>
</span><span class="line">
</span><span class="line"><span class="nf">init</span><span class="p">([])</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="n">log</span><span class="p">(</span><span class="s">&quot;Good morning.&quot;</span><span class="p">),</span>
</span><span class="line">    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="n">waiting</span><span class="p">,</span> <span class="n">unow</span><span class="p">()}.</span>
</span><span class="line">
</span><span class="line"><span class="c">%%====================================================================</span>
</span><span class="line"><span class="c">%% FSM states and transitions</span>
</span><span class="line"><span class="c">%%====================================================================</span>
</span><span class="line">
</span><span class="line"><span class="nf">waiting</span><span class="p">(</span><span class="n">sit_down</span><span class="p">,</span> <span class="nv">WaitStart</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="n">log</span><span class="p">(</span><span class="s">&quot;I&#39;ve been waiting for </span><span class="si">~p</span><span class="s"> sec.&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">duration</span><span class="p">(</span><span class="nv">WaitStart</span><span class="p">)]),</span>
</span><span class="line">    <span class="p">{</span><span class="n">next_state</span><span class="p">,</span> <span class="n">served</span><span class="p">,</span> <span class="n">unow</span><span class="p">()};</span>
</span><span class="line">
</span><span class="line"><span class="nf">waiting</span><span class="p">(</span><span class="n">wait</span><span class="p">,</span> <span class="nv">StateData</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="n">log</span><span class="p">(</span><span class="s">&quot;OK.&quot;</span><span class="p">),</span>
</span><span class="line">    <span class="p">{</span><span class="n">next_state</span><span class="p">,</span> <span class="n">waiting</span><span class="p">,</span> <span class="nv">StateData</span><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="nf">waiting</span><span class="p">(</span><span class="nb">exit</span><span class="p">,</span> <span class="p">_</span><span class="nv">StateData</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="n">log</span><span class="p">(</span><span class="s">&quot;Maybe tomorrow.&quot;</span><span class="p">),</span>
</span><span class="line">    <span class="p">{</span><span class="n">stop</span><span class="p">,</span> <span class="n">normal</span><span class="p">,</span> <span class="n">undefined</span><span class="p">}.</span>
</span><span class="line">
</span><span class="line"><span class="nf">served</span><span class="p">(</span><span class="nb">exit</span><span class="p">,</span> <span class="nv">ServiceStart</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="n">log</span><span class="p">(</span><span class="s">&quot;Thank you. The haircut took </span><span class="si">~p</span><span class="s"> sec.&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">duration</span><span class="p">(</span><span class="nv">ServiceStart</span><span class="p">)]),</span>
</span><span class="line">    <span class="p">{</span><span class="n">stop</span><span class="p">,</span> <span class="n">normal</span><span class="p">,</span> <span class="n">undefined</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>barber</em> module is little bit more complicated, because it not only calls customer’s API, it also sends events to itself.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>barber.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
</pre></td><td class="code"><pre><code class="erlang"><span class="line"><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">barber</span><span class="p">).</span>
</span><span class="line"><span class="p">-</span><span class="ni">behaviour</span><span class="p">(</span><span class="n">gen_fsm</span><span class="p">).</span>
</span><span class="line">
</span><span class="line"><span class="c">%% API</span>
</span><span class="line"><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start_link</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">new_customer</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class="line">
</span><span class="line"><span class="c">%% Callback functions</span>
</span><span class="line"><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">init</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">handle_event</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span> <span class="n">handle_sync_event</span><span class="o">/</span><span class="mi">4</span><span class="p">,</span> <span class="n">handle_info</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span>
</span><span class="line">         <span class="n">terminate</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span> <span class="n">code_change</span><span class="o">/</span><span class="mi">4</span><span class="p">]).</span>
</span><span class="line">
</span><span class="line"><span class="c">%% FSM states</span>
</span><span class="line"><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">busy</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">sleep</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class="line">
</span><span class="line"><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">SERVER</span><span class="p">,</span> <span class="o">?</span><span class="nv">MODULE</span><span class="p">).</span>
</span><span class="line"><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">HAIRCUT_TIME</span><span class="p">,</span> <span class="mi">5000</span><span class="p">).</span>
</span><span class="line"><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">ROOM_SIZE</span><span class="p">,</span> <span class="mi">3</span><span class="p">).</span>
</span><span class="line">
</span><span class="line"><span class="p">-</span><span class="ni">record</span><span class="p">(</span><span class="nl">state</span><span class="p">,</span> <span class="p">{</span><span class="n">chair</span><span class="p">,</span> <span class="n">room</span> <span class="o">=</span> <span class="p">[]}).</span>
</span><span class="line">
</span><span class="line"><span class="c">%%====================================================================</span>
</span><span class="line"><span class="c">%% API</span>
</span><span class="line"><span class="c">%%====================================================================</span>
</span><span class="line">
</span><span class="line"><span class="nf">start_link</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="nn">gen_fsm</span><span class="p">:</span><span class="nf">start_link</span><span class="p">({</span><span class="n">local</span><span class="p">,</span> <span class="o">?</span><span class="nv">SERVER</span><span class="p">},</span> <span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="p">[],</span> <span class="p">[]).</span>
</span><span class="line">
</span><span class="line"><span class="nf">new_customer</span><span class="p">(</span><span class="nv">Customer</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="nn">gen_fsm</span><span class="p">:</span><span class="nf">send_event</span><span class="p">(</span><span class="o">?</span><span class="nv">SERVER</span><span class="p">,</span> <span class="p">{</span><span class="n">new</span><span class="p">,</span> <span class="nv">Customer</span><span class="p">}).</span>
</span><span class="line">
</span><span class="line"><span class="c">%%====================================================================</span>
</span><span class="line"><span class="c">%% gen_fsm callbacks (empty functions are omitted)</span>
</span><span class="line"><span class="c">%%====================================================================</span>
</span><span class="line">
</span><span class="line"><span class="nf">init</span><span class="p">([])</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="n">log</span><span class="p">(</span><span class="s">&quot;Shop is open. zzzzZ&quot;</span><span class="p">),</span>
</span><span class="line">    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="n">sleep</span><span class="p">,</span> <span class="nl">#state</span><span class="p">{}}.</span>
</span><span class="line">
</span><span class="line"><span class="nf">handle_info</span><span class="p">(</span><span class="n">finish</span><span class="p">,</span> <span class="n">busy</span><span class="p">,</span> <span class="nl">#state</span><span class="p">{</span><span class="n">chair</span> <span class="o">=</span> <span class="nv">Customer</span><span class="p">,</span> <span class="n">room</span> <span class="o">=</span> <span class="nv">Room</span><span class="p">})</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="n">log</span><span class="p">(</span><span class="s">&quot;Do you like your haircut </span><span class="si">~p</span><span class="s">?&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">Customer</span><span class="p">]),</span>
</span><span class="line">    <span class="nn">customer</span><span class="p">:</span><span class="nf">done</span><span class="p">(</span><span class="nv">Customer</span><span class="p">),</span>
</span><span class="line">    <span class="k">case</span> <span class="nv">Room</span> <span class="k">of</span>
</span><span class="line">        <span class="p">[</span><span class="nv">C</span> <span class="p">|</span> <span class="nv">Rest</span><span class="p">]</span> <span class="o">-&gt;</span>
</span><span class="line">            <span class="n">log</span><span class="p">(</span><span class="s">&quot;Next please </span><span class="si">~p</span><span class="s">.&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">C</span><span class="p">]),</span>
</span><span class="line">            <span class="n">serving</span><span class="p">(</span><span class="nv">C</span><span class="p">),</span>
</span><span class="line">            <span class="nv">NewStateData</span> <span class="o">=</span> <span class="nl">#state</span><span class="p">{</span><span class="n">chair</span> <span class="o">=</span> <span class="nv">C</span><span class="p">,</span> <span class="n">room</span> <span class="o">=</span> <span class="nv">Rest</span><span class="p">},</span>
</span><span class="line">            <span class="p">{</span><span class="n">next_state</span><span class="p">,</span> <span class="n">busy</span><span class="p">,</span> <span class="nv">NewStateData</span><span class="p">};</span>
</span><span class="line">        <span class="p">[]</span> <span class="o">-&gt;</span>
</span><span class="line">            <span class="n">log</span><span class="p">(</span><span class="s">&quot;Time for nap. zzzzZ.&quot;</span><span class="p">),</span>
</span><span class="line">            <span class="p">{</span><span class="n">next_state</span><span class="p">,</span> <span class="n">sleep</span><span class="p">,</span> <span class="nl">#state</span><span class="p">{}}</span>
</span><span class="line">    <span class="k">end</span><span class="p">.</span>
</span><span class="line">
</span><span class="line"><span class="nf">serving</span><span class="p">(</span><span class="nv">Customer</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="nn">customer</span><span class="p">:</span><span class="nf">sit_down</span><span class="p">(</span><span class="nv">Customer</span><span class="p">),</span>
</span><span class="line">    <span class="nn">timer</span><span class="p">:</span><span class="nb">send_after</span><span class="p">(</span><span class="o">?</span><span class="nv">HAIRCUT_TIME</span><span class="p">,</span> <span class="n">finish</span><span class="p">).</span>
</span><span class="line">
</span><span class="line"><span class="c">%%====================================================================</span>
</span><span class="line"><span class="c">%% FSM states and transitions</span>
</span><span class="line"><span class="c">%%====================================================================</span>
</span><span class="line">
</span><span class="line"><span class="nf">sleep</span><span class="p">({</span><span class="n">new</span><span class="p">,</span> <span class="nv">Customer</span><span class="p">},</span> <span class="nv">StateData</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="n">log</span><span class="p">(</span><span class="s">&quot;Good morning </span><span class="si">~p</span><span class="s">. Please take a seat.&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">Customer</span><span class="p">]),</span>
</span><span class="line">    <span class="n">serving</span><span class="p">(</span><span class="nv">Customer</span><span class="p">),</span>
</span><span class="line">    <span class="nv">NewStateData</span> <span class="o">=</span> <span class="nv">StateData</span><span class="nl">#state</span><span class="p">{</span><span class="n">chair</span> <span class="o">=</span> <span class="nv">Customer</span><span class="p">},</span>
</span><span class="line">    <span class="p">{</span><span class="n">next_state</span><span class="p">,</span> <span class="n">busy</span><span class="p">,</span> <span class="nv">NewStateData</span><span class="p">}.</span>
</span><span class="line">
</span><span class="line"><span class="nf">busy</span><span class="p">({</span><span class="n">new</span><span class="p">,</span> <span class="nv">Customer</span><span class="p">},</span> <span class="nl">#state</span><span class="p">{</span><span class="n">room</span> <span class="o">=</span> <span class="nv">Room</span><span class="p">}</span> <span class="o">=</span> <span class="nv">StateData</span><span class="p">)</span>
</span><span class="line">  <span class="k">when</span> <span class="nb">length</span><span class="p">(</span><span class="nv">Room</span><span class="p">)</span> <span class="o">==</span> <span class="o">?</span><span class="nv">ROOM_SIZE</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="n">log</span><span class="p">(</span><span class="s">&quot;Sorry </span><span class="si">~p</span><span class="s">. Not today.&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">Customer</span><span class="p">]),</span>
</span><span class="line">    <span class="nn">customer</span><span class="p">:</span><span class="nf">sorry</span><span class="p">(</span><span class="nv">Customer</span><span class="p">),</span>
</span><span class="line">    <span class="p">{</span><span class="n">next_state</span><span class="p">,</span> <span class="n">busy</span><span class="p">,</span> <span class="nv">StateData</span><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="nf">busy</span><span class="p">({</span><span class="n">new</span><span class="p">,</span> <span class="nv">Customer</span><span class="p">},</span> <span class="nl">#state</span><span class="p">{</span><span class="n">room</span> <span class="o">=</span> <span class="nv">Room</span><span class="p">}</span> <span class="o">=</span> <span class="nv">StateData</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="n">log</span><span class="p">(</span><span class="s">&quot;I&#39;m busy. You have to wait.&quot;</span><span class="p">),</span>
</span><span class="line">    <span class="nn">customer</span><span class="p">:</span><span class="nf">wait</span><span class="p">(</span><span class="nv">Customer</span><span class="p">),</span>
</span><span class="line">    <span class="nv">NewStateData</span> <span class="o">=</span> <span class="nv">StateData</span><span class="nl">#state</span><span class="p">{</span><span class="n">room</span> <span class="o">=</span> <span class="nv">Room</span> <span class="o">++</span> <span class="p">[</span><span class="nv">Customer</span><span class="p">]},</span>
</span><span class="line">    <span class="p">{</span><span class="n">next_state</span><span class="p">,</span> <span class="n">busy</span><span class="p">,</span> <span class="nv">NewStateData</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To reproduce the dialogue above we evaluate the following expressions in the REPL</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="erlang"><span class="line"><span class="nn">barber</span><span class="p">:</span><span class="nf">start_link</span><span class="p">().</span>
</span><span class="line"><span class="nn">barber</span><span class="p">:</span><span class="nf">new_customer</span><span class="p">(</span><span class="nn">customer</span><span class="p">:</span><span class="nf">start</span><span class="p">()).</span>
</span><span class="line"><span class="nn">barber</span><span class="p">:</span><span class="nf">new_customer</span><span class="p">(</span><span class="nn">customer</span><span class="p">:</span><span class="nf">start</span><span class="p">()).</span>
</span><span class="line"><span class="nn">barber</span><span class="p">:</span><span class="nf">new_customer</span><span class="p">(</span><span class="nn">customer</span><span class="p">:</span><span class="nf">start</span><span class="p">()).</span>
</span><span class="line"><span class="nn">barber</span><span class="p">:</span><span class="nf">new_customer</span><span class="p">(</span><span class="nn">customer</span><span class="p">:</span><span class="nf">start</span><span class="p">()).</span>
</span><span class="line"><span class="nn">barber</span><span class="p">:</span><span class="nf">new_customer</span><span class="p">(</span><span class="nn">customer</span><span class="p">:</span><span class="nf">start</span><span class="p">()).</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="resources">Resources</h3>

<ul>
  <li><a href="https://github.com/ndpar/erlang/tree/master/barber">Source code</a> for this article.</li>
  <li><a href="http://ascii.io/a/3613">Screencast</a> reproducing the dialogue.</li>
  <li><a href="http://www.erlang.org/doc/man/gen_fsm.html">gen_fsm</a> documentation.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[To be or not to be… entrepreneur]]></title>
    <link href="http://blog.ndpar.com/2013/05/26/entrepreneur/"/>
    <updated>2013-05-26T18:00:00-04:00</updated>
    <id>http://blog.ndpar.com/2013/05/26/entrepreneur</id>
    <content type="html"><![CDATA[<p><a href="http://www.infoq.com/interviews/rod-johnson-entrepreneurialism">Rod Johnson</a>, creator of Spring, programmer that became entrepreneur:</p>

<blockquote>
  <p>One thing I think that you really need to be careful of as well, particularly if you, like me, are a programmer, is don’t get carried away writing code. Typically in my experience anyone who is a good programmer is pretty passionate about it, love writing code, get addicted to the process of writing code, fell pretty good about their code basis. As soon as you get down that path you are not thinking straight anymore and now you are increasing your emotional investment, you are having lots of fun writing interesting code and you are no longer in a place mentally where you are going to be trying to find some reason that you shouldn’t write that code. That has been a big lesson for me that the quicker I get to coding, the longer it takes me to ask the kind of questions I should ask upfront.</p>
</blockquote>

<p><a href="http://www.youtube.com/watch?v=MShbP3OpASA">Linus Torvalds</a>, creator of Linux, programmer that still programs:</p>

<blockquote>
  <p>I’m interested in programming. When business started happening, I didn’t get into this for the business side. I wanted to do programming. When other people started selling Linux, I said “Yes! Now I can avoid caring about that side too.”</p>
</blockquote>

<blockquote>
  <p>I never had to deal with single business related thing in Linux ever. Seriously, I had to deal with lot of other things but business related things… I got queries and I just said “I don’t care.”</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Joe Armstrong at MostlyErlang]]></title>
    <link href="http://blog.ndpar.com/2013/05/21/joe-armstrong-mostlyerlang/"/>
    <updated>2013-05-21T15:13:01-04:00</updated>
    <id>http://blog.ndpar.com/2013/05/21/joe-armstrong-mostlyerlang</id>
    <content type="html"><![CDATA[<p>The main guest at today’s <a href="http://mostlyerlang.wordpress.com/2013/05/21/43/">MostlyErlang</a> podcast is Joe Armstrong, the co-inventor of Erlang, a wise man, and a brilliant speaker. I listened to the podcast few times, and every time enjoyed it. I highly recommend it to all programmers regardless whether they are using Erlang or not.</p>

<p>While we are waiting for the oficial transcript, this post provides some highlights. I put here the quotes I found particularly interesting or funny.</p>

<h2 id="concurrency">Concurrency</h2>

<blockquote>
  <p>I’ve got a blog on my GitHub, and I thouhgt I’d put two different types of articles there and see what the response is. One theme I’m pursuing is “explaining to 5-year-old” theme, and the other is “technically complicated” theme.</p>
</blockquote>

<p>Then he describes the “<a href="http://joearms.github.io/2013/04/05/concurrent-and-parallel-programming.html">concurrency vs parallelism</a>” picture for 5 y.o. </p>

<blockquote>
  <p>That blog entry got 25,000 people read it, and they got 10 responses and quite a lot of criticism actually from people who know what concurrency and parallelism is. And then I compare it to some other articles I’ve written that technically deeper. There you got only few hundred people read it.</p>
</blockquote>

<p>I noticed it too. All those people, who responded with <a href="http://www.yosefk.com/blog/parallelism-and-concurrency-need-different-tools.html">long blogs</a> about concurrency, missed the point: This picture was for kids, and for kids it’s a pretty good picture. Adults should go and read the technical papers, but they didn’t.</p>

<!-- more -->

<h2 id="let-it-crash">Let it crash</h2>

<blockquote>
  <p>Once upon a time we had a Leadership Election algorithm in Erlang. We got some theoreticians involved, and they proved the algorithm to be correct. It’s been in practice for some time when we sent them a bug report, which showed that the thing elected two leaders, and we can reproduce it. And then they looked at this bug and went back at the code, and said the code is correct, but we had to make certain assumptions that this failure couldn’t happen.</p>
</blockquote>

<p>I like it. We should always keep it in mind: Before you prove anything, make sure, your assumptions are valid.</p>

<h2 id="favourite-bad-idea">Favourite bad idea</h2>

<blockquote>
  <p>The first bad idea we put in Erlang is the process priorities. I don’t think it’s documented anywhere. It’s definitely not in my book. It’s not supposed to be documented — that’s deliberate.</p>
</blockquote>

<p><a href="http://www.erlangprogramming.org/">Erlang Programming</a> mentions the process priorities on page 113, but they wrote the whole paragraph explaining why it’s a bad idea.</p>

<blockquote>
  <p>I was forced into position where I had to put them in [the language]. So I waited a few weeks and I put in an Erlang code that sets process priorities some integer, and this code didn’t do anything at all. It was commented out. I shipped the system, and then I asked “How do you like it with priorities?” And they said “Now it’s much better!”</p>
</blockquote>

<p>Brilliant! Although, it pisses them off when people eventually find what’s going on in the code.</p>

<h2 id="performance">Performance</h2>

<blockquote>
  <p>One thing I like about Erlang is it’s got pretty predictible performance model.</p>
</blockquote>

<blockquote>
  <p>There was some guy on the mailing list that said “I wrote a code that finds line breaks in the large file, and the result surprised me. I expected it to take this long, and it took a heck of a lot longer.” I wrote a little benchmark and I couldn’t see that effect. I mailed back “mine didn’t behave like that.” Then he said “There is another funny thing: the distribution of my file is not uniformed. I’ve got extremly long lines in it, and the rest are the same.” And from then it took Patrik five minutes to find a bug in the system. But if he hadn’t made an observation “this thing surprises me” and didn’t give this clue that it happened under these circumstances, that bug could be in the system for years. But people find performance thing and they don’t tell us the fact they are surprised, so we can’t debug it.</p>
</blockquote>

<p>Lesson learned: If you <a href="http://code.mixpanel.com/2011/08/05/how-and-why-we-switched-from-erlang-to-python/">don’t like</a> the performance of your Erlang code, don’t be shy to speak up about it. Either you are doing something wrong or there is a bug in Erlang. Both things are fixable.</p>

<h2 id="scalability">Scalability</h2>

<blockquote>
  <p><a href="http://www.ericsson.com/ourportfolio/products/sgsn-mme">MME</a> is a thing in the backbone of mobile telephony network, it makes all mobile data work. And it’s written in Erlang. Smartphones wouldn’t be able to connect to the network at all without MME. Now, Ericsson’s got the biggest market share in the world for mobile base stations, for we do 40% of the total world market of 3G and CDMA and 60% of the world market for LTE and 4G. This gives us about 50% of the world market. That means Erlang’s controlling 50% of all smartphones world wide.</p>
</blockquote>

<p>That’s impressive, and at the same time it’s sad because people don’t know about it. People are talking about Twitter scale, Google scale, or other sorts of “web-scale”, but they don’t realize that most of the data Twitter and Google receive nowadays is comming through mobile network, which means most of Twitter and Google data is coming throug Erlang. Think about it.</p>

<p>On the other hand, those who see the power of Erlang get big competitive advantage.</p>

<blockquote>
  <p>At Erlang user conference somebody from gaming company came to me and said “Erlang’s great! We have it on our server, and we managed to get 3 million connections on it!” And he was overjoyed. It’s fantastic. I said “Great! You got to tell everybody…” And he said “No, no.” — “Why not?” — “Because we tell our competitiors we use Jigsaw.”</p>
</blockquote>

<blockquote>
  <p>There is no commercial advantage from using Ruby on Rails or Java or anything else. You might go to the conferences and swap battle stories and swap tips. But if you actually found something which is bloody better, you are not going to tell anybody, are you?</p>
</blockquote>

<p>Hm, maybe that’s why I cannot find any software company in Toronto that’s doing Erlang. Hey Toronto programmers, if you are programming in Erlang, please let me know — I won’t tell your competitors, I promise.</p>

<h2 id="broken-software">Broken software</h2>

<blockquote>
  <p>Most of my time as a programmer is spent fixing broken stuff that shouldn’t be broken. Whenever I’m trying to do something, it doesn’t work. I used to spend more than 50% of my time fixing trivial things, and the percentage of my time is increasing by year. If I look back 20 years ago, I din’t spend 50% of my time fixing broken software. The software that was available was a lot lot simpler, and it was written by engineers and teams and by small group of people, and it didn’t have errors in it. If we extrapolate this in 20 years time, it’s going to be even more software, and 90% of it will be completely broken, unless we find better ways of structuring it and gluing things together.</p>
</blockquote>

<p>So true. I have the same statistics. One third of my time I’m shaving software yaks, and another third I’m debugging protocols trying to figure out why my code is not working with another code.</p>

<h2 id="conference-driven-development">Conference driven development</h2>

<blockquote>
  <p>I’m giving a keynote at LambdaJam. I’ve written a <a href="http://lambdajam.com/sessions#armstrong">flushing title</a> but I haven’t written the talk yet.</p>
</blockquote>

<p>Lesson learned: Next time you want to give a talk at a conference, come up with a catchy title, and think about the talk itself later.</p>

<blockquote>
  <p>I deliberately give myself titles for stuff I know nothing about, and I implement it all. You know, Robert did that for Lua. You know why Lua got developed in Erlang? Robert was going to give a talk on writing DSL in Erlang. I remember him talking to me “I’m giving a talk on implementing DSL in Erlang.” I said “Oh, yeah.” And he said “I don’t know anything about it. I better implement Lua.”</p>
</blockquote>

<p>It’s a really good idea to submit a conference proposal for the stuff you want to learn. When the proposal is accepted, you don’t have a choice but go and study the thing. Otherwise you would procrastinate forever. I notice actually many people do that. Maybe I’ll do the same with Erlang, at some point.</p>

<h3 id="additional-resources">Additional Resources</h3>

<ul>
  <li>Joe Armstrong’s <a href="https://groups.google.com/forum/#!msg/erlang-programming/OiyGQ4UHqxw/HgGma01CGqYJ">reply</a> about efficiency of Erlang.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stuck with your first programming language]]></title>
    <link href="http://blog.ndpar.com/2013/05/09/liskov-programming-abstraction/"/>
    <updated>2013-05-09T19:39:00-04:00</updated>
    <id>http://blog.ndpar.com/2013/05/09/liskov-programming-abstraction</id>
    <content type="html"><![CDATA[<p><a href="http://en.wikipedia.org/wiki/Barbara_Liskov">Barbara Liskov</a> in her <a href="http://www.infoq.com/presentations/programming-abstraction-liskov">keynote</a> presentation:</p>

<blockquote>
  <p>I’m a little dismayed what’s happened in programming languages. And the reason I’m dismayed is because on the one hand we have the programming languages that experts use — I’m thinking of Java and C# but you can name bunch of others. And the problem with these languages is — they are powerful, you can build big systems in them — but they aren’t very good for beginners. And what happens in MIT, and I think this is happening across the US anyway, is the people are no longer using those languages in their introductory programming language courses, because the amount of craft you have to go through in order to write the little print-loop is just too much, and the students just get lost in the process. So they’ve been switching to languages like Python.</p>
</blockquote>

<blockquote>
  <p>Python is very simple and nice when you start to use it. But you don’t get too far down the road, if you me, before you discover it has no data abstraction at all. That’s not good because big programs require modularity and encapsulation, and you’d like the language that supports that. So my question is: Can we find a language that will work for both communities? And the reason it matters is because a lot of kids start off programming in their first programming language and that’s it. They may have to change eventually, but they are building huge systems in languages that are really ill-suited for this. So it would be good if the language they started off with is the one they can grow with, and would be good for building big programs as well as small ones.</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Zookeeper cluster]]></title>
    <link href="http://blog.ndpar.com/2013/03/09/simple-zookeeper-cluster/"/>
    <updated>2013-03-09T07:00:00-05:00</updated>
    <id>http://blog.ndpar.com/2013/03/09/simple-zookeeper-cluster</id>
    <content type="html"><![CDATA[<p>Sometimes I need to run <a href="http://zookeeper.apache.org">ZooKeeper</a> ensemble on my development box to test my application on the production-like environment. I found that recreating the whole ensemble from scratch is much faster than cleaning it up using ZooKeeper CLI tool. To automate this process I created a bash script which I want to share in this blog post. I hard-coded all the paths in the script using my regular conventions. You might need to change them to yours — it should be fairly straightforward.</p>

<p>Before you can use the script, you need to install ZooKeeper on your box. That’s what I did on my machine</p>

<pre><code>$ cd /opt
$ sudo mkdir zookeeper
$ sudo chown -R andrey:admin zookeeper
$ cd zookeeper
$ wget http://apache.mirror.rafal.ca/zookeeper/zookeeper-3.4.5/zookeeper-3.4.5.tar.gz
$ tar xf zookeeper-3.4.5.tar.gz
$ rm zookeeper-3.4.5.tar.gz
$ ln -s zookeeper-3.4.5 zookeeper
</code></pre>

<p>In the end you should have a ZooKeeper installed in <em>/opt/zookeeper/zookeeper</em> directory.</p>

<p>Now download, chmod, and run the <a href="https://gist.github.com/ndpar/5105486">script</a>. It will create the following files</p>

<pre><code>/opt/zookeeper/zookeeper/cluster
├── server1
│   ├── conf
│   │   ├── log4j.properties
│   │   └── zoo.cfg
│   ├── data
│   │   └── myid
│   └── logs
├── server2
│   ├── conf
│   │   ├── log4j.properties
│   │   └── zoo.cfg
│   ├── data
│   │   └── myid
│   └── logs
├── server3
│   ├── conf
│   │   ├── log4j.properties
│   │   └── zoo.cfg
│   ├── data
│   │   └── myid
│   └── logs
├── start.sh
└── stop.sh
</code></pre>

<p>This is the minimum configuration for 3-node ensemble (cluster), which is recommended for production. To start the cluster, run the following command</p>

<pre><code>$ cd /opt/zookeeper/zookeeper
$ cluster/start.sh
</code></pre>

<p>Check the log files to see if the cluster is successfully started</p>

<pre><code>$ tail -f cluster/server{1,2,3}/logs/zookeeper.out
</code></pre>

<p>When the cluster is up and running, you can test your application. After you are done, shutdown the cluster using the following command</p>

<pre><code>$ cluster/stop.sh
$ ps -ef | grep java
</code></pre>

<p>To recreate a clean cluster, just run the script again</p>

<pre><code>$ ./zookeeper-init-ensemble.sh
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Embrace Big Data]]></title>
    <link href="http://blog.ndpar.com/2013/01/15/embrace-big-data/"/>
    <updated>2013-01-15T07:00:00-05:00</updated>
    <id>http://blog.ndpar.com/2013/01/15/embrace-big-data</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://blog.ndpar.com/images/posts/BigData.jpg" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RabbitMQ, ActiveMQ, ZeroMQ, HornetQ]]></title>
    <link href="http://blog.ndpar.com/2012/12/15/rabbitmq-activemq-zeromq-hornetq/"/>
    <updated>2012-12-15T07:00:00-05:00</updated>
    <id>http://blog.ndpar.com/2012/12/15/rabbitmq-activemq-zeromq-hornetq</id>
    <content type="html"><![CDATA[<p><em>Warning</em>: In this post I’m going to compare <a href="http://www.rabbitmq.com/">RabbitMQ</a>, <a href="http://www.zeromq.org/">ZeroMQ</a>, <a href="http://activemq.apache.org/">ActiveMQ</a>, and <a href="http://www.jboss.org/hornetq">HornetQ</a>. The basis of the comparison is not the performance, or the scalability, or any other serious feature. The comparison is done <em>purely</em> based on the popularity of those systems. Therefore, if you came here to see some performance metrics, you will be disappointed — there is none in this post.</p>

<p><em>Note</em>: To calculate popularity, I’m going to use MongoDB and Python, so if you don’t care about message brokers, but you want to see some examples of MongoDB scripts, this post might be interesting to you.</p>

<!-- more -->

<h2 id="popularity">Popularity</h2>

<p>What is the best messaging system out there? If you read my blog regularly, you probably know my biased answer. But to give an objective answer, we have to compare the candidates based on some criteria. There are many possible criteria, some of which are more relevant to your project than the others. One of them is how popular the candidate solutions are. In other words, if you choose a message broker and then you encounter a problem, how easy would it be to solve it? Is there anybody who can help you? One way to find it out is to check how many people are interested in the same solution. And the obvious way to do it is to ask Google.</p>

<p>Here is the Google trend graph for the last five years. It turns out, my personal preferences coincide with the public interest.</p>

<div class="separator" style="clear: both; text-align: center;"><script type="text/javascript" src="http://blog.ndpar.com//www.google.ca/trends/embed.js?hl=en-US&amp;q=activemq,+rabbitmq,+zeromq,+hornetq&amp;date=1/2008+60m&amp;cmpt=q&amp;content=1&amp;cid=TIMESERIES_GRAPH_AVERAGES_CHART&amp;export=5&amp;w=800&amp;h=330"></script></div>

<p>At this point I can stop and say “Well, you see who’s the winner”. There are 5 times more people interested in RabbitMQ than HornetQ, so if you bet on Rabbit you have more chances to get the help from your fellow programmers, if you need to.</p>

<p>But before we make the final decision, I want to hear another opinion about the popularity of our candidates. Where do people go nowadays when they have software related problems? Right, they go to…</p>

<h2 id="stackoverflow">StackOverflow</h2>

<p>The best thing about StackOverflow is their <a href="http://api.stackoverflow.com/1.0/usage">REST API</a>. For our purposes we need two API queries: get all <a href="http://api.stackoverflow.com/1.1/usage/methods/search">questions by a tag</a>, and get all <a href="http://api.stackoverflow.com/1.1/usage/methods/question-answers">answers</a> for the question. In fact, the second one is optional. Even the first query alone can give us most of what we want to know:</p>

<ul>
  <li>how many questions have been posted for every candidate on our list?</li>
  <li>how many answers did those questions receive?</li>
  <li>how many answers were accepted?</li>
  <li>how many questions and answers were marked useful?</li>
</ul>

<p>When we get all the numbers, we should know what people are actually using. We can also check if there is any correlation between Google data and StackOverflow.</p>

<p>So how do we proceed? We cannot use API directly to run analytics, because we would quickly exhaust the daily quota. What we can do is to fetch the data, save it locally, and run analytics against the local data. Here is another good thing about StackOverflow API: it comes in JSON format. What is the best way to analyze JSON data? Obviously, saving it in a JSON-oriented database that supports aggregated queries. And that’s where MongoDB comes into play.</p>

<p><a href="https://gist.github.com/4276136#file-questions-py">Here</a> is the Python script that downloads all the questions for the specified tags from StackOverflow, and saves the results in the local MongoDB instance. I chose Python because I want to draw some graphs later, which is easy to do in Python. Plus, it’s a simple and expressive language.</p>

<p>After we run this script, we get all the questions we need in our database. The next step is to get all the answers for those questions. <a href="https://gist.github.com/4276136#file-answers-py">Here</a> is the script that does exactly that.</p>

<p>Depends on how many questions we have saved on the first step, there might be quite a lot of queries to run to get all the answers. With my second script I exceeded the daily quota, so I had to wait for the next day to get the rest of the answers.</p>

<p>Now, when we have all the data, let’s take a look how we can use it. Here is a typical StackOverflow record. I highlighted the fields that might be useful for our analysis.</p>

<pre>{
     "_id" : 269363,
     <font color="#0000FF">"accepted_answer_id"</font> : 290764,
     <font color="#0000FF">"answer_count" : 4</font>,
     "answers" : [
          ...
          {
               "view_count" : 0,
               "answer_comments_url" : "/answers/303710/comments",
               "answer_id" : 303710,
               "title" : "ActiveMQ .net client locks up",
               "community_owned" : false,
               "down_vote_count" : 0,
               "last_activity_date" : 1317300099,
               "creation_date" : 1227135282,
               "score" : 1,
               <font color="#0000FF">"up_vote_count" : 1</font>,
               "owner" : {
                    "display_name" : "HitLikeAHammer",
                    <font color="#0000FF">"reputation" : 1152</font>,
                    "user_id" : 35165,
                    "user_type" : "registered",
                    "email_hash" : "584cd9905db85f744e7e96740b11b7c0"
               },
               "accepted" : false,
               "last_edit_date" : 1317300099,
               "question_id" : 269363
          },
          ...
     ],
     "community_owned" : false,
     "creation_date" : 1225989513,
     "down_vote_count" : 0,
     "favorite_count" : 1,
     "last_activity_date" : 1317300112,
     "owner" : {
          "display_name" : "HitLikeAHammer",
          "reputation" : 1152,
          "user_id" : 35165,
          "user_type" : "registered",
          "email_hash" : "584cd9905db85f744e7e96740b11b7c0"
     },
     "question_answers_url" : "/questions/269363/answers",
     "question_comments_url" : "/questions/269363/comments",
     "question_id" : 269363,
     "question_timeline_url" : "/questions/269363/timeline",
     "score" : 1,
     <font color="#0000FF">"tags" : [
          ".net",
          "activemq"
     ]</font>,
     "title" : "ActiveMQ .net client locks up",
     <font color="#0000FF">"up_vote_count" : 1</font>,
     "view_count" : 1183
}</pre>

<p>First of all, we want to know how many questions are posted for each messaging system from our list. Here is the MongoDB query for that. The first snippet is a query, the second is the result.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Number of questions </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">db</span><span class="p">.</span><span class="nx">stackoverflow</span><span class="p">.</span><span class="nx">aggregate</span><span class="p">([</span>
</span><span class="line">     <span class="p">{</span><span class="nx">$unwind</span><span class="o">:</span><span class="s1">&#39;$tags&#39;</span><span class="p">},</span>
</span><span class="line">     <span class="p">{</span><span class="nx">$group</span><span class="o">:</span><span class="p">{</span><span class="nx">_id</span><span class="o">:</span><span class="s1">&#39;$tags&#39;</span><span class="p">,</span> <span class="nx">questions</span><span class="o">:</span><span class="p">{</span><span class="nx">$sum</span><span class="o">:</span><span class="mi">1</span><span class="p">}}},</span>
</span><span class="line">     <span class="p">{</span><span class="nx">$match</span><span class="o">:</span><span class="p">{</span><span class="nx">_id</span><span class="o">:</span><span class="p">{</span><span class="nx">$in</span><span class="o">:</span><span class="p">[</span><span class="s1">&#39;activemq&#39;</span><span class="p">,</span> <span class="s1">&#39;rabbitmq&#39;</span><span class="p">,</span> <span class="s1">&#39;zeromq&#39;</span><span class="p">,</span> <span class="s1">&#39;hornetq&#39;</span><span class="p">]}}},</span>
</span><span class="line">     <span class="p">{</span><span class="nx">$sort</span><span class="o">:</span><span class="p">{</span><span class="nx">questions</span><span class="o">:-</span><span class="mi">1</span><span class="p">}}</span>
</span><span class="line"><span class="p">])[</span><span class="s1">&#39;result&#39;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">[</span>
</span><span class="line">     <span class="p">{</span>
</span><span class="line">          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;activemq&quot;</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;questions&quot;</span> <span class="o">:</span> <span class="mi">1039</span>
</span><span class="line">     <span class="p">},</span>
</span><span class="line">     <span class="p">{</span>
</span><span class="line">          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;rabbitmq&quot;</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;questions&quot;</span> <span class="o">:</span> <span class="mi">988</span>
</span><span class="line">     <span class="p">},</span>
</span><span class="line">     <span class="p">{</span>
</span><span class="line">          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;zeromq&quot;</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;questions&quot;</span> <span class="o">:</span> <span class="mi">373</span>
</span><span class="line">     <span class="p">},</span>
</span><span class="line">     <span class="p">{</span>
</span><span class="line">          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;hornetq&quot;</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;questions&quot;</span> <span class="o">:</span> <span class="mi">185</span>
</span><span class="line">     <span class="p">}</span>
</span><span class="line"><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The next query is to get the total number of answers by tag</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Number of answers </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">db</span><span class="p">.</span><span class="nx">stackoverflow</span><span class="p">.</span><span class="nx">aggregate</span><span class="p">([</span>
</span><span class="line">     <span class="p">{</span><span class="nx">$unwind</span><span class="o">:</span><span class="s1">&#39;$tags&#39;</span><span class="p">},</span>
</span><span class="line">     <span class="p">{</span><span class="nx">$group</span><span class="o">:</span><span class="p">{</span><span class="nx">_id</span><span class="o">:</span><span class="s1">&#39;$tags&#39;</span><span class="p">,</span> <span class="nx">answers</span><span class="o">:</span><span class="p">{</span><span class="nx">$sum</span><span class="o">:</span><span class="s1">&#39;$answer_count&#39;</span><span class="p">}}},</span>
</span><span class="line">     <span class="p">{</span><span class="nx">$match</span><span class="o">:</span><span class="p">{</span><span class="nx">_id</span><span class="o">:</span><span class="p">{</span><span class="nx">$in</span><span class="o">:</span><span class="p">[</span><span class="s1">&#39;activemq&#39;</span><span class="p">,</span> <span class="s1">&#39;rabbitmq&#39;</span><span class="p">,</span> <span class="s1">&#39;zeromq&#39;</span><span class="p">,</span> <span class="s1">&#39;hornetq&#39;</span><span class="p">]}}},</span>
</span><span class="line">     <span class="p">{</span><span class="nx">$sort</span><span class="o">:</span><span class="p">{</span><span class="nx">answers</span><span class="o">:-</span><span class="mi">1</span><span class="p">}}</span>
</span><span class="line"><span class="p">])[</span><span class="s1">&#39;result&#39;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">[</span>
</span><span class="line">     <span class="p">{</span>
</span><span class="line">          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;activemq&quot;</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;answers&quot;</span> <span class="o">:</span> <span class="mi">1382</span>
</span><span class="line">     <span class="p">},</span>
</span><span class="line">     <span class="p">{</span>
</span><span class="line">          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;rabbitmq&quot;</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;answers&quot;</span> <span class="o">:</span> <span class="mi">1322</span>
</span><span class="line">     <span class="p">},</span>
</span><span class="line">     <span class="p">{</span>
</span><span class="line">          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;zeromq&quot;</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;answers&quot;</span> <span class="o">:</span> <span class="mi">572</span>
</span><span class="line">     <span class="p">},</span>
</span><span class="line">     <span class="p">{</span>
</span><span class="line">          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;hornetq&quot;</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;answers&quot;</span> <span class="o">:</span> <span class="mi">227</span>
</span><span class="line">     <span class="p">}</span>
</span><span class="line"><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It seems that the number of answers is proportional to the number of questions. With MongoDB we can quickly verify it.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Answers to questions ratio </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">db</span><span class="p">.</span><span class="nx">stackoverflow</span><span class="p">.</span><span class="nx">aggregate</span><span class="p">([</span>
</span><span class="line">     <span class="p">{</span><span class="nx">$unwind</span><span class="o">:</span><span class="s1">&#39;$tags&#39;</span><span class="p">},</span>
</span><span class="line">     <span class="p">{</span><span class="nx">$group</span><span class="o">:</span><span class="p">{</span><span class="nx">_id</span><span class="o">:</span><span class="s1">&#39;$tags&#39;</span><span class="p">,</span> <span class="nx">answers</span><span class="o">:</span><span class="p">{</span><span class="nx">$sum</span><span class="o">:</span><span class="s1">&#39;$answer_count&#39;</span><span class="p">},</span> <span class="nx">questions</span><span class="o">:</span><span class="p">{</span><span class="nx">$sum</span><span class="o">:</span><span class="mi">1</span><span class="p">}}},</span>
</span><span class="line">     <span class="p">{</span><span class="nx">$match</span><span class="o">:</span><span class="p">{</span><span class="nx">_id</span><span class="o">:</span><span class="p">{</span><span class="nx">$in</span><span class="o">:</span><span class="p">[</span><span class="s1">&#39;activemq&#39;</span><span class="p">,</span> <span class="s1">&#39;rabbitmq&#39;</span><span class="p">,</span> <span class="s1">&#39;zeromq&#39;</span><span class="p">,</span> <span class="s1">&#39;hornetq&#39;</span><span class="p">]}}},</span>
</span><span class="line">     <span class="p">{</span><span class="nx">$project</span><span class="o">:</span><span class="p">{</span><span class="nx">answers</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span> <span class="nx">questions</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span> <span class="nx">ratio</span><span class="o">:</span><span class="p">{</span><span class="nx">$divide</span><span class="o">:</span><span class="p">[</span><span class="s1">&#39;$answers&#39;</span><span class="p">,</span> <span class="s1">&#39;$questions&#39;</span><span class="p">]}}},</span>
</span><span class="line">     <span class="p">{</span><span class="nx">$sort</span><span class="o">:</span><span class="p">{</span><span class="nx">ratio</span><span class="o">:-</span><span class="mi">1</span><span class="p">}}</span>
</span><span class="line"><span class="p">])[</span><span class="s1">&#39;result&#39;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">[</span>
</span><span class="line">     <span class="p">{</span>
</span><span class="line">          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;zeromq&quot;</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;answers&quot;</span> <span class="o">:</span> <span class="mi">572</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;questions&quot;</span> <span class="o">:</span> <span class="mi">373</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;ratio&quot;</span> <span class="o">:</span> <span class="mf">1.5335120643431635</span>
</span><span class="line">     <span class="p">},</span>
</span><span class="line">     <span class="p">{</span>
</span><span class="line">          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;rabbitmq&quot;</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;answers&quot;</span> <span class="o">:</span> <span class="mi">1322</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;questions&quot;</span> <span class="o">:</span> <span class="mi">988</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;ratio&quot;</span> <span class="o">:</span> <span class="mf">1.3380566801619433</span>
</span><span class="line">     <span class="p">},</span>
</span><span class="line">     <span class="p">{</span>
</span><span class="line">          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;activemq&quot;</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;answers&quot;</span> <span class="o">:</span> <span class="mi">1382</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;questions&quot;</span> <span class="o">:</span> <span class="mi">1039</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;ratio&quot;</span> <span class="o">:</span> <span class="mf">1.3301251203079885</span>
</span><span class="line">     <span class="p">},</span>
</span><span class="line">     <span class="p">{</span>
</span><span class="line">          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;hornetq&quot;</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;answers&quot;</span> <span class="o">:</span> <span class="mi">227</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;questions&quot;</span> <span class="o">:</span> <span class="mi">185</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;ratio&quot;</span> <span class="o">:</span> <span class="mf">1.227027027027027</span>
</span><span class="line">     <span class="p">}</span>
</span><span class="line"><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Indeed, the answers/question ratio is almost the same for every tag. That means we can use just the number of questions for our analysis.</p>

<p>Here is the query that calculates the number of <em>accepted</em> answers by tag. Again, it correlates fairly well with the total number of answers and questions.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Number of accepted answers </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">db</span><span class="p">.</span><span class="nx">stackoverflow</span><span class="p">.</span><span class="nx">aggregate</span><span class="p">([</span>
</span><span class="line">     <span class="p">{</span><span class="nx">$match</span><span class="o">:</span><span class="p">{</span><span class="nx">accepted_answer_id</span><span class="o">:</span><span class="p">{</span><span class="nx">$ne</span><span class="o">:</span><span class="kc">null</span><span class="p">}}},</span>
</span><span class="line">     <span class="p">{</span><span class="nx">$unwind</span><span class="o">:</span><span class="s1">&#39;$tags&#39;</span><span class="p">},</span>
</span><span class="line">     <span class="p">{</span><span class="nx">$group</span><span class="o">:</span><span class="p">{</span><span class="nx">_id</span><span class="o">:</span><span class="s1">&#39;$tags&#39;</span><span class="p">,</span> <span class="nx">accepted_answers</span><span class="o">:</span><span class="p">{</span><span class="nx">$sum</span><span class="o">:</span><span class="mi">1</span><span class="p">}}},</span>
</span><span class="line">     <span class="p">{</span><span class="nx">$match</span><span class="o">:</span><span class="p">{</span><span class="nx">_id</span><span class="o">:</span><span class="p">{</span><span class="nx">$in</span><span class="o">:</span><span class="p">[</span><span class="s1">&#39;activemq&#39;</span><span class="p">,</span> <span class="s1">&#39;rabbitmq&#39;</span><span class="p">,</span> <span class="s1">&#39;zeromq&#39;</span><span class="p">,</span> <span class="s1">&#39;hornetq&#39;</span><span class="p">]}}},</span>
</span><span class="line">     <span class="p">{</span><span class="nx">$sort</span><span class="o">:</span><span class="p">{</span><span class="nx">accepted_answers</span><span class="o">:-</span><span class="mi">1</span><span class="p">}}</span>
</span><span class="line"><span class="p">])[</span><span class="s1">&#39;result&#39;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">[</span>
</span><span class="line">     <span class="p">{</span>
</span><span class="line">          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;activemq&quot;</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;accepted_answers&quot;</span> <span class="o">:</span> <span class="mi">531</span>
</span><span class="line">     <span class="p">},</span>
</span><span class="line">     <span class="p">{</span>
</span><span class="line">          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;rabbitmq&quot;</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;accepted_answers&quot;</span> <span class="o">:</span> <span class="mi">500</span>
</span><span class="line">     <span class="p">},</span>
</span><span class="line">     <span class="p">{</span>
</span><span class="line">          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;zeromq&quot;</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;accepted_answers&quot;</span> <span class="o">:</span> <span class="mi">221</span>
</span><span class="line">     <span class="p">},</span>
</span><span class="line">     <span class="p">{</span>
</span><span class="line">          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;hornetq&quot;</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;accepted_answers&quot;</span> <span class="o">:</span> <span class="mi">94</span>
</span><span class="line">     <span class="p">}</span>
</span><span class="line"><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The next query is more interesting. It calculates the number of question up-votes by tag. In other words, it shows the number of <em>useful</em> questions. If we divide it by the total number of questions, we should see which messaging system has bigger rate of useful questions than others</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Number of useful questions </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">db</span><span class="p">.</span><span class="nx">stackoverflow</span><span class="p">.</span><span class="nx">aggregate</span><span class="p">([</span>
</span><span class="line">     <span class="p">{</span><span class="nx">$unwind</span><span class="o">:</span><span class="s1">&#39;$tags&#39;</span><span class="p">},</span>
</span><span class="line">     <span class="p">{</span><span class="nx">$group</span><span class="o">:</span><span class="p">{</span><span class="nx">_id</span><span class="o">:</span><span class="s1">&#39;$tags&#39;</span><span class="p">,</span> <span class="nx">upvotes</span><span class="o">:</span><span class="p">{</span><span class="nx">$sum</span><span class="o">:</span><span class="s1">&#39;$up_vote_count&#39;</span><span class="p">},</span> <span class="nx">questions</span><span class="o">:</span><span class="p">{</span><span class="nx">$sum</span><span class="o">:</span><span class="mi">1</span><span class="p">}}},</span>
</span><span class="line">     <span class="p">{</span><span class="nx">$match</span><span class="o">:</span><span class="p">{</span><span class="nx">_id</span><span class="o">:</span><span class="p">{</span><span class="nx">$in</span><span class="o">:</span><span class="p">[</span><span class="s1">&#39;activemq&#39;</span><span class="p">,</span> <span class="s1">&#39;rabbitmq&#39;</span><span class="p">,</span> <span class="s1">&#39;zeromq&#39;</span><span class="p">,</span> <span class="s1">&#39;hornetq&#39;</span><span class="p">]}}},</span>
</span><span class="line">     <span class="p">{</span><span class="nx">$project</span><span class="o">:</span><span class="p">{</span><span class="nx">upvotes</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span> <span class="nx">questions</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span> <span class="nx">ratio</span><span class="o">:</span><span class="p">{</span><span class="nx">$divide</span><span class="o">:</span><span class="p">[</span><span class="s1">&#39;$upvotes&#39;</span><span class="p">,</span> <span class="s1">&#39;$questions&#39;</span><span class="p">]}}},</span>
</span><span class="line">     <span class="p">{</span><span class="nx">$sort</span><span class="o">:</span><span class="p">{</span><span class="nx">ratio</span><span class="o">:-</span><span class="mi">1</span><span class="p">}}</span>
</span><span class="line"><span class="p">])[</span><span class="s1">&#39;result&#39;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">[</span>
</span><span class="line">     <span class="p">{</span>
</span><span class="line">          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;zeromq&quot;</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;upvotes&quot;</span> <span class="o">:</span> <span class="mi">1078</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;questions&quot;</span> <span class="o">:</span> <span class="mi">373</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;ratio&quot;</span> <span class="o">:</span> <span class="mf">2.8900804289544237</span>
</span><span class="line">     <span class="p">},</span>
</span><span class="line">     <span class="p">{</span>
</span><span class="line">          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;rabbitmq&quot;</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;upvotes&quot;</span> <span class="o">:</span> <span class="mi">1864</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;questions&quot;</span> <span class="o">:</span> <span class="mi">988</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;ratio&quot;</span> <span class="o">:</span> <span class="mf">1.8866396761133604</span>
</span><span class="line">     <span class="p">},</span>
</span><span class="line">     <span class="p">{</span>
</span><span class="line">          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;activemq&quot;</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;upvotes&quot;</span> <span class="o">:</span> <span class="mi">1459</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;questions&quot;</span> <span class="o">:</span> <span class="mi">1039</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;ratio&quot;</span> <span class="o">:</span> <span class="mf">1.4042348411934553</span>
</span><span class="line">     <span class="p">},</span>
</span><span class="line">     <span class="p">{</span>
</span><span class="line">          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;hornetq&quot;</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;upvotes&quot;</span> <span class="o">:</span> <span class="mi">233</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;questions&quot;</span> <span class="o">:</span> <span class="mi">185</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;ratio&quot;</span> <span class="o">:</span> <span class="mf">1.2594594594594595</span>
</span><span class="line">     <span class="p">}</span>
</span><span class="line"><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Interesting. The ZeroMQ users seem to ask more useful questions than the users of other brokers.</p>

<p>Let’s do the same analysis for the answers. Here is the query that calculates the number of answer up-votes by tag.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Number of useful answers </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">db</span><span class="p">.</span><span class="nx">stackoverflow</span><span class="p">.</span><span class="nx">aggregate</span><span class="p">([</span>
</span><span class="line">     <span class="p">{</span><span class="nx">$unwind</span><span class="o">:</span><span class="s1">&#39;$answers&#39;</span><span class="p">},</span>
</span><span class="line">     <span class="p">{</span><span class="nx">$unwind</span><span class="o">:</span><span class="s1">&#39;$tags&#39;</span><span class="p">},</span>
</span><span class="line">     <span class="p">{</span><span class="nx">$group</span><span class="o">:</span><span class="p">{</span><span class="nx">_id</span><span class="o">:</span><span class="p">{</span><span class="nx">question</span><span class="o">:</span><span class="s1">&#39;$_id&#39;</span><span class="p">,</span> <span class="nx">tag</span><span class="o">:</span><span class="s1">&#39;$tags&#39;</span><span class="p">},</span> <span class="nx">upvotes</span><span class="o">:</span><span class="p">{</span><span class="nx">$sum</span><span class="o">:</span><span class="s1">&#39;$answers.up_vote_count&#39;</span><span class="p">}}},</span>
</span><span class="line">     <span class="p">{</span><span class="nx">$group</span><span class="o">:</span><span class="p">{</span><span class="nx">_id</span><span class="o">:</span><span class="s1">&#39;$_id.tag&#39;</span><span class="p">,</span> <span class="nx">upvotes</span><span class="o">:</span><span class="p">{</span><span class="nx">$sum</span><span class="o">:</span><span class="s1">&#39;$upvotes&#39;</span><span class="p">},</span> <span class="nx">questions</span><span class="o">:</span><span class="p">{</span><span class="nx">$sum</span><span class="o">:</span><span class="mi">1</span><span class="p">}}},</span>
</span><span class="line">     <span class="p">{</span><span class="nx">$match</span><span class="o">:</span><span class="p">{</span><span class="nx">_id</span><span class="o">:</span><span class="p">{</span><span class="nx">$in</span><span class="o">:</span><span class="p">[</span><span class="s1">&#39;activemq&#39;</span><span class="p">,</span> <span class="s1">&#39;rabbitmq&#39;</span><span class="p">,</span> <span class="s1">&#39;zeromq&#39;</span><span class="p">,</span> <span class="s1">&#39;hornetq&#39;</span><span class="p">]}}},</span>
</span><span class="line">     <span class="p">{</span><span class="nx">$project</span><span class="o">:</span><span class="p">{</span><span class="nx">upvotes</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span> <span class="nx">questions</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span> <span class="nx">ratio</span><span class="o">:</span><span class="p">{</span><span class="nx">$divide</span><span class="o">:</span><span class="p">[</span><span class="s1">&#39;$upvotes&#39;</span><span class="p">,</span> <span class="s1">&#39;$questions&#39;</span><span class="p">]}}},</span>
</span><span class="line">     <span class="p">{</span><span class="nx">$sort</span><span class="o">:</span><span class="p">{</span><span class="nx">ratio</span><span class="o">:-</span><span class="mi">1</span><span class="p">}}</span>
</span><span class="line"><span class="p">])[</span><span class="s1">&#39;result&#39;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">[</span>
</span><span class="line">     <span class="p">{</span>
</span><span class="line">          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;zeromq&quot;</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;upvotes&quot;</span> <span class="o">:</span> <span class="mi">1469</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;questions&quot;</span> <span class="o">:</span> <span class="mi">338</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;ratio&quot;</span> <span class="o">:</span> <span class="mf">4.346153846153846</span>
</span><span class="line">     <span class="p">},</span>
</span><span class="line">     <span class="p">{</span>
</span><span class="line">          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;rabbitmq&quot;</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;upvotes&quot;</span> <span class="o">:</span> <span class="mi">2437</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;questions&quot;</span> <span class="o">:</span> <span class="mi">858</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;ratio&quot;</span> <span class="o">:</span> <span class="mf">2.84032634032634</span>
</span><span class="line">     <span class="p">},</span>
</span><span class="line">     <span class="p">{</span>
</span><span class="line">          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;activemq&quot;</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;upvotes&quot;</span> <span class="o">:</span> <span class="mi">2199</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;questions&quot;</span> <span class="o">:</span> <span class="mi">902</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;ratio&quot;</span> <span class="o">:</span> <span class="mf">2.4379157427937916</span>
</span><span class="line">     <span class="p">},</span>
</span><span class="line">     <span class="p">{</span>
</span><span class="line">          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;hornetq&quot;</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;upvotes&quot;</span> <span class="o">:</span> <span class="mi">262</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;questions&quot;</span> <span class="o">:</span> <span class="mi">156</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;ratio&quot;</span> <span class="o">:</span> <span class="mf">1.6794871794871795</span>
</span><span class="line">     <span class="p">}</span>
</span><span class="line"><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Again, ZeroMQ users post more useful answers than others.</p>

<p>To complete the picture of typical users, let’s run the following query that calculates an average reputation of people that post answers</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Reputation of respondents </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">db</span><span class="p">.</span><span class="nx">stackoverflow</span><span class="p">.</span><span class="nx">aggregate</span><span class="p">([</span>
</span><span class="line">     <span class="p">{</span><span class="nx">$unwind</span><span class="o">:</span><span class="s1">&#39;$answers&#39;</span><span class="p">},</span>
</span><span class="line">     <span class="p">{</span><span class="nx">$unwind</span><span class="o">:</span><span class="s1">&#39;$tags&#39;</span><span class="p">},</span>
</span><span class="line">     <span class="p">{</span><span class="nx">$group</span><span class="o">:</span><span class="p">{</span><span class="nx">_id</span><span class="o">:</span><span class="p">{</span><span class="nx">question</span><span class="o">:</span><span class="s1">&#39;$_id&#39;</span><span class="p">,</span> <span class="nx">tag</span><span class="o">:</span><span class="s1">&#39;$tags&#39;</span><span class="p">},</span> <span class="nx">reputation</span><span class="o">:</span><span class="p">{</span><span class="nx">$avg</span><span class="o">:</span><span class="s1">&#39;$answers.owner.reputation&#39;</span><span class="p">}}},</span>
</span><span class="line">     <span class="p">{</span><span class="nx">$group</span><span class="o">:</span><span class="p">{</span><span class="nx">_id</span><span class="o">:</span><span class="s1">&#39;$_id.tag&#39;</span><span class="p">,</span> <span class="nx">reputation</span><span class="o">:</span><span class="p">{</span><span class="nx">$avg</span><span class="o">:</span><span class="s1">&#39;$reputation&#39;</span><span class="p">}}},</span>
</span><span class="line">     <span class="p">{</span><span class="nx">$match</span><span class="o">:</span><span class="p">{</span><span class="nx">_id</span><span class="o">:</span><span class="p">{</span><span class="nx">$in</span><span class="o">:</span><span class="p">[</span><span class="s1">&#39;activemq&#39;</span><span class="p">,</span> <span class="s1">&#39;rabbitmq&#39;</span><span class="p">,</span> <span class="s1">&#39;zeromq&#39;</span><span class="p">,</span> <span class="s1">&#39;hornetq&#39;</span><span class="p">]}}},</span>
</span><span class="line">     <span class="p">{</span><span class="nx">$sort</span><span class="o">:</span><span class="p">{</span><span class="nx">reputation</span><span class="o">:-</span><span class="mi">1</span><span class="p">}}</span>
</span><span class="line"><span class="p">])[</span><span class="s1">&#39;result&#39;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="p">[</span>
</span><span class="line">     <span class="p">{</span>
</span><span class="line">          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;zeromq&quot;</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;reputation&quot;</span> <span class="o">:</span> <span class="mf">10088.29552338687</span>
</span><span class="line">     <span class="p">},</span>
</span><span class="line">     <span class="p">{</span>
</span><span class="line">          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;activemq&quot;</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;reputation&quot;</span> <span class="o">:</span> <span class="mf">7298.7539383380845</span>
</span><span class="line">     <span class="p">},</span>
</span><span class="line">     <span class="p">{</span>
</span><span class="line">          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;rabbitmq&quot;</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;reputation&quot;</span> <span class="o">:</span> <span class="mf">6082.172231934734</span>
</span><span class="line">     <span class="p">},</span>
</span><span class="line">     <span class="p">{</span>
</span><span class="line">          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;hornetq&quot;</span><span class="p">,</span>
</span><span class="line">          <span class="s2">&quot;reputation&quot;</span> <span class="o">:</span> <span class="mf">3472.9658119658116</span>
</span><span class="line">     <span class="p">}</span>
</span><span class="line"><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Wow. ZeroMQ users not only ask more useful questions and give useful answers, they also have higher reputation on average in the StackOverflow community.</p>

<p>As a final exercise, I want to build a graph of question distribution over time. After all, ActiveMQ is the oldest broker, and it might have got more questions just because it was launched first. For this purpose I created <a href="https://gist.github.com/4276136#file-trends-py">this</a> Python script that uses amazing <a href="http://matplotlib.org/gallery.html">matplotlib</a> library. And here is the result for the last 60 months</p>

<p><img class="center" src="http://blog.ndpar.com/images/posts/mom-trends-so.png" /></p>

<p>It shows that the proportion of interest in different massaging systems was approximately the same all the time. Furthermore, the StackOverflow statistics of this year correlates well with the Google statistics.</p>

<h2 id="conclusion">Conclusion</h2>

<ol>
  <li>
    <p>RabbitMQ and ActiveMQ are very popular. If you choose one of them for your messaging infrastructure, you shouldn’t have any problem with the community support. HornetQ might be a good message broker but it definitely lacks the community interest. Finally, as I <a href="http://blog.ndpar.com/2012/11/12/pycon-canada-2012/#learn">suspected</a> before, ZeroMQ is worth looking at. There are bunch of smart and helpful people in ZeroMQ community.</p>
  </li>
  <li>
    <p>MongoDB is really nice! Its aggregation framework is powerful and easy to use. It was fun playing with it.</p>
  </li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Retreat 2012]]></title>
    <link href="http://blog.ndpar.com/2012/12/09/code-retreat-2012/"/>
    <updated>2012-12-09T07:00:00-05:00</updated>
    <id>http://blog.ndpar.com/2012/12/09/code-retreat-2012</id>
    <content type="html"><![CDATA[<p>Yesterday was the Global Day of CodeRetreat. Software engineers around the globe met together to learn from each other.</p>

<p><img class="center" src="https://pbs.twimg.com/media/A9mptOCCAAE0d7z.jpg" title="CR2012 1" /></p>

<p>There were several sessions where people were pair-programming <a href="http://en.wikipedia.org/wiki/Conway's_Game_of_Life">Conway’s Game of Life</a>.</p>

<p><img class="center" src="https://pbs.twimg.com/media/A9nZYcTCQAEVtkP.jpg" title="CR2012 2" /></p>

<p>Each session you had to choose a new partner, so that both of you can learn something new.</p>

<p><img class="center" src="https://pbs.twimg.com/media/A9n_aHzCcAARnkJ.jpg" title="CR2012 3" /></p>

<p>During the first session my partner and I decided to implement the Game in Java, mainly because it was the language she was most comfortable with. We implemented the procedural solution using two-dimensional array and nested loops. At that moment that was the only solution I could think of. The main challenge was to cover all edge cases and fix all <code>ArrayIndexOutOfBoundsException</code>s. Java is fairly verbose language, and with nested loops and if-else statements the final solution was pretty hard to read. You can see <a href="http://rosettacode.org/wiki/Conway's_Game_of_Life#Java">here</a> how it might look like.</p>

<p>First session was a warmup, during which most people realized that programming arrays is a tedious work. For the second session my new partner suggested an object-oriented approach, where you would operate on Cell objects that would encapsulate coordinates on the grid. In this case you move the game logic from the grid to the cell, making it easier to calculate a new state. This was my first acquaintance with C#. Interesting language — basically, Java with lambdas. Here is an <a href="http://rosettacode.org/wiki/Conway's_Game_of_Life#C.23">example</a> of C# implementation. Our solution was very similar.</p>

<p>While the first session’s data structure was array of booleans, on the second session it was replaced by a list of objects. The next step would be to relax the data structure even further. We decided to experiment with un-ordered set of coordinate pairs. For language we chose Clojure. Although we didn’t finish the implementation, by the end of the session we had a clear picture how to solve the problem in functional style.</p>

<p>On the fourth session the facilitators put an interesting constraint: the coding must be done in absolute silence. That was the most amazing experience of the day. Before we started I thought we couldn’t accomplish much without talking. As it turned out, we could. The key of effective silent coding is to use the tools which both partners are familiar with. In our case we both were advanced users of Vim, and we knew Lisp languages. Our Clojure implementation was based on map/filter/reduce approach and spanned 20 lines of code. After the session <a href="http://langnostic.blogspot.com">Leo</a> showed me Christophe Grand’s <a href="http://clj-me.cgrand.net/2011/08/19/conways-game-of-life/">7-line solution</a> based on list comprehensions. It is so wonderful that I want to post it here</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>life.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">neighbours</span> <span class="p">[[</span><span class="nv">x</span> <span class="nv">y</span><span class="p">]]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">dx</span> <span class="p">[</span><span class="mi">-1</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">]</span> <span class="nv">dy</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">zero? </span><span class="nv">dx</span><span class="p">)</span> <span class="p">[</span><span class="mi">-1</span> <span class="mi">1</span><span class="p">]</span> <span class="p">[</span><span class="mi">-1</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">])]</span>
</span><span class="line">    <span class="p">[(</span><span class="nb">+ </span><span class="nv">dx</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">dy</span> <span class="nv">y</span><span class="p">)]))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">step</span> <span class="p">[</span><span class="nv">cells</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">set </span><span class="p">(</span><span class="nb">for </span><span class="p">[[</span><span class="nv">loc</span> <span class="nv">n</span><span class="p">]</span> <span class="p">(</span><span class="nf">frequencies</span> <span class="p">(</span><span class="nb">mapcat </span><span class="nv">neighbours</span> <span class="nv">cells</span><span class="p">))</span>
</span><span class="line">             <span class="ss">:when</span> <span class="p">(</span><span class="nb">or </span><span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nf">cells</span> <span class="nv">loc</span><span class="p">)))]</span>
</span><span class="line">         <span class="nv">loc</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>For the last session we chose Erlang. Because we already knew how to implement the functional solution, that was just an exercise of translating Clojure code into Erlang. Unfortunately we didn’t find an equivalent of <code>frequencies</code> function in the standard library, so we implemented it ourselves. Other than that, the Erlang code is almost identical to Clojure.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>life.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="erlang"><span class="line"><span class="nf">neighbours</span><span class="p">({</span><span class="nv">X</span><span class="p">,</span> <span class="nv">Y</span><span class="p">})</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="p">[{</span><span class="nv">X</span> <span class="o">+</span> <span class="nv">DX</span><span class="p">,</span> <span class="nv">Y</span> <span class="o">+</span> <span class="nv">DY</span><span class="p">}</span> <span class="p">||</span> <span class="nv">DX</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="nv">DY</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">{</span><span class="nv">DX</span><span class="p">,</span> <span class="nv">DY</span><span class="p">}</span> <span class="o">=/=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">}].</span>
</span><span class="line">
</span><span class="line"><span class="nf">step</span><span class="p">(</span><span class="nv">Cells</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class="line">    <span class="nv">Nbs</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">flatmap</span><span class="p">(</span><span class="k">fun</span> <span class="n">neighbours</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="nn">sets</span><span class="p">:</span><span class="nf">to_list</span><span class="p">(</span><span class="nv">Cells</span><span class="p">)),</span>
</span><span class="line">    <span class="nv">NewCells</span> <span class="o">=</span> <span class="p">[</span><span class="nv">C</span> <span class="p">||</span> <span class="p">{</span><span class="nv">C</span><span class="p">,</span> <span class="nv">N</span><span class="p">}</span> <span class="o">&lt;-</span> <span class="nn">dict</span><span class="p">:</span><span class="nf">to_list</span><span class="p">(</span><span class="n">frequencies</span><span class="p">(</span><span class="nv">Nbs</span><span class="p">)),</span>
</span><span class="line">                     <span class="p">(</span><span class="nv">N</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span> <span class="ow">orelse</span> <span class="p">((</span><span class="nv">N</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="ow">andalso</span> <span class="nn">sets</span><span class="p">:</span><span class="nf">is_element</span><span class="p">(</span><span class="nv">C</span><span class="p">,</span> <span class="nv">Cells</span><span class="p">))],</span>
</span><span class="line">    <span class="nn">sets</span><span class="p">:</span><span class="nf">from_list</span><span class="p">(</span><span class="nv">NewCells</span><span class="p">).</span>
</span><span class="line">
</span><span class="line"><span class="nf">frequencies</span><span class="p">(</span><span class="nv">List</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">frequencies</span><span class="p">(</span><span class="nv">List</span><span class="p">,</span> <span class="nn">dict</span><span class="p">:</span><span class="nf">new</span><span class="p">()).</span>
</span><span class="line"><span class="nf">frequencies</span><span class="p">([],</span> <span class="nv">Acc</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">Acc</span><span class="p">;</span>
</span><span class="line"><span class="nf">frequencies</span><span class="p">([</span><span class="nv">X</span><span class="p">|</span><span class="nv">Xs</span><span class="p">],</span> <span class="nv">Acc</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">frequencies</span><span class="p">(</span><span class="nv">Xs</span><span class="p">,</span> <span class="nn">dict</span><span class="p">:</span><span class="nf">update_counter</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">Acc</span><span class="p">)).</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="summary">Summary</h2>

<p>During this day I learnt a lot: new language, new abstractions, new techniques, new ways of communication, new ideas. I met bunch of smart people. I was so overwhelmed with all this cool stuff that I had to write this blog post to offload it from my head.</p>

<p>If you are a programmer and you’ve never been to CodeRetreat, I strongly encourage you to do it next year. It’s an exciting experience.</p>

<p>I want to thank all the people who organized and participated in this event.</p>

<h3 id="photo-credits">Photo Credits</h3>

<ul>
  <li>Michael DiBernardo <a href="https://twitter.com/mdibernardo/status/277439446381625345/photo/1">[1]</a></li>
  <li>Kunal Gupta <a href="https://twitter.com/kunalfrompolar/status/277491865991921664/photo/1">[2]</a></li>
  <li>Carlo Barrettara <a href="https://twitter.com/barrettara/status/277533676273823746/photo/1">[3]</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flexible language]]></title>
    <link href="http://blog.ndpar.com/2012/11/22/flexible-language/"/>
    <updated>2012-11-22T07:00:00-05:00</updated>
    <id>http://blog.ndpar.com/2012/11/22/flexible-language</id>
    <content type="html"><![CDATA[<p>I’ve been learning Lisp for few years now, and every Lisp book I read keeps saying that Lisp is a flexible language that you can extend to the degree when it fits naturally to your domain. It’s easy to say, but what exactly does this phrase mean? After all, when you program in your non-Lisp language, don’t you modify it for your domain problem? I’ve been thinking about it for a long time, and only recently I started to understand what flexibility really means. There is a difference between <em>using</em> the language and <em>changing</em> the language to solve a problem. In this post I will try to show the difference based on a simple example.</p>

<h2 id="problem">Problem</h2>

<p><img class="right" src="http://blog.ndpar.com/images/posts/handlers.png" /></p>

<p>Suppose you have a process that listens to a message queue. The messages are just ordinary maps. If the map contains certain keys, one or more handlers must be invoked. Here is a matrix that shows which handler is invoked for which key.</p>

<p>For example, if the map has key <strong><em>a</em></strong>, then DocHandler and AlertHandler need to be called. If it has key <strong><em>b</em></strong>, then NoteHandler and AlertHandler are called. In reality there might be more keys and more handlers, but for simplicity we limit our example to three keys and three handlers.</p>

<!-- more -->

<h2 id="java">Java</h2>

<p>Let’s see how this can be implemented in Java. I chose Java just as an example of non-Lisp language. You can pick any other non-Lisp language instead.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>SimpleMessageListener.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleMessageListener</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="n">List</span> <span class="nf">onMessage</span><span class="o">(</span><span class="n">Map</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">List</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">();</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">isDoc</span><span class="o">(</span><span class="n">message</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">            <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">handleDoc</span><span class="o">(</span><span class="n">message</span><span class="o">));</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">isNote</span><span class="o">(</span><span class="n">message</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">            <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">handleNote</span><span class="o">(</span><span class="n">message</span><span class="o">));</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">isAlert</span><span class="o">(</span><span class="n">message</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">            <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">handleAlert</span><span class="o">(</span><span class="n">message</span><span class="o">));</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// Decision makers</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isDoc</span><span class="o">(</span><span class="n">Map</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">message</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">)</span> <span class="o">||</span> <span class="n">message</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="s">&quot;c&quot;</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isNote</span><span class="o">(</span><span class="n">Map</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">message</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="s">&quot;b&quot;</span><span class="o">)</span> <span class="o">||</span> <span class="n">message</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="s">&quot;c&quot;</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isAlert</span><span class="o">(</span><span class="n">Map</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">message</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">)</span> <span class="o">||</span> <span class="n">message</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="s">&quot;b&quot;</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// Handlers</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="n">String</span> <span class="nf">handleDoc</span><span class="o">(</span><span class="n">Map</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;Document:%s:%s&quot;</span><span class="o">,</span> <span class="n">message</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">),</span> <span class="n">message</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;c&quot;</span><span class="o">));</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="n">String</span> <span class="nf">handleNote</span><span class="o">(</span><span class="n">Map</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;Note:%s:%s&quot;</span><span class="o">,</span> <span class="n">message</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;b&quot;</span><span class="o">),</span> <span class="n">message</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;c&quot;</span><span class="o">));</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="n">String</span> <span class="nf">handleAlert</span><span class="o">(</span><span class="n">Map</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;Alert:%s:%s&quot;</span><span class="o">,</span> <span class="n">message</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">),</span> <span class="n">message</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;b&quot;</span><span class="o">));</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The internals of <code>handle</code> methods might be very different in reality. Consider the fact they have the same structure here as a coincidence. What is not coincidence though is the structure of <code>is</code> methods. Those methods are identical indeed.</p>

<p>Is this code clean? I would say, no. The main issue is that it’s split in three separate but closely related parts. If tomorrow I introduce another message key and a new handler, I have to change three places in the code. Another problem is the code duplication in two spots: a series of <code>if</code> statements and a group of <code>is</code> methods.</p>

<p>The last thing to notice about this code is that it’s hard to see what kind of problem it’s trying to solve. If I didn’t provide a matrix which maps message keys to handlers, it would take even more time to figure out what the code is doing.</p>

<p>Can we make this code better? Let’s rewrite it as follows:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>FunctionalMessageListener.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FunctionalMessageListener</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">interface</span> <span class="nc">Handler</span> <span class="o">{</span>
</span><span class="line">        <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">Map</span> <span class="n">message</span><span class="o">,</span> <span class="n">List</span> <span class="n">acc</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">DocHandler</span> <span class="kd">implements</span> <span class="n">Handler</span> <span class="o">{</span>
</span><span class="line">        <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isDoc</span><span class="o">(</span><span class="n">Map</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="n">message</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">)</span> <span class="o">||</span> <span class="n">message</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="s">&quot;c&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">Map</span> <span class="n">message</span><span class="o">,</span> <span class="n">List</span> <span class="n">acc</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">isDoc</span><span class="o">(</span><span class="n">message</span><span class="o">))</span> <span class="n">acc</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;Document:%s:%s&quot;</span><span class="o">,</span> <span class="n">message</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">),</span> <span class="n">message</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;c&quot;</span><span class="o">)));</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">NoteHandler</span> <span class="kd">implements</span> <span class="n">Handler</span> <span class="o">{</span>
</span><span class="line">        <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isNote</span><span class="o">(</span><span class="n">Map</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="n">message</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="s">&quot;b&quot;</span><span class="o">)</span> <span class="o">||</span> <span class="n">message</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="s">&quot;c&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">Map</span> <span class="n">message</span><span class="o">,</span> <span class="n">List</span> <span class="n">acc</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">isNote</span><span class="o">(</span><span class="n">message</span><span class="o">))</span> <span class="n">acc</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;Note:%s:%s&quot;</span><span class="o">,</span> <span class="n">message</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;b&quot;</span><span class="o">),</span> <span class="n">message</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;c&quot;</span><span class="o">)));</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">AlertHandler</span> <span class="kd">implements</span> <span class="n">Handler</span> <span class="o">{</span>
</span><span class="line">        <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isAlert</span><span class="o">(</span><span class="n">Map</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="n">message</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">)</span> <span class="o">||</span> <span class="n">message</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="s">&quot;b&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">Map</span> <span class="n">message</span><span class="o">,</span> <span class="n">List</span> <span class="n">acc</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">isAlert</span><span class="o">(</span><span class="n">message</span><span class="o">))</span> <span class="n">acc</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;Alert:%s:%s&quot;</span><span class="o">,</span> <span class="n">message</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">),</span> <span class="n">message</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;b&quot;</span><span class="o">)));</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Handler</span><span class="o">&gt;</span> <span class="nf">handlers</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="k">new</span> <span class="n">DocHandler</span><span class="o">(),</span> <span class="k">new</span> <span class="n">NoteHandler</span><span class="o">(),</span> <span class="k">new</span> <span class="n">AlertHandler</span><span class="o">());</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="n">List</span> <span class="nf">onMessage</span><span class="o">(</span><span class="n">Map</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">List</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">();</span>
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="n">Handler</span> <span class="n">handler</span> <span class="o">:</span> <span class="n">handlers</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">            <span class="n">handler</span><span class="o">.</span><span class="na">handle</span><span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In this version we eliminated ugly <code>if</code> series, and grouped together <em>decision making</em> logic and <em>message handling</em>. From that perspective the code became cleaner, but not necessarily clearer. Now it actually takes more effort to understand what the code is doing. Also, the duplication inside the <code>is</code> methods is still there. We can fix it by extracting it to some abstract class or utility method. We can also use Java reflection within <code>handlers</code> method to build a collection of handlers without explicitly specifying them. All these manipulations arguably make the code cleaner, but… one thing we’ll never be able to fix is the separation between decision making logic and message handling. <em>Whatever you do, there will always be the if-statement, in one form or another, that checks if you need to process the message, and the message processing logic itself.</em> Those two things will always be separate. This is the point where we hit the language limits.</p>

<h2 id="clojure">Clojure</h2>

<p>Now let’s try to solve the same problem in Lisp and see if we can fix the language to eliminate the last issue from the paragraph above. Here is the direct translation of the previous Java snippet to Clojure dialect of Lisp</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn- </span><span class="nv">doc-handler</span> <span class="p">[</span><span class="nv">msg</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">a</span> <span class="p">(</span><span class="nf">msg</span> <span class="ss">:a</span><span class="p">)</span>, <span class="nv">c</span> <span class="p">(</span><span class="nf">msg</span> <span class="ss">:c</span><span class="p">)]</span>
</span><span class="line">    <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">or </span><span class="nv">a</span> <span class="nv">c</span><span class="p">)</span>
</span><span class="line">      <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;Document:%s:%s&quot;</span> <span class="nv">a</span> <span class="nv">c</span><span class="p">))))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="kd">defn- </span><span class="nv">note-handler</span> <span class="p">[</span><span class="nv">msg</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">b</span> <span class="p">(</span><span class="nf">msg</span> <span class="ss">:b</span><span class="p">)</span>, <span class="nv">c</span> <span class="p">(</span><span class="nf">msg</span> <span class="ss">:c</span><span class="p">)]</span>
</span><span class="line">    <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">or </span><span class="nv">b</span> <span class="nv">c</span><span class="p">)</span>
</span><span class="line">      <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;Note:%s:%s&quot;</span> <span class="nv">b</span> <span class="nv">c</span><span class="p">))))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="kd">defn- </span><span class="nv">alert-handler</span> <span class="p">[</span><span class="nv">msg</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">a</span> <span class="p">(</span><span class="nf">msg</span> <span class="ss">:a</span><span class="p">)</span>, <span class="nv">b</span> <span class="p">(</span><span class="nf">msg</span> <span class="ss">:b</span><span class="p">)]</span>
</span><span class="line">    <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">or </span><span class="nv">a</span> <span class="nv">b</span><span class="p">)</span>
</span><span class="line">      <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;Alert:%s:%s&quot;</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">))))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="kd">defn- </span><span class="nv">handlers</span> <span class="p">[]</span>
</span><span class="line">  <span class="p">[</span><span class="nv">doc-handler</span> <span class="nv">note-handler</span> <span class="nv">alert-handler</span><span class="p">])</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">on-message</span> <span class="p">[</span><span class="nv">msg</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nf">letfn</span> <span class="p">[(</span><span class="nf">handle</span> <span class="p">[</span><span class="nv">acc</span> <span class="nv">h</span><span class="p">]</span>
</span><span class="line">            <span class="p">(</span><span class="nb">if-let </span><span class="p">[</span><span class="nv">res</span> <span class="p">(</span><span class="nf">h</span> <span class="nv">msg</span><span class="p">)]</span>
</span><span class="line">              <span class="p">(</span><span class="nb">conj </span><span class="nv">acc</span> <span class="nv">res</span><span class="p">)</span>
</span><span class="line">              <span class="nv">acc</span><span class="p">))]</span>
</span><span class="line">    <span class="p">(</span><span class="nb">reduce </span><span class="nv">handle</span> <span class="p">[]</span> <span class="p">(</span><span class="nf">handlers</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This code is already easier to read, but we can do even better. The separation between decision making logic and message handling is still there. At this point we should ask the question: what kind of code do we want to see there? And the answer is: we want to replace the <code>-handler</code> methods above with the following code</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">handler</span> <span class="nb">doc </span><span class="p">[</span><span class="nv">a</span> <span class="nv">c</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;Document:%s:%s&quot;</span> <span class="nv">a</span> <span class="nv">c</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nf">handler</span> <span class="nv">note</span> <span class="p">[</span><span class="nv">b</span> <span class="nv">c</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;Note:%s:%s&quot;</span> <span class="nv">b</span> <span class="nv">c</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nf">handler</span> <span class="nv">alert</span> <span class="p">[</span><span class="nv">a</span> <span class="nv">b</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;Alert:%s:%s&quot;</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You see: no conditionals. Handlers are self-sufficient entities which know <em>when</em> they have to be applied and <em>how</em>. In their signatures they explicitly declare which message keys they expect, and in the body they just <em>use</em> those keys. No boilerplate: clean and simple. The beauty of Lisp is that you can actually implement that code. The way you do it is by creating a macro which generates the appropriate functions. Creating a macro is not a simple task, I spent quite some time to get this one working, but it’s worth of doing, because it makes the code clean and clear.</p>

<p>We can make one additional step further by moving the <code>handler</code> declarations inside the <code>build-handlers</code> function. (We need one small macro for that.) And here is the final solution</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defmacro </span><span class="nv">handler</span> <span class="p">[</span><span class="nb">name </span><span class="nv">args</span> <span class="o">&amp;</span> <span class="nv">body</span><span class="p">]</span>
</span><span class="line">  <span class="o">`</span><span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="o">~</span><span class="ss">&#39;msg</span><span class="p">]</span>
</span><span class="line">     <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="o">~@</span><span class="p">(</span><span class="nb">interleave </span><span class="nv">args</span> <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="o">`</span><span class="p">(</span><span class="nb">get </span><span class="o">~</span><span class="ss">&#39;msg</span> <span class="o">~</span><span class="p">(</span><span class="nb">keyword </span><span class="nv">x</span><span class="p">)))</span> <span class="nv">args</span><span class="p">))]</span>
</span><span class="line">       <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">or </span><span class="o">~@</span><span class="nv">args</span><span class="p">)</span>
</span><span class="line">         <span class="o">~@</span><span class="nv">body</span><span class="p">))))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="kd">defmacro </span><span class="nv">build-handlers</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">body</span><span class="p">]</span>
</span><span class="line">  <span class="o">`</span><span class="p">(</span><span class="kd">defn- </span><span class="nv">handlers</span> <span class="p">[]</span>
</span><span class="line">     <span class="p">[</span><span class="o">~@</span><span class="nv">body</span><span class="p">]))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nf">build-handlers</span>
</span><span class="line">
</span><span class="line">  <span class="p">(</span><span class="nf">handler</span> <span class="nb">doc </span><span class="p">[</span><span class="nv">a</span> <span class="nv">c</span><span class="p">]</span>
</span><span class="line">    <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;Document:%s:%s&quot;</span> <span class="nv">a</span> <span class="nv">c</span><span class="p">))</span>
</span><span class="line">
</span><span class="line">  <span class="p">(</span><span class="nf">handler</span> <span class="nv">note</span> <span class="p">[</span><span class="nv">b</span> <span class="nv">c</span><span class="p">]</span>
</span><span class="line">    <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;Note:%s:%s&quot;</span> <span class="nv">b</span> <span class="nv">c</span><span class="p">))</span>
</span><span class="line">
</span><span class="line">  <span class="p">(</span><span class="nf">handler</span> <span class="nv">alert</span> <span class="p">[</span><span class="nv">a</span> <span class="nv">b</span><span class="p">]</span>
</span><span class="line">    <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;Alert:%s:%s&quot;</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">on-message</span> <span class="p">[</span><span class="nv">msg</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nf">letfn</span> <span class="p">[(</span><span class="nf">handle</span> <span class="p">[</span><span class="nv">acc</span> <span class="nv">h</span><span class="p">]</span>
</span><span class="line">            <span class="p">(</span><span class="nb">if-let </span><span class="p">[</span><span class="nv">res</span> <span class="p">(</span><span class="nf">h</span> <span class="nv">msg</span><span class="p">)]</span>
</span><span class="line">              <span class="p">(</span><span class="nb">conj </span><span class="nv">acc</span> <span class="nv">res</span><span class="p">)</span>
</span><span class="line">              <span class="nv">acc</span><span class="p">))]</span>
</span><span class="line">    <span class="p">(</span><span class="nb">reduce </span><span class="nv">handle</span> <span class="p">[]</span> <span class="p">(</span><span class="nf">handlers</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As I said, the first macro might be cryptic, but look at the lines 11–20. This is the essence of our problem, and it cannot be done any simpler. Suppose, we need to implement a new handler which should be called if key <strong><em>c</em></strong> is present in the message. Here what we would need to add to <code>build-handler</code>’s body to implement this new requirement</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line">  <span class="p">(</span><span class="nf">handler</span> <span class="k">new </span><span class="p">[</span><span class="nv">c</span><span class="p">]</span>
</span><span class="line">    <span class="nv">...</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Simple, right? And what if a new key <strong><em>d</em></strong> is added to the message that should be processed by document handler? Here is what we need to change</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line">  <span class="p">(</span><span class="nf">handler</span> <span class="nb">doc </span><span class="p">[</span><span class="nv">a</span> <span class="nv">c</span> <span class="nv">d</span><span class="p">]</span>
</span><span class="line">    <span class="nv">...</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We just add a new key to the function’s parameter list. That’s it — one-word change.</p>

<h2 id="summary">Summary</h2>

<p>Lisp is the most powerful programming language. By that I mean you can change the language in such a way that the solution to any particular problem can be expressed in the simplest possible way. By changing the language, you can remove all the barriers between the language and the problem domain. I hope I demonstrated this in my simple example.</p>

<h2 id="resources">Resources</h2>

<p>Clojure <a href="https://github.com/ndpar/clojure/blob/master/src/dojo/handler.clj">source</a> code for this blog, along with the <a href="https://github.com/ndpar/clojure/blob/master/test/dojo/handler_test.clj">unit tests</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PyCon Canada 2012]]></title>
    <link href="http://blog.ndpar.com/2012/11/12/pycon-canada-2012/"/>
    <updated>2012-11-12T15:40:01-05:00</updated>
    <id>http://blog.ndpar.com/2012/11/12/pycon-canada-2012</id>
    <content type="html"><![CDATA[<p>This weekend I attended <a href="http://pycon.ca/">PyCon Canada</a>, the first conference in Canada dedicated to Python ecosystem. As you might find from my blog, I’m not a Python guy. I’ve been using Python mostly as a scripting language. I went to this conference for fresh ideas, or, as Michael Feathers said, for cross-polination from Python community. This blog post is not a detailed review of the conference — I just want to share my impression in general.</p>

<h2 id="organization">Organization</h2>

<p>Considering how little time the organizers had for preparing this conference, 5 months I believe, they did amazing job. They invited great speakers. They kept people well informed using mailing list and Twitter. The official web site was clear and easy to navigate. The location was good. The food was decent. The only complaint I had is about the temperature in the rooms on the first day. It was so freezing cold inside that I had to wear my jacket all the time. But on the second day the problem was fixed.</p>

<h2 id="keynotes">Keynotes</h2>

<p>Keynotes were absolutely fantastic. There were three of them. Jessica McKellar was talking about Python community. How they foster it, how they attract new people to programming in general and to Python in particular. She shared her experience from organizing Boston Python user group, the biggest Python user group in the world. The takeaway from her talk: Python community is big, welcoming, and well supported by Python Foundation.</p>

<p>Second keynote was Michael Feathers’ <em>Why You Should(n’t) be Using a Functional Programming Language Instead</em>. The main idea of his talk is: Don’t lock yourself inside one language. Go outside of your community to see what other languages exist out there, how they solved the problems. Study those languages, learn their idioms and techniques, and then go back to your language and start using the ideas you’ve learnt. I completely agree with that, and that’s why I went to this conference in the first place. He gave bunch of examples of functional programming in Haskell. Then he showed his Ruby code written in functional style, where you could see the influence of Haskell. I liked his presentation because he verbalized the ideas I myself have been thinking about for a while. When I started programming in Groovy my Groovy code was basically a Java code without semicolons. Now my Java code looks more like Groovy.</p>

<p>The closing keynote was by Fernando Pérez, the scientist from University of California, Berkeley, and the creator of IPython. The talk, titled <a href="https://speakerdeck.com/fperez/science-and-python-a-interactively-biased-retrospective-of-a-mostly-successful-decade"><em>Science and Python</em></a>,  was really mind blowing. When I was a student I did all my computations using mainly Fortran and some proprietary software I don’t even remember the name of. Later, I played with Mathematica and Octave a little bit. But I didn’t know that you can do very sophisticated scientific calculations using Python. Fernando gave some examples from neuroscience, astrophysics and biology, and it’s really impressive. The discovery of Supernova PTF11kyl is especially astonishing. From now on, if I need to do some math, I’ll be using Python libraries; no more proprietary expensive software. Another theme of the presentation was IPython. Initially I thought it’s just a shell on top of the standard Python, but it’s actually the whole ecosystem. I cannot explain in a few words how amazing it is. Just google for “ipython notebook” or read Fernando’s <a href="http://blog.fperez.org/2012/09/blogging-with-ipython-notebook.html">blog</a>.</p>

<h2 id="talks">Talks</h2>

<p>As it happens on every conference, there were some great talks and some lousy talks, interesting talks and boring talks, geeky talks and academic talks. It’s all normal and fine. The good thing about this conference though is that signal-noise ratio was pretty high; congratulations to the organizers for choosing talks. Another thing I like is the diversity of formats. There were 45-min presentation, 20-min talks, 5-min lightning talks, 90-min tutorials, and 3-hour workshop (there are also two full day coding sessions but I’m not attending them). This is a really good approach. Switching between different formats during the day helps your brain functioning more productive, in my opinion.</p>

<h2 id="pleasant-discoveries">Pleasant discoveries</h2>

<p>I found many projects presented at the conference are using RabbitMQ, and that’s great. I wish in Java world people would use AMQP more frequently instead of blindly choosing JMS for every new project.</p>

<p>Many people are using MongoDB properly. Nowadays NoSQL is a very popular buzzword, and many projects are using various NoSQL databases just because it’s cool, even if it makes no sense for the project at all. It was nice to see that there are developers out there who do their homework and adopt NoSQL because it fits their domain.</p>

<h2 id="unpleasant-discoveries">Unpleasant discoveries</h2>

<p>There seems to be a trend in Python community to despise Java. I actually see this trend in many communities outside of Java, so it’s not Python specific, but at this conference I’ve heard too many jokes about Java so it’s not funny anymore, especially hearing them from the people who don’t write a line of code in Java.</p>

<p>Another thing surprised me is the fanatic admiration of Mercurial and hate of Git from some Python programmers. I know lots of people who hate Git, mainly because they are confused and scared by Git. But dislike it for the reason not being written in Python is something new to me.</p>

<h2 id="problems-in-python">Problems in Python</h2>

<p>Package and distribution management in Python is in pretty bad shape. Every person I talked to admitted that it’s complete mess at the moment. I myself feel that pain every time I need to install a new library. Which tool should I use: pip, easy_install, pysetup? Some libraries installed using those tools don’t work, or work partially. Many programmers use rpm or deb packages instead of Python tools, because OS packages usually work. I came to the same conclusion on my Mac OS. The only flawlessly working Python environment I have is that installed via mac ports. In Java we don’t have those problems. Maven solved it once and for all long time ago. Now every JVM language benefits from it. Python community should clean up this mess and standardize their tools. I was told that with introducing PyPi and PEPs the situation is getting better, well, let’s see if it resolves all the issues.</p>

<h2 id="what-ive-learnt">What I’ve learnt</h2>

<p>Here is the list of things I found pretty interesting, in no particular order.</p>

<h3 id="python-libraries-to-use">Python libraries to use</h3>

<p>numpy, matplotlib, pandas, scipy, sympy, quantities, collections. Thanks to the people who told me about these libraries.</p>

<h3 id="cool-python-stuff">Cool Python stuff</h3>

<p>RunSnakeRun — GUI for Python profiler. Check out the screenshots on their <a href="http://www.vrplumber.com/programming/runsnakerun/">web site</a>. I wish Java profilers could draw such nice graphs.</p>

<p><a href="http://bpython-interpreter.org/screenshots/">bpython</a> — Python REPL for geeks written in <a href="http://excess.org/urwid/examples.html">Urwid</a>. Thanks to Ian Ward for the really nice <a href="http://pyvideo.org/video/1568/console-applications-with-urwid">presentation</a>.</p>

<h3 id="interesting-ideas">Interesting ideas</h3>

<p>Print log statements in JSON format so that you can analyze them using powerful tools. You can also save logs in MongoDB, either offline or asynchronously, and do statistic analysis using aggregation framework.</p>

<p>Write stored procedures in PostgreSQL in Python (and some other languages). They look much better in Python than plSQL.</p>

<h2 id="things-to-learna-namelearnnbspa">Things to learn<a name="learn"> </a></h2>

<p>Here are some technology and tools that have a great potential, in my opinion, and worthy of learning: ZeroMQ, IPython, OpenStack. Those were mentioned multiple times during the conference, and I need to check them out in more details.</p>

<h2 id="summary">Summary</h2>

<p>The conference was great. I’m glad I attended it. The organizers did a great job. The conference was beneficial not only to Python community but to Toronto programming community in general. Thanks to all who made it happen.</p>

<p>P.S. Videos from the conference are available <a href="http://pyvideo.org/category/25/pycon-ca-2012">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple web application in Clojure]]></title>
    <link href="http://blog.ndpar.com/2012/11/08/simple-web-application-in-clojure/"/>
    <updated>2012-11-08T07:00:00-05:00</updated>
    <id>http://blog.ndpar.com/2012/11/08/simple-web-application-in-clojure</id>
    <content type="html"><![CDATA[<p>This blog entry is a micro-tutorial on how to build a simple web application in Clojure. The reason I call it micro will be clear when I introduce the framework we are going to use. This tutorial will be interesting to programmers relatively new to Clojure, but who have some experience with web frameworks in other languages, for instance Spring MVC. The goal of this tutorial is to help you get started with web development in Clojure. Also I want to share my approach to web development in general and in Clojure in particular. This approach is by no means the best way to develop web applications, but because I like to watch how other people write the software, I thought somebody might be interested to see how I do it.</p>

<!-- more -->

<h2 id="problem">Problem</h2>

<p>So what are we going to build? I don’t want to build a simplistic web application for the sake of building the application. On the other hand, I want to constrain myself to small feature set to prevent this tutorial from sinking in too many details. After thinking a while I found a problem which looks pretty simple, but at the same time there is a good chance people (including myself in the first place) will actually use the program I’m going to create. And here is the problem.</p>

<p>I have a bunch of articles and e-books sitting in some directory on my home server. To be able to read those books from any computer in my home network, I run the simple Python web-server, which exposes the content of the directory via HTTP. If you are curious, here is the command I’m using:</p>

<pre><code>$ cd /path/to/your/ebook/dir
$ python -m SimpleHTTPServer 3030
</code></pre>

<p>And here is how the “library” looks like in the browser</p>

<p><img class="center" src="http://blog.ndpar.com/images/posts/bookshelf1.png" /></p>

<p>This library application is good enough for me, mainly because it’s functional. I can easily find the book by skimming the page or using Find command in a browser. But for the purpose of this tutorial I want to make it slightly better. For example, I can split the file names and display the books in a table view, where I can see clearly what the name of the book is, who the author is, and when it was pablished. I can even add sorting as a bonus feature. Basically, I want something like this</p>

<p><img class="center" src="http://blog.ndpar.com/images/posts/bookshelf2.png" /></p>

<p>As you can imagine, it shouldn’t be hard to do this. The file names are already in the form that is easy to parse. So the question is really how to show the table data in a browser. Simple problem, minimum requirements. Let’s see how to solve it in Clojure.</p>

<h2 id="tools">Tools</h2>

<p>Clojure, being a Lisp descendant, is a powerful language. That means you can create your own web framework during a weekend, which many people actually do. But I think it’s much better to take existing library, promote it, enhance it, fix the bugs if you like it. In Clojure I found such a framework, it’s called <a href="http://www.webnoir.org/">Noir</a>. This framework is very small, so small that their developers call it micro-framework, that’s why I’m calling this tutorial micro-tutorial. Probably we shouldn’t even call it framework at all, library would probably be a better name. The closest analog to Noir in other languages I know is probably <a href="http://wiki.basho.com/Webmachine.html">Webmachine</a> in Erlang, or Spring MVC in Java. I wouldn’t compare it to Grails or Rails because those things are huge.</p>

<p>Noir is not only small, it’s also simple. You can look at their source code and understand how it works without any problem, provided you have some experience with Clojure. As a result, Noir is a perfect tool for the problem we are going to solve.</p>

<p>Without further ado let’s see how Noir works. The easiest way to set up a scaffolding of our future application is by using <a href="http://leiningen.org/">Leiningen</a>. Leiningen is a Clojure build tool, very similar to Maven. In Maven you would do mvn archetype:generate, in Leiningen you run</p>

<pre><code>$ lein new noir bookshelf
</code></pre>

<p>where bookshelf is the name of our application. This creates a directory called bookshelf where you can find some Noir template files, plus Leiningen project descriptor</p>

<pre><code>/.gitignore
/project.clj
/README.md
/resources/public/css/
/resources/public/css/reset.css
/resources/public/img/
/resources/public/js/
/src/bookshelf/models/
/src/bookshelf/server.clj
/src/bookshelf/views/common.clj
/src/bookshelf/views/welcome.clj
/test/bookshelf/
</code></pre>

<p>You can ignore <em>.gitignore</em>, it’s already configured properly. Before we make our initial checkin, it’s a good practice to edit project.clj and README.md to replace FIXME’s. We will edit README file again later when we finish the development to provide more information on how to use the application. Before we move to Noir, let’s quickly review project.clj file</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>project.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defproject </span><span class="nv">bookshelf</span> <span class="s">&quot;0.1.0-SNAPSHOT&quot;</span>
</span><span class="line">  <span class="ss">:description</span> <span class="s">&quot;Bookshelf site&quot;</span>
</span><span class="line">  <span class="ss">:dependencies</span> <span class="p">[[</span><span class="nv">org.clojure/clojure</span> <span class="s">&quot;1.4.0&quot;</span><span class="p">]</span>
</span><span class="line">                 <span class="p">[</span><span class="nv">noir</span> <span class="s">&quot;1.3.0-beta3&quot;</span><span class="p">]]</span>
</span><span class="line">  <span class="ss">:main</span> <span class="nv">bookshelf.server</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>project.clj</em> is a Clojure version of pom.xml (in fact, you can use pom.xml if you want, Clojure perfectly understands it). First two lines are obvious. Dependency entry specifies which JAR files we need to make our application work. In our case we only need two JARs. Leiningen will check Maven central repository as well as <a href="https://clojars.org/">Clojars</a> to download the required JARs with all transitive dependencies. The last line in the project descriptor says which namespace contains the main method. In our case it is <code>bookshelf.server</code>. You can find the source of this namespace in <em>/src/bookshelf/server.clj</em> file. Let’s take a look at this file</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>/src/bookshelf/server.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">ns </span><span class="nv">bookshelf.server</span>
</span><span class="line">  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">noir.server</span> <span class="ss">:as</span> <span class="nv">server</span><span class="p">]))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nf">server/load-views-ns</span> <span class="ss">&#39;bookshelf.views</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">-main</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">m</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">mode</span> <span class="p">(</span><span class="nb">keyword </span><span class="p">(</span><span class="nb">or </span><span class="p">(</span><span class="nb">first </span><span class="nv">m</span><span class="p">)</span> <span class="ss">:dev</span><span class="p">))</span>
</span><span class="line">        <span class="nv">port</span> <span class="p">(</span><span class="nf">Integer.</span> <span class="p">(</span><span class="nb">get </span><span class="p">(</span><span class="nf">System/getenv</span><span class="p">)</span> <span class="s">&quot;PORT&quot;</span> <span class="s">&quot;8080&quot;</span><span class="p">))]</span>
</span><span class="line">    <span class="p">(</span><span class="nf">server/start</span> <span class="nv">port</span> <span class="p">{</span><span class="ss">:mode</span> <span class="nv">mode</span>
</span><span class="line">                        <span class="ss">:ns</span> <span class="ss">&#39;bookshelf</span><span class="p">})))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>server/load-views-ns</code> specifies the prefixes of the view namespaces that will be loaded by Noir server. In our case those namespaces start with <code>bookshelf.views</code>. By default Leiningen generates two view files: <em>/bookshelf/views/common.clj</em> and <em>/bookshelf/views/welcome.clj</em>, but you can create more if your project becomes more complex. Since Noir scans namespaces by prefixes, you can even put your files in the nested directories under <em>/bookshelf/views</em>, no changes in <em>server.clj</em> required.</p>

<p>To start Noir server, run</p>

<pre><code>$ lein run
</code></pre>

<p>This will start Jetty web server bound to localhost at port 8080. If you want to change the default port, say to 3030, run the following command</p>

<pre><code>$ export PORT=3030; lein run
</code></pre>

<p>Besides port, you can specify few other parameters such as :mode, :jetty-options, etc. (you can see all available options in the server <a href="https://github.com/noir-clojure/noir/blob/master/src/noir/server.clj">source</a>). I’ll show below how to specify production mode, for example, when we deploy the final application.</p>

<p>If you started the server with the default port, open your browser at <a href="http://localhost:8080/">http://localhost:8080</a>. You should see the Noir’s start page</p>

<p><img class="center" src="http://blog.ndpar.com/images/posts/bookshelf3.png" /></p>

<p>This page by itself contains all you need to get started with Noir, so you can safely stop reading this article, and just follow the instructions on that page. Those who continue reading this tutorial and wondering where that start page is coming from, please open <em>/src/bookshelf/views/welcome.clj</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>/src/bookshelf/views/welcome.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">ns </span><span class="nv">bookshelf.views.welcome</span>
</span><span class="line">  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">bookshelf.views.common</span> <span class="ss">:as</span> <span class="nv">common</span><span class="p">]</span>
</span><span class="line">            <span class="p">[</span><span class="nv">noir.content.getting-started</span><span class="p">])</span>
</span><span class="line">  <span class="p">(</span><span class="ss">:use</span> <span class="p">[</span><span class="nv">noir.core</span> <span class="ss">:only</span> <span class="p">[</span><span class="nv">defpage</span><span class="p">]]))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nf">defpage</span> <span class="s">&quot;/welcome&quot;</span> <span class="p">[]</span>
</span><span class="line">  <span class="p">(</span><span class="nf">common/layout</span>
</span><span class="line">    <span class="p">[</span><span class="ss">:p</span> <span class="s">&quot;Welcome to bookshelf&quot;</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Third line tells us that the source of the start page is in <em>noir/content/getting-started.clj</em> file. If you are curious where this file is, look <a href="https://github.com/noir-clojure/noir/blob/master/src/noir/content/getting_started.clj">here</a>. Search for <code>(defpage "/" [] …)</code> to see how the start page is defined. On your web-site you probably want the start page to be different, so you can remove <code>[noir.content.getting-started]</code> from <code>:require</code> section.</p>

<p>The next thing to notice on the snippet above is <code>(defpage "/welcome" [] …)</code> function. That’s how you define URL mappings (or routes, in Noir lingo) of your web-site. (Internally, Noir uses <a href="https://github.com/weavejester/compojure">Compojure</a> library to handle the routing.) It is similar to @RequestMapping annotations in Spring-MVC, where you specify which method is called when a user hits the given URL. As you can see, we have only one mapping at the moment, <code>/welcome</code>. Since we are building bookshelf application, let’s rename it to <code>/books</code>. Also, to be even more explicit, let’s rename the whole file to <em>books.clj</em>. Don’t forget to update the namespace. Your <em>books.clj</em> file should now look like this</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>/src/bookshelf/views/books.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">ns </span><span class="nv">bookshelf.views.books</span>
</span><span class="line">  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">bookshelf.views.common</span> <span class="ss">:as</span> <span class="nv">common</span><span class="p">])</span>
</span><span class="line">  <span class="p">(</span><span class="ss">:use</span> <span class="p">[</span><span class="nv">noir.core</span> <span class="ss">:only</span> <span class="p">[</span><span class="nv">defpage</span><span class="p">]]))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nf">defpage</span> <span class="s">&quot;/books&quot;</span> <span class="p">[]</span>
</span><span class="line">  <span class="p">(</span><span class="nf">common/layout</span>
</span><span class="line">    <span class="p">[</span><span class="ss">:p</span> <span class="s">&quot;Welcome to bookshelf&quot;</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If you go to <a href="http://localhost:8080/books">http://localhost:8080/books</a> in your browser, you should see this screen</p>

<p><img class="center" src="http://blog.ndpar.com/images/posts/bookshelf4.png" /></p>

<p>By looking at the source of this page, you find it a proper HTML with head and body elements. Those are generated by <a href="https://github.com/weavejester/hiccup">Hiccup</a> library, which we’ll discuss in a moment. One thing I want to mention about defpage is that you can get the same result if you change <code>/books</code> route definition as follows</p>

<pre><code>(defpage "/books" []
  "&lt;html&gt;
     &lt;head&gt;
       &lt;title&gt;bookshelf&lt;/title&gt;
     &lt;/head&gt;
     &lt;body&gt;
       &lt;p&gt;Welcome to bookshelf&lt;/p&gt;
     &lt;/body&gt;
   &lt;/html&gt;")
</code></pre>

<p>It is just a theoretical exercise, in reality nobody hard-codes the entire HTML inside the Clojure code.</p>

<p>Now let’s take look at how the page content is generated. If you look at the routing definition in <em>books.clj</em>, you see that the body of <code>defpage</code> function is a call to <code>layout</code> function defined in <em>/src/bookshelf/views/common.clj</em>. Let’s open this file</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>/src/bookshelf/views/common.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">ns </span><span class="nv">bookshelf.views.common</span>
</span><span class="line">  <span class="p">(</span><span class="ss">:use</span> <span class="p">[</span><span class="nv">noir.core</span> <span class="ss">:only</span> <span class="p">[</span><span class="nv">defpartial</span><span class="p">]]</span>
</span><span class="line">        <span class="p">[</span><span class="nv">hiccup.page</span> <span class="ss">:only</span> <span class="p">[</span><span class="nv">include-css</span> <span class="nv">html5</span><span class="p">]]))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nf">defpartial</span> <span class="nv">layout</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">content</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nf">html5</span>
</span><span class="line">    <span class="p">[</span><span class="ss">:head</span>
</span><span class="line">     <span class="p">[</span><span class="ss">:title</span> <span class="s">&quot;bookshelf&quot;</span><span class="p">]</span>
</span><span class="line">     <span class="p">(</span><span class="nf">include-css</span> <span class="s">&quot;/css/reset.css&quot;</span><span class="p">)]</span>
</span><span class="line">    <span class="p">[</span><span class="ss">:body</span>
</span><span class="line">     <span class="p">[</span><span class="ss">:div#wrapper</span>
</span><span class="line">      <span class="nv">content</span><span class="p">]]))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>layout</code> is just a wrapper on top of <code>hiccup.core/html</code> function. Hiccup is an XML/HTML rendering library in Clojure. The idea behind it is pretty simple: You build a tree using Clojure vectors, and Hiccup transforms it to a valid HTML. If you are familiar with Groovy MarkupBuilder, it’s the same idea. For example, let’s define a couple of trees: head and body</p>

<pre><code>(def head
  [:head
   [:title "bookshelf"]])
(def body
  [:body
   [:div
    [:p "Welcome to bookshelf"]]])
</code></pre>

<p>Here is what you see in REPL when it evaluates different Hiccup HTML formats (I pretty formatted them for visibility purposes)</p>

<pre><code>(hiccup.page/html5 head body)
;=&gt; "&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;bookshelf&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div&gt;&lt;p&gt;Welcome to bookshelf&lt;/p&gt;&lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;"

(hiccup.page/html4 head body)
;=&gt; "&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;bookshelf&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div&gt;&lt;p&gt;Welcome to bookshelf&lt;/p&gt;&lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;"

(hiccup.page/xhtml head body)
;=&gt; "&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"&gt;
&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;
  &lt;head&gt;
    &lt;title&gt;bookshelf&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div&gt;&lt;p&gt;Welcome to bookshelf&lt;/p&gt;&lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;"
</code></pre>

<p>Noir’s default format is html5, the first example above. You can change it to any other format if needed.</p>

<p>The last piece of <em>common.clj</em> I want to mention is <code>(include-css "/css/reset.css")</code>. This is another function from Hiccup library. It generates <code>&lt;link href="http://blog.ndpar.com/css/reset.css" rel="stylesheet" type="text/css"&gt;</code> element and inserts it in the <code>head</code> element of the page. If you recall the scaffolding we generated at the beginning, there is a directory called <em>/resources/public</em> where Noir keeps CSS files, JavaScript, and images required by your web-site. By default Noir creates <em>reset.css</em> in the corresponding subdirectory. Later we’ll create other stylesheets and update <em>common.clj</em> appropriately.</p>

<p>Now, after we covered all the basics, we are ready to build our application.</p>

<h2 id="controller-and-view">Controller and View</h2>

<p>Let’s build our view and controller first. While doing that we’ll figure out what data we need from the back-end. That’s called top-down design.</p>

<p>We define controllers and views in <em>books.clj</em> file. For now I also include the model in this file. We’ll move it to a proper namespace later when we are done with the front-end. Here is the new version of <em>books.clj</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>/src/bookshelf/views/books.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">ns </span><span class="nv">bookshelf.views.books</span>
</span><span class="line">  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">bookshelf.views.common</span> <span class="ss">:as</span> <span class="nv">common</span><span class="p">])</span>
</span><span class="line">  <span class="p">(</span><span class="ss">:use</span> <span class="p">[</span><span class="nv">noir.core</span> <span class="ss">:only</span> <span class="p">[</span><span class="nv">defpage</span><span class="p">]]</span>
</span><span class="line">        <span class="p">[</span><span class="nv">hiccup.element</span> <span class="ss">:only</span> <span class="p">[</span><span class="nv">link-to</span><span class="p">]]))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">books</span> <span class="p">[]</span>
</span><span class="line">  <span class="p">[{</span><span class="ss">:author</span> <span class="s">&quot;Fogus M., Houser C.&quot;</span>
</span><span class="line">    <span class="ss">:title</span> <span class="s">&quot;The Joy Of Clojure&quot;</span>
</span><span class="line">    <span class="ss">:year</span> <span class="s">&quot;2011&quot;</span>
</span><span class="line">    <span class="ss">:format</span> <span class="s">&quot;pdf&quot;</span>
</span><span class="line">    <span class="ss">:id</span> <span class="mi">1</span><span class="p">}</span>
</span><span class="line">   <span class="p">{</span><span class="ss">:author</span> <span class="s">&quot;Fogus M., Houser C.&quot;</span>
</span><span class="line">    <span class="ss">:title</span> <span class="s">&quot;The Joy Of Clojure&quot;</span>
</span><span class="line">    <span class="ss">:year</span> <span class="s">&quot;2011&quot;</span>
</span><span class="line">    <span class="ss">:format</span> <span class="s">&quot;epub&quot;</span>
</span><span class="line">    <span class="ss">:id</span> <span class="mi">2</span><span class="p">}])</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="kd">defn- </span><span class="nv">list-books</span> <span class="p">[]</span>
</span><span class="line">  <span class="p">[</span><span class="ss">:table</span>
</span><span class="line">   <span class="p">[</span><span class="ss">:thead</span>
</span><span class="line">    <span class="p">[</span><span class="ss">:tr</span>
</span><span class="line">     <span class="p">[</span><span class="ss">:th</span> <span class="s">&quot;Author&quot;</span><span class="p">]</span>
</span><span class="line">     <span class="p">[</span><span class="ss">:th</span> <span class="s">&quot;Title&quot;</span><span class="p">]</span>
</span><span class="line">     <span class="p">[</span><span class="ss">:th</span> <span class="s">&quot;Published&quot;</span><span class="p">]</span>
</span><span class="line">     <span class="p">[</span><span class="ss">:th</span> <span class="s">&quot;Format&quot;</span><span class="p">]]]</span>
</span><span class="line">   <span class="p">(</span><span class="nb">into </span><span class="p">[</span><span class="ss">:tbody</span><span class="p">]</span>
</span><span class="line">         <span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">book</span> <span class="p">(</span><span class="nf">books</span><span class="p">)]</span>
</span><span class="line">           <span class="p">[</span><span class="ss">:tr</span>
</span><span class="line">            <span class="p">[</span><span class="ss">:td</span> <span class="p">(</span><span class="ss">:author</span> <span class="nv">book</span><span class="p">)]</span>
</span><span class="line">            <span class="p">[</span><span class="ss">:td</span> <span class="p">(</span><span class="ss">:title</span> <span class="nv">book</span><span class="p">)]</span>
</span><span class="line">            <span class="p">[</span><span class="ss">:td</span> <span class="p">(</span><span class="ss">:year</span> <span class="nv">book</span><span class="p">)]</span>
</span><span class="line">            <span class="p">[</span><span class="ss">:td</span> <span class="p">(</span><span class="nf">link-to</span> <span class="p">(</span><span class="nf">clojure.string/join</span> <span class="s">&quot;/&quot;</span> <span class="p">[</span><span class="s">&quot;/books&quot;</span> <span class="p">(</span><span class="ss">:id</span> <span class="nv">book</span><span class="p">)</span> <span class="p">(</span><span class="ss">:format</span> <span class="nv">book</span><span class="p">)])</span>
</span><span class="line">                          <span class="p">(</span><span class="ss">:format</span> <span class="nv">book</span><span class="p">))]]))])</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nf">defpage</span> <span class="s">&quot;/books&quot;</span> <span class="p">[]</span>
</span><span class="line">  <span class="p">(</span><span class="nf">common/layout</span>
</span><span class="line">    <span class="p">(</span><span class="nf">list-books</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>There are three functions in this file: <code>books</code> (model), <code>list-books</code> (view), and <code>/books</code> (controller/router). The controller is essentially the same as before and the model is simply a vector of maps. Each map contains the same keys as column names on the book table. View might look complicated, but there shouldn’t be any surprise here either — it’s again an ordinary tree. The only new element here is <code>link-to</code> function defined in <code>hiccup.element</code> namespace. We could really build it directly using <code>[:a {:href …}]</code> vector, but link-to is a standard way to do it in Hiccup.</p>

<p>If you refresh <a href="http://localhost:8080/books">http://localhost:8080/books</a> now (Leiningen/Jetty supports hot redeployment), you will see this screen</p>

<p><img class="center" src="http://blog.ndpar.com/images/posts/bookshelf5.png" /></p>

<p>The important part of the view function is the format of the links. For the current book model the links are <a href="http://localhost:8080/books/1/pdf">http://localhost:8080/books/1/pdf</a> and <a href="http://localhost:8080/books/2/epub">http://localhost:8080/books/2/epub</a>. You can verify it by hovering the mouse over them. Those links are actually the main goal of our application. By clicking the link I want to load (or download) the book into the browser and read it. To implement this feature add the following functions to <em>books.clj</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>/src/bookshelf/views/books.clj (cont&#8217;d) </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">get-file</span> <span class="p">[</span><span class="nv">id</span><span class="p">]</span>
</span><span class="line">  <span class="nv">nil</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="kd">defn- </span><span class="nv">ctype</span> <span class="p">[</span><span class="nv">format</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="s">&quot;pdf&quot;</span> <span class="nv">format</span><span class="p">)</span> <span class="s">&quot;application/pdf&quot;</span> <span class="s">&quot;text/plain&quot;</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nf">defpage</span> <span class="s">&quot;/books/:id/:format&quot;</span> <span class="p">{</span><span class="ss">:keys</span> <span class="p">[</span><span class="nv">id</span> <span class="nv">format</span><span class="p">]}</span>
</span><span class="line">  <span class="p">(</span><span class="nf">content-type</span> <span class="p">(</span><span class="nf">ctype</span> <span class="nv">format</span><span class="p">)</span> <span class="p">(</span><span class="nf">java.io.ByteArrayInputStream.</span> <span class="p">(</span><span class="nf">get-file</span> <span class="nv">id</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ignore for a moment <code>get-file</code> function — it does nothing. Later we will move it to model namespace and implement it properly, but we need some placeholder now to compile the application. ctype is a helper function that maps the file format to HTTP content type. I have three ebook formats in my library: ePub, Mobi, and PDF. The first two are plain text formats from HTTP content type perspective. Only PDF requires special type.</p>

<p>The interesting part of the snippet is the controller definition. If you ever implemented REST in Spring MVC, you should see the familiar pattern here. Like Spring, Noir (via Compojure) supports path variables. If you click on <a href="http://localhost:8080/books/1/pdf">http://localhost:8080/books/1/pdf</a> link in the browser, Noir calls the corresponding controller and binds <code>id</code> variable to “1” and <code>format</code> variable to “pdf”. When we implement <code>get-file</code> function, it should return the file with the given id as an array of bytes. Controller then wraps the array into a stream, and Noir pushes it to HTTP response. <code>content-type</code> function is defined in <em>noir.response</em> namespace, so we need to add <code>[noir.response :only [content-type]]</code> to <code>:use</code> section at the top of <em>books.clj</em>.</p>

<p>That’s it, in terms of functionality the controller and the view of our application are done.</p>

<h2 id="model">Model</h2>

<p>Now we need to extract the logic that creates a model from presentation tier to middle-tier. In Noir that’s what models directory is for. In our case it’s <em>/src/bookshelf/models</em>. Let’s create a file called <em>db.clj</em> in that directory, and move there books and <code>get-file</code> functions from <em>bookshelf.views.books</em> namespace. We have to update <em>books.clj</em> to load the new namespace. It should now look like this</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>/src/bookshelf/views/books.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">ns </span><span class="nv">bookshelf.views.books</span>
</span><span class="line">  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">bookshelf.models.db</span> <span class="ss">:as</span> <span class="nv">db</span><span class="p">]</span>
</span><span class="line">            <span class="p">[</span><span class="nv">bookshelf.views.common</span> <span class="ss">:as</span> <span class="nv">common</span><span class="p">])</span>
</span><span class="line">  <span class="p">(</span><span class="ss">:use</span> <span class="p">[</span><span class="nv">noir.core</span> <span class="ss">:only</span> <span class="p">[</span><span class="nv">defpage</span><span class="p">]]</span>
</span><span class="line">        <span class="p">[</span><span class="nv">noir.response</span> <span class="ss">:only</span> <span class="p">[</span><span class="nv">content-type</span><span class="p">]]</span>
</span><span class="line">        <span class="p">[</span><span class="nv">hiccup.element</span> <span class="ss">:only</span> <span class="p">[</span><span class="nv">link-to</span><span class="p">]]))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="kd">defn- </span><span class="nv">list-books</span> <span class="p">[]</span>
</span><span class="line">  <span class="p">[</span><span class="ss">:table</span>
</span><span class="line">   <span class="p">[</span><span class="ss">:thead</span>
</span><span class="line">    <span class="p">[</span><span class="ss">:tr</span>
</span><span class="line">     <span class="p">[</span><span class="ss">:th</span> <span class="s">&quot;Author&quot;</span><span class="p">]</span>
</span><span class="line">     <span class="p">[</span><span class="ss">:th</span> <span class="s">&quot;Title&quot;</span><span class="p">]</span>
</span><span class="line">     <span class="p">[</span><span class="ss">:th</span> <span class="s">&quot;Published&quot;</span><span class="p">]</span>
</span><span class="line">     <span class="p">[</span><span class="ss">:th</span> <span class="s">&quot;Format&quot;</span><span class="p">]]]</span>
</span><span class="line">   <span class="p">(</span><span class="nb">into </span><span class="p">[</span><span class="ss">:tbody</span><span class="p">]</span>
</span><span class="line">         <span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">book</span> <span class="p">(</span><span class="nf">db/books</span><span class="p">)]</span>
</span><span class="line">           <span class="p">[</span><span class="ss">:tr</span>
</span><span class="line">            <span class="p">[</span><span class="ss">:td</span> <span class="p">(</span><span class="ss">:author</span> <span class="nv">book</span><span class="p">)]</span>
</span><span class="line">            <span class="p">[</span><span class="ss">:td</span> <span class="p">(</span><span class="ss">:title</span> <span class="nv">book</span><span class="p">)]</span>
</span><span class="line">            <span class="p">[</span><span class="ss">:td</span> <span class="p">(</span><span class="ss">:year</span> <span class="nv">book</span><span class="p">)]</span>
</span><span class="line">            <span class="p">[</span><span class="ss">:td</span> <span class="p">(</span><span class="nf">link-to</span> <span class="p">(</span><span class="nf">clojure.string/join</span> <span class="s">&quot;/&quot;</span> <span class="p">[</span><span class="s">&quot;/books&quot;</span> <span class="p">(</span><span class="ss">:id</span> <span class="nv">book</span><span class="p">)</span> <span class="p">(</span><span class="ss">:format</span> <span class="nv">book</span><span class="p">)])</span>
</span><span class="line">                          <span class="p">(</span><span class="ss">:format</span> <span class="nv">book</span><span class="p">))]]))])</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nf">defpage</span> <span class="s">&quot;/books&quot;</span> <span class="p">[]</span>
</span><span class="line">  <span class="p">(</span><span class="nf">common/layout</span>
</span><span class="line">    <span class="p">(</span><span class="nf">list-books</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="kd">defn- </span><span class="nv">ctype</span> <span class="p">[</span><span class="nv">format</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="s">&quot;pdf&quot;</span> <span class="nv">format</span><span class="p">)</span> <span class="s">&quot;application/pdf&quot;</span> <span class="s">&quot;text/plain&quot;</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nf">defpage</span> <span class="s">&quot;/books/:id/:format&quot;</span> <span class="p">{</span><span class="ss">:keys</span> <span class="p">[</span><span class="nv">id</span> <span class="nv">format</span><span class="p">]}</span>
</span><span class="line">  <span class="p">(</span><span class="nf">content-type</span> <span class="p">(</span><span class="nf">ctype</span> <span class="nv">format</span><span class="p">)</span> <span class="p">(</span><span class="nf">java.io.ByteArrayInputStream.</span> <span class="p">(</span><span class="nf">db/get-file</span> <span class="nv">id</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If you refresh your browser, nothing should change.</p>

<p>All right, now it’s time to implement our model properly. Recall that our model should scan the directory it’s running in for the files with the format Author-Title-Year.FileFormat, and convert each of those files to byte array. Here is how I implemented it</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>/src/bookshelf/models/db.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">ns </span><span class="nv">bookshelf.models.db</span>
</span><span class="line">  <span class="p">(</span><span class="ss">:use</span> <span class="p">[</span><span class="nv">clojure.java.shell</span> <span class="ss">:only</span> <span class="p">(</span><span class="nf">sh</span><span class="p">)]))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="kd">defn- </span><span class="nv">list-files</span> <span class="p">[</span><span class="nv">dir</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nf">clojure.string/split</span> <span class="p">(</span><span class="ss">:out</span> <span class="p">(</span><span class="nf">sh</span> <span class="s">&quot;ls&quot;</span> <span class="nv">dir</span><span class="p">))</span> <span class="o">#</span><span class="s">&quot;\n&quot;</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="kd">defn- </span><span class="nb">parse </span><span class="p">[</span><span class="nv">file</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">when-let </span><span class="p">[</span><span class="nv">match</span> <span class="p">(</span><span class="nb">re-matches </span><span class="o">#</span><span class="s">&quot;([^-]+)-([^-]+)-(\d+)\.(\S+)&quot;</span> <span class="nv">file</span><span class="p">)]</span>
</span><span class="line">    <span class="p">(</span><span class="nb">zipmap </span><span class="p">[</span><span class="ss">:file</span> <span class="ss">:author</span> <span class="ss">:title</span> <span class="ss">:year</span> <span class="ss">:format</span><span class="p">]</span> <span class="nv">match</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="kd">defn- </span><span class="nv">add-id</span> <span class="p">[</span><span class="nv">book</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">assoc </span><span class="nv">book</span> <span class="ss">:id</span> <span class="p">(</span><span class="nf">clojure.string/replace</span> <span class="p">(</span><span class="ss">:file</span> <span class="nv">book</span><span class="p">)</span> <span class="o">#</span><span class="s">&quot;[., ]&quot;</span> <span class="s">&quot;&quot;</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">books</span> <span class="p">[]</span>
</span><span class="line">  <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="p">(</span><span class="nf">list-files</span> <span class="s">&quot;.&quot;</span><span class="p">)</span> <span class="p">(</span><span class="nb">map </span><span class="nv">parse</span><span class="p">)</span> <span class="p">(</span><span class="nb">remove </span><span class="nv">nil?</span><span class="p">)</span> <span class="p">(</span><span class="nb">map </span><span class="nv">add-id</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="kd">defn- </span><span class="nv">file</span> <span class="p">[</span><span class="nv">id</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">mapping</span> <span class="p">(</span><span class="nb">into </span><span class="p">{}</span> <span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">b</span> <span class="p">(</span><span class="nf">books</span><span class="p">)]</span> <span class="p">[(</span><span class="ss">:id</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="ss">:file</span> <span class="nv">b</span><span class="p">)]))]</span>
</span><span class="line">    <span class="p">(</span><span class="nb">get </span><span class="nv">mapping</span> <span class="nv">id</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">get-file</span> <span class="p">[</span><span class="nv">id</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nb">with-open </span><span class="p">[</span><span class="nv">input</span>  <span class="p">(</span><span class="nf">java.io.FileInputStream.</span> <span class="p">(</span><span class="nf">file</span> <span class="nv">id</span><span class="p">))</span>
</span><span class="line">              <span class="nv">buffer</span> <span class="p">(</span><span class="nf">java.io.ByteArrayOutputStream.</span><span class="p">)]</span>
</span><span class="line">    <span class="p">(</span><span class="nf">clojure.java.io/copy</span> <span class="nv">input</span> <span class="nv">buffer</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nf">.toByteArray</span> <span class="nv">buffer</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Let’s take a look what each of the functions does. Function <code>list-files</code> returns a vector of file names that reside in the given directory <code>dir</code>. To find all files in the directory I’m using <code>clojure.java.shell/sh</code> function which executes <code>ls</code> command. This works fine on Linux and Mac, but probalby doesn’t on Windows. Function <code>parse</code> checks if the given file name has the required format. If so, it returns a map <code>{:file file, :author Author, :title Title, :year Year, :format FileFormat}</code>, otherwise it returns <code>nil</code>. <code>add-id</code> function removes dots, commas, and spaces from the file name and add the result as a book ID to the book map. Function <code>books</code> is just a composition of those three functions, and it returns the result expected by the view.</p>

<p>Function <code>file</code> returns the file by given ID. The implementation above is not efficient, but my library is too small to notice any performance issues. Finally, <code>get-file</code> function finds the file by ID and returns it as a byte array. Those four lines is a pretty standard idiom which you can find in many Clojure source files.</p>

<p>Now we are ready to test our application. For testing purposes I’m going to copy a couple of e-books I recently received updates for to the project home directory. The content of this directory looks like this</p>

<pre><code>.gitignore
README.md
Thomas D.-Programming Ruby 1.9-2010.epub
Thomas D.-Programming Ruby 1.9-2010.pdf
project.clj
resources
src
test
</code></pre>

<p>I refresh my browser and here I can see these two books</p>

<p><img class="center" src="http://blog.ndpar.com/images/posts/bookshelf6.png" /></p>

<p>If I click on pdf, I can read the book in my browser</p>

<p><img class="center" src="http://blog.ndpar.com/images/posts/bookshelf7.png" /></p>

<p>OK, the application is functional. The next step is to make it little bit prettier.</p>

<h2 id="styling">Styling</h2>

<p>Since our application is written in Noir framework, let’s make it look like Noir. First, I downloaded Noir background <a href="http://www.webnoir.org/img/bg.png">image</a> and save it to <em>/resources/public/img</em> directory. Second, I created a stylesheet <em>/resources/public/css/noir.css</em> which resembles Noir’s original</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>/resources/public/css/noir.css </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="css"><span class="line"><span class="nt">body</span> <span class="p">{</span>
</span><span class="line">    <span class="k">background</span><span class="o">:</span> <span class="m">#2a2b2b</span><span class="p">;</span>
</span><span class="line">    <span class="k">color</span><span class="o">:</span> <span class="m">#d1d9e1</span><span class="p">;</span>
</span><span class="line">    <span class="k">background</span><span class="o">:</span> <span class="sx">url(&#39;/img/bg.png&#39;)</span><span class="p">;</span>
</span><span class="line">    <span class="k">padding</span><span class="o">:</span> <span class="m">60px</span> <span class="m">60px</span><span class="p">;</span>
</span><span class="line">    <span class="k">font-family</span><span class="o">:</span> <span class="s1">&#39;Helvetica Neue&#39;</span><span class="o">,</span><span class="n">Helvetica</span><span class="o">,</span><span class="n">Verdana</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nt">a</span> <span class="p">{</span>
</span><span class="line">    <span class="k">text-decoration</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class="line">    <span class="k">color</span><span class="o">:</span> <span class="m">#d1d9e1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nt">a</span><span class="nd">:hover</span> <span class="p">{</span>
</span><span class="line">    <span class="k">color</span><span class="o">:</span> <span class="m">#6bffbd</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nt">h1</span> <span class="p">{</span>
</span><span class="line">    <span class="k">color</span><span class="o">:</span> <span class="m">#6bffbd</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then I updated <em>bookshelf.views.common</em> namespace to include new CSS</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>/src/bookshelf/views/common.clj (cont&#8217;d) </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">defpartial</span> <span class="nv">layout</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">content</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nf">html5</span>
</span><span class="line">    <span class="p">[</span><span class="ss">:head</span>
</span><span class="line">     <span class="p">[</span><span class="ss">:title</span> <span class="s">&quot;Bookshelf&quot;</span><span class="p">]</span>
</span><span class="line">     <span class="p">(</span><span class="nf">include-css</span> <span class="s">&quot;/css/reset.css&quot;</span><span class="p">)</span>
</span><span class="line">     <span class="p">(</span><span class="nf">include-css</span> <span class="s">&quot;/css/noir.css&quot;</span><span class="p">)]</span>
</span><span class="line">    <span class="p">[</span><span class="ss">:body</span>
</span><span class="line">     <span class="p">[</span><span class="ss">:div#wrapper</span>
</span><span class="line">      <span class="nv">content</span><span class="p">]]))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Finally, I want to add a header to the page in <em>bookshelf.views.books</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>/src/bookshelf/views/books.clj (cont&#8217;d) </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nf">defpage</span> <span class="s">&quot;/books&quot;</span> <span class="p">[]</span>
</span><span class="line">  <span class="p">(</span><span class="nf">common/layout</span>
</span><span class="line">    <span class="p">[</span><span class="ss">:h1</span> <span class="s">&quot;Books&quot;</span><span class="p">]</span>
</span><span class="line">    <span class="p">(</span><span class="nf">list-books</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Refresh books web page on the browser to see the changes</p>

<p><img class="center" src="http://blog.ndpar.com/images/posts/bookshelf8.png" /></p>

<p>The last thing left unstyled is the book table. I won’t style it directly, because I want to add client-side sorting to it, and I happen to know that TableSorter JavaScript library provides its own style.</p>

<h2 id="javascript">JavaScript</h2>

<p>TableSorter is a jQuery plugin, so you need to download jQuery first. Grab the latest <a href="http://code.jquery.com/jquery-1.8.2.min.js">min</a> and save it to <em>/resources/public/js</em> directory. Then, download <a href="http://tablesorter.com/docs/#Download">tablesorter.zip</a> that contains both JavaScript and stylesheet files. As before, JavaScript goes to <em>/resources/public/js</em> and stylesheets go to <em>/resources/public/css</em> directory. Here is the resources directory structure I have after everything is saved</p>

<pre><code>resources/public/css/tablesorter/asc.gif
resources/public/css/tablesorter/bg.gif
resources/public/css/tablesorter/desc.gif
resources/public/css/tablesorter/style.css
resources/public/js/jquery-1.8.2.min.js
resources/public/js/jquery.tablesorter.js
</code></pre>

<p>If you are curious, here is my <em>style.css</em>. I changed the original tablesorter css a little bit to better fit Noir theme</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>/resources/public/css/style.css </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class="css"><span class="line"><span class="nt">table</span><span class="nc">.tablesorter</span> <span class="p">{</span>
</span><span class="line">    <span class="k">margin</span><span class="o">:</span><span class="m">10px</span> <span class="m">0pt</span> <span class="m">15px</span><span class="p">;</span>
</span><span class="line">    <span class="k">font-size</span><span class="o">:</span> <span class="m">10pt</span><span class="p">;</span>
</span><span class="line">    <span class="k">width</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
</span><span class="line">    <span class="k">text-align</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nt">table</span><span class="nc">.tablesorter</span> <span class="nt">thead</span> <span class="nt">tr</span> <span class="nt">th</span><span class="o">,</span> <span class="nt">table</span><span class="nc">.tablesorter</span> <span class="nt">tfoot</span> <span class="nt">tr</span> <span class="nt">th</span> <span class="p">{</span>
</span><span class="line">    <span class="k">color</span><span class="o">:</span> <span class="m">#000000</span><span class="p">;</span>
</span><span class="line">    <span class="k">background-color</span><span class="o">:</span> <span class="m">#b0b8c0</span><span class="p">;</span>
</span><span class="line">    <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="m">#2a2b2b</span><span class="p">;</span>
</span><span class="line">    <span class="k">font-size</span><span class="o">:</span> <span class="m">10pt</span><span class="p">;</span>
</span><span class="line">    <span class="k">padding</span><span class="o">:</span> <span class="m">4px</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nt">table</span><span class="nc">.tablesorter</span> <span class="nt">thead</span> <span class="nt">tr</span> <span class="nc">.header</span> <span class="p">{</span>
</span><span class="line">    <span class="k">background-image</span><span class="o">:</span> <span class="sx">url(bg.gif)</span><span class="p">;</span>
</span><span class="line">    <span class="k">background-repeat</span><span class="o">:</span> <span class="k">no-repeat</span><span class="p">;</span>
</span><span class="line">    <span class="k">background-position</span><span class="o">:</span> <span class="k">center</span> <span class="k">right</span><span class="p">;</span>
</span><span class="line">    <span class="k">cursor</span><span class="o">:</span> <span class="k">pointer</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nt">table</span><span class="nc">.tablesorter</span> <span class="nt">tbody</span> <span class="nt">td</span> <span class="p">{</span>
</span><span class="line">    <span class="k">color</span><span class="o">:</span> <span class="m">#b0b8c0</span><span class="p">;</span>
</span><span class="line">    <span class="k">padding</span><span class="o">:</span> <span class="m">4px</span><span class="p">;</span>
</span><span class="line">    <span class="k">background-image</span><span class="o">:</span> <span class="sx">url(&#39;/img/bg.png&#39;)</span><span class="p">;</span>
</span><span class="line">    <span class="k">vertical-align</span><span class="o">:</span> <span class="k">top</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nt">table</span><span class="nc">.tablesorter</span> <span class="nt">tbody</span> <span class="nt">tr</span><span class="nc">.odd</span> <span class="nt">td</span> <span class="p">{</span>
</span><span class="line">    <span class="k">background-color</span><span class="o">:</span><span class="m">#F0F0F6</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nt">table</span><span class="nc">.tablesorter</span> <span class="nt">thead</span> <span class="nt">tr</span> <span class="nc">.headerSortUp</span> <span class="p">{</span>
</span><span class="line">    <span class="k">background-image</span><span class="o">:</span> <span class="sx">url(asc.gif)</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nt">table</span><span class="nc">.tablesorter</span> <span class="nt">thead</span> <span class="nt">tr</span> <span class="nc">.headerSortDown</span> <span class="p">{</span>
</span><span class="line">    <span class="k">background-image</span><span class="o">:</span> <span class="sx">url(desc.gif)</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nt">table</span><span class="nc">.tablesorter</span> <span class="nt">thead</span> <span class="nt">tr</span> <span class="nc">.headerSortDown</span><span class="o">,</span> <span class="nt">table</span><span class="nc">.tablesorter</span> <span class="nt">thead</span> <span class="nt">tr</span> <span class="nc">.headerSortUp</span> <span class="p">{</span>
</span><span class="line">    <span class="k">background-color</span><span class="o">:</span> <span class="m">#6bffbd</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To enable tablesorter we have to update both view files. Few changes in bookshelf.views.common</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>/src/bookshelf/views/common.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">ns </span><span class="nv">bookshelf.views.common</span>
</span><span class="line">  <span class="p">(</span><span class="ss">:use</span> <span class="p">[</span><span class="nv">noir.core</span> <span class="ss">:only</span> <span class="p">[</span><span class="nv">defpartial</span><span class="p">]]</span>
</span><span class="line">        <span class="p">[</span><span class="nv">hiccup.page</span> <span class="ss">:only</span> <span class="p">[</span><span class="nv">include-css</span> <span class="nv">include-js</span> <span class="nv">html5</span><span class="p">]]))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nf">defpartial</span> <span class="nv">layout</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">content</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="nf">html5</span>
</span><span class="line">    <span class="p">[</span><span class="ss">:head</span>
</span><span class="line">     <span class="p">[</span><span class="ss">:title</span> <span class="s">&quot;Bookshelf&quot;</span><span class="p">]</span>
</span><span class="line">     <span class="p">(</span><span class="nf">include-js</span> <span class="s">&quot;/js/jquery-1.8.2.min.js&quot;</span><span class="p">)</span>
</span><span class="line">     <span class="p">(</span><span class="nf">include-js</span> <span class="s">&quot;/js/jquery.tablesorter.js&quot;</span><span class="p">)</span>
</span><span class="line">     <span class="p">(</span><span class="nf">include-css</span> <span class="s">&quot;/css/reset.css&quot;</span><span class="p">)</span>
</span><span class="line">     <span class="p">(</span><span class="nf">include-css</span> <span class="s">&quot;/css/tablesorter/style.css&quot;</span><span class="p">)</span>
</span><span class="line">     <span class="p">(</span><span class="nf">include-css</span> <span class="s">&quot;/css/noir.css&quot;</span><span class="p">)]</span>
</span><span class="line">    <span class="p">[</span><span class="ss">:body</span>
</span><span class="line">     <span class="p">[</span><span class="ss">:div#wrapper</span>
</span><span class="line">      <span class="nv">content</span><span class="p">]]))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and few changes in <em>bookshelf.views.books</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>/src/bookshelf/views/books.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">ns </span><span class="nv">bookshelf.views.books</span>
</span><span class="line">  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">bookshelf.models.db</span> <span class="ss">:as</span> <span class="nv">db</span><span class="p">]</span>
</span><span class="line">            <span class="p">[</span><span class="nv">bookshelf.views.common</span> <span class="ss">:as</span> <span class="nv">common</span><span class="p">])</span>
</span><span class="line">  <span class="p">(</span><span class="ss">:use</span> <span class="p">[</span><span class="nv">noir.core</span> <span class="ss">:only</span> <span class="p">[</span><span class="nv">defpage</span><span class="p">]]</span>
</span><span class="line">        <span class="p">[</span><span class="nv">noir.response</span> <span class="ss">:only</span> <span class="p">[</span><span class="nv">content-type</span><span class="p">]]</span>
</span><span class="line">        <span class="p">[</span><span class="nv">hiccup.element</span> <span class="ss">:only</span> <span class="p">[</span><span class="nv">link-to</span> <span class="nv">javascript-tag</span><span class="p">]]))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="kd">defn- </span><span class="nv">list-books</span> <span class="p">[]</span>
</span><span class="line">  <span class="p">[</span><span class="ss">:table.tablesorter</span> <span class="p">{</span><span class="ss">:id</span> <span class="s">&quot;bookTable&quot;</span><span class="p">}</span>
</span><span class="line">   <span class="p">[</span><span class="ss">:thead</span>
</span><span class="line">    <span class="p">[</span><span class="ss">:tr</span>
</span><span class="line">     <span class="p">[</span><span class="ss">:th</span> <span class="s">&quot;Author&quot;</span><span class="p">]</span>
</span><span class="line">     <span class="p">[</span><span class="ss">:th</span> <span class="s">&quot;Title&quot;</span><span class="p">]</span>
</span><span class="line">     <span class="p">[</span><span class="ss">:th</span> <span class="s">&quot;Published&quot;</span><span class="p">]</span>
</span><span class="line">     <span class="p">[</span><span class="ss">:th</span> <span class="s">&quot;Format&quot;</span><span class="p">]]]</span>
</span><span class="line">   <span class="p">(</span><span class="nb">into </span><span class="p">[</span><span class="ss">:tbody</span><span class="p">]</span>
</span><span class="line">         <span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">book</span> <span class="p">(</span><span class="nf">db/books</span><span class="p">)]</span>
</span><span class="line">           <span class="p">[</span><span class="ss">:tr</span>
</span><span class="line">            <span class="p">[</span><span class="ss">:td</span> <span class="p">(</span><span class="ss">:author</span> <span class="nv">book</span><span class="p">)]</span>
</span><span class="line">            <span class="p">[</span><span class="ss">:td</span> <span class="p">(</span><span class="ss">:title</span> <span class="nv">book</span><span class="p">)]</span>
</span><span class="line">            <span class="p">[</span><span class="ss">:td</span> <span class="p">(</span><span class="ss">:year</span> <span class="nv">book</span><span class="p">)]</span>
</span><span class="line">            <span class="p">[</span><span class="ss">:td</span> <span class="p">(</span><span class="nf">link-to</span> <span class="p">(</span><span class="nf">clojure.string/join</span> <span class="s">&quot;/&quot;</span> <span class="p">[</span><span class="s">&quot;/books&quot;</span> <span class="p">(</span><span class="ss">:id</span> <span class="nv">book</span><span class="p">)</span> <span class="p">(</span><span class="ss">:format</span> <span class="nv">book</span><span class="p">)])</span>
</span><span class="line">                          <span class="p">(</span><span class="ss">:format</span> <span class="nv">book</span><span class="p">))]]))])</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nf">defpage</span> <span class="s">&quot;/books&quot;</span> <span class="p">[]</span>
</span><span class="line">  <span class="p">(</span><span class="nf">common/layout</span>
</span><span class="line">    <span class="p">[</span><span class="ss">:h1</span> <span class="s">&quot;Books&quot;</span><span class="p">]</span>
</span><span class="line">    <span class="p">(</span><span class="nf">javascript-tag</span> <span class="s">&quot;$(document).ready(function() {$(\&quot;#bookTable\&quot;).tablesorter();});&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nf">list-books</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="kd">defn- </span><span class="nv">ctype</span> <span class="p">[</span><span class="nv">format</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="s">&quot;pdf&quot;</span> <span class="nv">format</span><span class="p">)</span> <span class="s">&quot;application/pdf&quot;</span> <span class="s">&quot;text/plain&quot;</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nf">defpage</span> <span class="s">&quot;/books/:id/:format&quot;</span> <span class="p">{</span><span class="ss">:keys</span> <span class="p">[</span><span class="nv">id</span> <span class="nv">format</span><span class="p">]}</span>
</span><span class="line">  <span class="p">(</span><span class="nf">content-type</span> <span class="p">(</span><span class="nf">ctype</span> <span class="nv">format</span><span class="p">)</span> <span class="p">(</span><span class="nf">java.io.ByteArrayInputStream.</span> <span class="p">(</span><span class="nf">db/get-file</span> <span class="nv">id</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>After we refresh the browser, we should see the final design and be able to sort the table</p>

<p><img class="center" src="http://blog.ndpar.com/images/posts/bookshelf9.png" /></p>

<h2 id="ship-it">Ship it!</h2>

<p>OK, we are ready to ship. But before we build a deployable artifact, we, as professional developers, should update documentation (<a href="https://github.com/ndpar/bookshelf/blob/master/README.md">README.md</a> in our case) and finalize the version of the application</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>project.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">defproject </span><span class="nv">bookshelf</span> <span class="s">&quot;0.1.0&quot;</span>
</span><span class="line">  <span class="ss">:description</span> <span class="s">&quot;Bookshelf site&quot;</span>
</span><span class="line">  <span class="ss">:dependencies</span> <span class="p">[[</span><span class="nv">org.clojure/clojure</span> <span class="s">&quot;1.4.0&quot;</span><span class="p">]</span>
</span><span class="line">                 <span class="p">[</span><span class="nv">noir</span> <span class="s">&quot;1.3.0-beta3&quot;</span><span class="p">]]</span>
</span><span class="line">  <span class="ss">:main</span> <span class="nv">bookshelf.server</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I want to run this application as a a standalone Java web application, without any dependency on Leiningen. Therefore I have to add <code>:gen-class</code> to <em>server.clj</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>/src/bookshelf/server.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="kd">ns </span><span class="nv">bookshelf.server</span>
</span><span class="line">  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">noir.server</span> <span class="ss">:as</span> <span class="nv">server</span><span class="p">])</span>
</span><span class="line">  <span class="p">(</span><span class="ss">:gen-class</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nf">server/load-views-ns</span> <span class="ss">&#39;bookshelf.views</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">-main</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">m</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">mode</span> <span class="p">(</span><span class="nb">keyword </span><span class="p">(</span><span class="nb">or </span><span class="p">(</span><span class="nb">first </span><span class="nv">m</span><span class="p">)</span> <span class="ss">:dev</span><span class="p">))</span>
</span><span class="line">        <span class="nv">port</span> <span class="p">(</span><span class="nf">Integer.</span> <span class="p">(</span><span class="nb">get </span><span class="p">(</span><span class="nf">System/getenv</span><span class="p">)</span> <span class="s">&quot;PORT&quot;</span> <span class="s">&quot;8080&quot;</span><span class="p">))]</span>
</span><span class="line">    <span class="p">(</span><span class="nf">server/start</span> <span class="nv">port</span> <span class="p">{</span><span class="ss">:mode</span> <span class="nv">mode</span>
</span><span class="line">                        <span class="ss">:ns</span> <span class="ss">&#39;bookshelf</span><span class="p">})))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now package the application by running the following command</p>

<pre><code>$ lein uberjar
</code></pre>

<p>As a result of this command, <em>bookshelf-0.1.0-standalone.jar</em> artifact is created in the target directory. I scp this file to my server, to the directory where my books are located, and start the app</p>

<pre><code>$ export PORT=3030; nohup java -jar bookshelf-0.1.0-standalone.jar prod &gt; nohup.out 2&gt;&amp;1 &amp;
</code></pre>

<p>And that’s basically it. We have created a simplest web application in Clojure, which might be useful by its own. But more importantly, you’ve learned <em>how</em> to build it. I hope you enjoyed reading this tutorial as I enjoyed writing it.</p>

<h2 id="recap">Recap</h2>

<p>If you want to create web application in Clojure, try Noir. Noir is small and easy to pick up.</p>

<ul>
  <li>use defpage macro to define URL routes</li>
  <li>use defpartial macro to build views</li>
  <li>use Leiningen to run local web server</li>
  <li>use REPL to experiment with business logic</li>
  <li>have fun with Clojure</li>
</ul>

<h2 id="resources">Resources</h2>

<ol>
  <li>Long in-depth Noir tutorial: <a href="http://yogthos.net/blog/22">http://yogthos.net/blog/22</a></li>
  <li>Source code of this tutorial: <a href="https://github.com/ndpar/bookshelf">https://github.com/ndpar/bookshelf</a></li>
  <li>Noir: <a href="http://www.webnoir.org/">http://www.webnoir.org</a></li>
  <li>Hiccup: <a href="https://github.com/weavejester/hiccup">https://github.com/weavejester/hiccup</a></li>
</ol>

<p>P.S. After I wrote the draft of this post I found another <a href="http://clojure-lab.tumblr.com/post/35207280637/clojure-web-development">tutorial</a> on Clojure web development, which even has the same name for the application! If I knew about it before, I wouldn’t probably write mine. But since it’s already typed, let it be published.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exporting Solr documents]]></title>
    <link href="http://blog.ndpar.com/2012/10/01/exporting-solr-documents/"/>
    <updated>2012-10-01T08:00:00-04:00</updated>
    <id>http://blog.ndpar.com/2012/10/01/exporting-solr-documents</id>
    <content type="html"><![CDATA[<p>Recently I had to copy some documents from one <a href="http://lucene.apache.org/solr/">Solr</a> server to another. I expected Solr already had an interface that allowed me to extract documents in the same format they were inserted. In that case I would pipe an output of one curl command to another, and consider the job done. As it turned out, the format of Solr input document is different than the output format. Here is how input document looks like:</p>

<pre><code>&lt;add&gt;
    &lt;doc&gt;
        &lt;field name="id"&gt;12345&lt;/field&gt;
        &lt;field name="articlestate"&gt;published&lt;/field&gt;
        &lt;field name="articletype"&gt;news&lt;/field&gt;
        &lt;field name="body"&gt;Lorem ipsum dolor...&lt;/field&gt;
        &lt;field name="referenceid"&gt;175820&lt;/field&gt;
        &lt;field name="referenceid"&gt;163786&lt;/field&gt;
        &lt;field name="created"&gt;2011-02-15T14:57:54.766Z&lt;/field&gt;
    &lt;/doc&gt;
&lt;/add&gt;
</code></pre>

<p>Notice the flat structure of this document: all element names are the same regardless of the filed type, and arrays (referenceid) are not grouped. Now compare it to the output format. Here is what you get when you execute a query against a Solr server:</p>

<pre><code>&lt;response&gt;
    &lt;lst name="responseHeader"&gt;
        &lt;int name="status"&gt;0&lt;/int&gt;
        &lt;int name="QTime"&gt;1&lt;/int&gt;
        &lt;lst name="params"&gt;
            &lt;str name="q"&gt;id:12345&lt;/str&gt;
        &lt;/lst&gt;
    &lt;/lst&gt;
    &lt;result name="response" numFound="1" start="0"&gt;
        &lt;doc&gt;
            &lt;str name="id"&gt;12345&lt;/str&gt;
            &lt;str name="articlestate"&gt;published&lt;/str&gt;
            &lt;str name="articletype"&gt;news&lt;/str&gt;
            &lt;str name="body"&gt;Lorem ipsum dolor...&lt;/str&gt;
            &lt;arr name="referenceid"&gt;
                &lt;str&gt;175820&lt;/str&gt;
                &lt;str&gt;163786&lt;/str&gt;
            &lt;/arr&gt;
            &lt;date name="created"&gt;2011-02-15T14:57:54.766Z&lt;/date&gt;
        &lt;/doc&gt;
    &lt;/result&gt;
&lt;/response&gt;
</code></pre>

<p>Even if we ignore the response header, the structure of the response/result/doc is not the same as of input document: the element names reflect the types, the arrays are grouped. If you try to add this document to a Solr server, you will get an error “unexpected XML tag”, obviously. I googled for couple hours on how to convert an output document to an input, and, to my surprise, didn’t find any solution. Therefore I implemented my own converter in Groovy, which solved the problem. I post it <a href="http://gist.github.com/3813775">here</a> in case somebody needs it.</p>

<p>Note: You can also use this script to re-index Solr.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ford marbles]]></title>
    <link href="http://blog.ndpar.com/2011/11/05/ford-marbles/"/>
    <updated>2011-11-05T08:00:00-04:00</updated>
    <id>http://blog.ndpar.com/2011/11/05/ford-marbles</id>
    <content type="html"><![CDATA[<p>I found these marvelous renderings of Ford circles on <a href="http://www.flickr.com/photos/fdecomite/2564742912/in/photostream">flickr</a>. I can’t help but share them here.</p>

<p><img class="center" src="http://farm4.static.flickr.com/3189/2564742912_d0faf59e38_z.jpg" /></p>

<!-- more -->

<p><img class="center" src="http://farm4.static.flickr.com/3076/2563846663_6d0f428f08_z.jpg" /></p>

<p><img class="center" src="http://farm4.static.flickr.com/3165/2564630336_d35c4ccf04_z.jpg" /></p>

<p>As <a href="http://blog.ndpar.com/2011/08/06/thomaes-function/">Thomae’s function</a>, <a href="http://en.wikipedia.org/wiki/Ford_circle">Ford circles</a> is another visual representation of rational numbers. You can investigate them <a href="http://demonstrations.wolfram.com/FordCircles/">here</a> with interactive Wolfram demo.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modulo who?]]></title>
    <link href="http://blog.ndpar.com/2011/09/16/modulo-who/"/>
    <updated>2011-09-16T08:00:00-04:00</updated>
    <id>http://blog.ndpar.com/2011/09/16/modulo-who</id>
    <content type="html"><![CDATA[<p>When programmer and mathematician are talking about modulus or modulo, there is often a confusion what this term means. For programmer <a href="http://en.wikipedia.org/wiki/Modulo_operator">modulo</a> means an operator that finds the <em>remainder</em> of division of one number by another, e.g. 5 mod 2 = 1. For mathematician <a href="http://en.wikipedia.org/wiki/Modular_arithmetic">modulo</a> is a <em>congruence</em> relation between two numbers: <em>a</em> and <em>b</em> are said to be congruent modulo <em>n</em>, written <em>a</em> ≡ <em>b</em> (mod <em>n</em>), if their difference <em>a</em> − <em>b</em> is an integer multiple of <em>n</em>.</p>

<p>These two definitions are not equivalent. The former is a special case of the latter: if <em>b</em> mod <em>n</em> = <em>a</em> then <em>a</em> ≡ <em>b</em> (mod <em>n</em>). The inverse is not true in general case. 5 mod 2 = 1, and 1 ≡ 5 (mod 2) because 1 - 5 = –4 is integer multiple of 2. Now 5 ≡ 1 (mod 2), because 5 - 1 = 4 is evenly divisible by 2, but 1 mod 2 = 1, not 5.</p>

<p>The biggest confusion happens when programmer and mathematician start arguing about Gauss’ famous <a href="http://mathworld.wolfram.com/QuadraticReciprocityTheorem.html">Golden Theorem</a> where both definitions of modulus can be used.</p>

]]></content>
  </entry>
  
</feed>
