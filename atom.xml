<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Side Notes]]></title>
  <link href="http://blog.ndpar.com/atom.xml" rel="self"/>
  <link href="http://blog.ndpar.com/"/>
  <updated>2013-05-27T21:41:15-04:00</updated>
  <id>http://blog.ndpar.com/</id>
  <author>
    <name><![CDATA[Andrey Paramonov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[To be or not to be… entrepreneur]]></title>
    <link href="http://blog.ndpar.com/2013/05/26/entrepreneur/"/>
    <updated>2013-05-26T18:00:00-04:00</updated>
    <id>http://blog.ndpar.com/2013/05/26/entrepreneur</id>
    <content type="html"><![CDATA[<p><a href="http://www.infoq.com/interviews/rod-johnson-entrepreneurialism">Rod Johnson</a>, creator of Spring, programmer that became entrepreneur:</p>

<blockquote><p>One thing I think that you really need to be careful of as well, particularly if you, like me, are a programmer, is don’t get carried away writing code. Typically in my experience anyone who is a good programmer is pretty passionate about it, love writing code, get addicted to the process of writing code, fell pretty good about their code basis. As soon as you get down that path you are not thinking straight anymore and now you are increasing your emotional investment, you are having lots of fun writing interesting code and you are no longer in a place mentally where you are going to be trying to find some reason that you shouldn’t write that code. That has been a big lesson for me that the quicker I get to coding, the longer it takes me to ask the kind of questions I should ask upfront.</p></blockquote>

<p><a href="http://www.youtube.com/watch?v=MShbP3OpASA">Linus Torvalds</a>, creator of Linux, programmer that still programs:</p>

<blockquote><p>I&rsquo;m interested in programming. When business started happening, I didn&rsquo;t get into this for the business side. I wanted to do programming. When other people started selling Linux, I said &ldquo;Yes! Now I can avoid caring about that side too.&rdquo;</p>

<p>I never had to deal with single business related thing in Linux ever. Seriously, I had to deal with lot of other things but business related things… I got queries and I just said &ldquo;I don&rsquo;t care.&rdquo;</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Joe Armstrong at MostlyErlang]]></title>
    <link href="http://blog.ndpar.com/2013/05/21/joe-armstrong-mostlyerlang/"/>
    <updated>2013-05-21T15:13:01-04:00</updated>
    <id>http://blog.ndpar.com/2013/05/21/joe-armstrong-mostlyerlang</id>
    <content type="html"><![CDATA[<p>The main guest at today&rsquo;s <a href="http://mostlyerlang.wordpress.com/2013/05/21/43/">MostlyErlang</a> podcast is Joe Armstrong, the co-inventor of Erlang, a wise man, and a brilliant speaker. I listened to the podcast few times, and every time enjoyed it. I highly recommend it to all programmers regardless whether they are using Erlang or not.</p>

<p>While we are waiting for the oficial transcript, this post provides some highlights. I put here the quotes I found particularly interesting or funny.</p>

<h2>Concurrency</h2>

<blockquote><p>I&rsquo;ve got a blog on my GitHub, and I thouhgt I&rsquo;d put two different types of articles there and see what the response is. One theme I&rsquo;m pursuing is &ldquo;explaining to 5-year-old&rdquo; theme, and the other is &ldquo;technically complicated&rdquo; theme.</p></blockquote>

<p>Then he describes the &ldquo;<a href="http://joearms.github.io/2013/04/05/concurrent-and-parallel-programming.html">concurrency vs parallelism</a>&rdquo; picture for 5 y.o.</p>

<blockquote><p>That blog entry got 25,000 people read it, and they got 10 responses and quite a lot of criticism actually from people who know what concurrency and parallelism is. And then I compare it to some other articles I&rsquo;ve written that technically deeper. There you got only few hundred people read it.</p></blockquote>

<p>I noticed it too. All those people, who responded with <a href="http://www.yosefk.com/blog/parallelism-and-concurrency-need-different-tools.html">long blogs</a> about concurrency, missed the point: This picture was for kids, and for kids it&rsquo;s a pretty good picture. Adults should go and read the technical papers, but they didn&rsquo;t.</p>

<!-- more -->


<h2>Let it crash</h2>

<blockquote><p>Once upon a time we had a Leadership Election algorithm in Erlang. We got some theoreticians involved, and they proved the algorithm to be correct. It&rsquo;s been in practice for some time when we sent them a bug report, which showed that the thing elected two leaders, and we can reproduce it. And then they looked at this bug and went back at the code, and said the code is correct, but we had to make certain assumptions that this failure couldn&rsquo;t happen.</p></blockquote>

<p>I like it. We should always keep it in mind: Before you prove anything, make sure, your assumptions are valid.</p>

<h2>Favourite bad idea</h2>

<blockquote><p>The first bad idea we put in Erlang is the process priorities. I don&rsquo;t think it&rsquo;s documented anywhere. It&rsquo;s definitely not in my book. It&rsquo;s not supposed to be documented — that&rsquo;s deliberate.</p></blockquote>

<p><a href="http://www.erlangprogramming.org/">Erlang Programming</a> mentions the process priorities on page 113, but they wrote the whole paragraph explaining why it&rsquo;s a bad idea.</p>

<blockquote><p>I was forced into position where I had to put them in [the language]. So I waited a few weeks and I put in an Erlang code that sets process priorities some integer, and this code didn&rsquo;t do anything at all. It was commented out. I shipped the system, and then I asked &ldquo;How do you like it with priorities?&rdquo; And they said &ldquo;Now it&rsquo;s much better!&rdquo;</p></blockquote>

<p>Brilliant! Although, it pisses them off when people eventually find what&rsquo;s going on in the code.</p>

<h2>Performance</h2>

<blockquote><p>One thing I like about Erlang is it&rsquo;s got pretty predictible performance model.</p>

<p>There was some guy on the mailing list that said &ldquo;I wrote a code that finds line breaks in the large file, and the result surprised me. I expected it to take this long, and it took a heck of a lot longer.&rdquo; I wrote a little benchmark and I couldn&rsquo;t see that effect. I mailed back &ldquo;mine didn&rsquo;t behave like that.&rdquo; Then he said &ldquo;There is another funny thing: the distribution of my file is not uniformed. I&rsquo;ve got extremly long lines in it, and the rest are the same.&rdquo; And from then it took Patrik five minutes to find a bug in the system. But if he hadn&rsquo;t made an observation &ldquo;this thing surprises me&rdquo; and didn&rsquo;t give this clue that it happened under these circumstances, that bug could be in the system for years. But people find performance thing and they don&rsquo;t tell us the fact they are surprised, so we can&rsquo;t debug it.</p></blockquote>

<p>Lesson learned: If you <a href="http://code.mixpanel.com/2011/08/05/how-and-why-we-switched-from-erlang-to-python/">don&rsquo;t like</a> the performance of your Erlang code, don&rsquo;t be shy to speak up about it. Either you are doing something wrong or there is a bug in Erlang. Both things are fixable.</p>

<h2>Scalability</h2>

<blockquote><p><a href="http://www.ericsson.com/ourportfolio/products/sgsn-mme">MME</a> is a thing in the backbone of mobile telephony network, it makes all mobile data work. And it&rsquo;s written in Erlang. Smartphones wouldn&rsquo;t be able to connect to the network at all without MME. Now, Ericsson&rsquo;s got the biggest market share in the world for mobile base stations, for we do 40% of the total world market of 3G and CDMA and 60% of the world market for LTE and 4G. This gives us about 50% of the world market. That means Erlang&rsquo;s controlling 50% of all smartphones world wide.</p></blockquote>

<p>That&rsquo;s impressive, and at the same time it&rsquo;s sad because people don&rsquo;t know about it. People are talking about Twitter scale, Google scale, or other sorts of &ldquo;web-scale&rdquo;, but they don&rsquo;t realize that most of the data Twitter and Google receive nowadays is comming through mobile network, which means most of Twitter and Google data is coming throug Erlang. Think about it.</p>

<p>On the other hand, those who see the power of Erlang get big competitive advantage.</p>

<blockquote><p>At Erlang user conference somebody from gaming company came to me and said &ldquo;Erlang&rsquo;s great! We have it on our server, and we managed to get 3 million connections on it!&rdquo; And he was overjoyed. It&rsquo;s fantastic. I said &ldquo;Great! You got to tell everybody…&rdquo; And he said &ldquo;No, no.&rdquo; — &ldquo;Why not?&rdquo; — &ldquo;Because we tell our competitiors we use Jigsaw.&rdquo;</p>

<p>There is no commercial advantage from using Ruby on Rails or Java or anything else. You might go to the conferences and swap battle stories and swap tips. But if you actually found something which is bloody better, you are not going to tell anybody, are you?</p></blockquote>

<p>Hm, maybe that&rsquo;s why I cannot find any software company in Toronto that&rsquo;s doing Erlang. Hey Toronto programmers, if you are programming in Erlang, please let me know — I won&rsquo;t tell your competitors, I promise.</p>

<h2>Broken software</h2>

<blockquote><p>Most of my time as a programmer is spent fixing broken stuff that shouldn&rsquo;t be broken. Whenever I&rsquo;m trying to do something, it doesn&rsquo;t work. I used to spend more than 50% of my time fixing trivial things, and the percentage of my time is increasing by year. If I look back 20 years ago, I din&rsquo;t spend 50% of my time fixing broken software. The software that was available was a lot lot simpler, and it was written by engineers and teams and by small group of people, and it didn&rsquo;t have errors in it. If we extrapolate this in 20 years time, it&rsquo;s going to be even more software, and 90% of it will be completely broken, unless we find better ways of structuring it and gluing things together.</p></blockquote>

<p>So true. I have the same statistics. One third of my time I&rsquo;m shaving software yaks, and another third I&rsquo;m debugging protocols trying to figure out why my code is not working with another code.</p>

<h2>Conference driven development</h2>

<blockquote><p>I&rsquo;m giving a keynote at LambdaJam. I&rsquo;ve written a <a href="http://lambdajam.com/sessions#armstrong">flushing title</a> but I haven&rsquo;t written the talk yet.</p></blockquote>

<p>Lesson learned: Next time you want to give a talk at a conference, come up with a catchy title, and think about the talk itself later.</p>

<blockquote><p>I deliberately give myself titles for stuff I know nothing about, and I implement it all. You know, Robert did that for Lua. You know why Lua got developed in Erlang? Robert was going to give a talk on writing DSL in Erlang. I remember him talking to me &ldquo;I&rsquo;m giving a talk on implementing DSL in Erlang.&rdquo; I said &ldquo;Oh, yeah.&rdquo; And he said &ldquo;I don&rsquo;t know anything about it. I better implement Lua.&rdquo;</p></blockquote>

<p>It&rsquo;s a really good idea to submit a conference proposal for the stuff you want to learn. When the proposal is accepted, you don&rsquo;t have a choice but go and study the thing. Otherwise you would procrastinate forever. I notice actually many people do that. Maybe I&rsquo;ll do the same with Erlang, at some point.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stuck with your first programming language]]></title>
    <link href="http://blog.ndpar.com/2013/05/09/liskov-programming-abstraction/"/>
    <updated>2013-05-09T19:39:00-04:00</updated>
    <id>http://blog.ndpar.com/2013/05/09/liskov-programming-abstraction</id>
    <content type="html"><![CDATA[<p><a href="http://en.wikipedia.org/wiki/Barbara_Liskov">Barbara Liskov</a> in her <a href="http://www.infoq.com/presentations/programming-abstraction-liskov">keynote</a> presentation:</p>

<blockquote><p>I&rsquo;m a little dismayed what&rsquo;s happened in programming languages. And the reason I&rsquo;m dismayed is because on the one hand we have the programming languages that experts use — I&rsquo;m thinking of Java and C# but you can name bunch of others. And the problem with these languages is — they are powerful, you can build big systems in them — but they aren&rsquo;t very good for beginners. And what happens in MIT, and I think this is happening across the US anyway, is the people are no longer using those languages in their introductory programming language courses, because the amount of craft you have to go through in order to write the little print-loop is just too much, and the students just get lost in the process. So they&rsquo;ve been switching to languages like Python.</p>

<p>Python is very simple and nice when you start to use it. But you don&rsquo;t get too far down the road, if you me, before you discover it has no data abstraction at all. That&rsquo;s not good because big programs require modularity and encapsulation, and you&rsquo;d like the language that supports that. So my question is: Can we find a language that will work for both communities? And the reason it matters is because a lot of kids start off programming in their first programming language and that&rsquo;s it. They may have to change eventually, but they are building huge systems in languages that are really ill-suited for this. So it would be good if the language they started off with is the one they can grow with, and would be good for building big programs as well as small ones.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Zookeeper cluster]]></title>
    <link href="http://blog.ndpar.com/2013/03/09/simple-zookeeper-cluster/"/>
    <updated>2013-03-09T07:00:00-05:00</updated>
    <id>http://blog.ndpar.com/2013/03/09/simple-zookeeper-cluster</id>
    <content type="html"><![CDATA[<p>Sometimes I need to run <a href="http://zookeeper.apache.org">ZooKeeper</a> ensemble on my development box to test my application on the production-like environment. I found that recreating the whole ensemble from scratch is much faster than cleaning it up using ZooKeeper CLI tool. To automate this process I created a bash script which I want to share in this blog post. I hard-coded all the paths in the script using my regular conventions. You might need to change them to yours — it should be fairly straightforward.</p>

<p>Before you can use the script, you need to install ZooKeeper on your box. That&rsquo;s what I did on my machine</p>

<pre><code>$ cd /opt
$ sudo mkdir zookeeper
$ sudo chown -R andrey:admin zookeeper
$ cd zookeeper
$ wget http://apache.mirror.rafal.ca/zookeeper/zookeeper-3.4.5/zookeeper-3.4.5.tar.gz
$ tar xf zookeeper-3.4.5.tar.gz
$ rm zookeeper-3.4.5.tar.gz
$ ln -s zookeeper-3.4.5 zookeeper
</code></pre>

<p>In the end you should have a ZooKeeper installed in <em>/opt/zookeeper/zookeeper</em> directory.</p>

<p>Now download, chmod, and run the <a href="https://gist.github.com/ndpar/5105486">script</a>. It will create the following files</p>

<pre><code>/opt/zookeeper/zookeeper/cluster
├── server1
│   ├── conf
│   │   ├── log4j.properties
│   │   └── zoo.cfg
│   ├── data
│   │   └── myid
│   └── logs
├── server2
│   ├── conf
│   │   ├── log4j.properties
│   │   └── zoo.cfg
│   ├── data
│   │   └── myid
│   └── logs
├── server3
│   ├── conf
│   │   ├── log4j.properties
│   │   └── zoo.cfg
│   ├── data
│   │   └── myid
│   └── logs
├── start.sh
└── stop.sh
</code></pre>

<p>This is the minimum configuration for 3-node ensemble (cluster), which is recommended for production. To start the cluster, run the following command</p>

<pre><code>$ cd /opt/zookeeper/zookeeper
$ cluster/start.sh
</code></pre>

<p>Check the log files to see if the cluster is successfully started</p>

<pre><code>$ tail -f cluster/server{1,2,3}/logs/zookeeper.out
</code></pre>

<p>When the cluster is up and running, you can test your application. After you are done, shutdown the cluster using the following command</p>

<pre><code>$ cluster/stop.sh
$ ps -ef | grep java
</code></pre>

<p>To recreate a clean cluster, just run the script again</p>

<pre><code>$ ./zookeeper-init-ensemble.sh
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Embrace Big Data]]></title>
    <link href="http://blog.ndpar.com/2013/01/15/embrace-big-data/"/>
    <updated>2013-01-15T07:00:00-05:00</updated>
    <id>http://blog.ndpar.com/2013/01/15/embrace-big-data</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://blog.ndpar.com/images/posts/BigData.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RabbitMQ, ActiveMQ, ZeroMQ, HornetQ]]></title>
    <link href="http://blog.ndpar.com/2012/12/15/rabbitmq-activemq-zeromq-hornetq/"/>
    <updated>2012-12-15T07:00:00-05:00</updated>
    <id>http://blog.ndpar.com/2012/12/15/rabbitmq-activemq-zeromq-hornetq</id>
    <content type="html"><![CDATA[<p><em>Warning</em>: In this post I&rsquo;m going to compare <a href="http://www.rabbitmq.com/">RabbitMQ</a>, <a href="http://www.zeromq.org/">ZeroMQ</a>, <a href="http://activemq.apache.org/">ActiveMQ</a>, and <a href="http://www.jboss.org/hornetq">HornetQ</a>. The basis of the comparison is not the performance, or the scalability, or any other serious feature. The comparison is done <em>purely</em> based on the popularity of those systems. Therefore, if you came here to see some performance metrics, you will be disappointed — there is none in this post.</p>

<p><em>Note</em>: To calculate popularity, I&rsquo;m going to use MongoDB and Python, so if you don&rsquo;t care about message brokers, but you want to see some examples of MongoDB scripts, this post might be interesting to you.</p>

<!-- more -->


<h2>Popularity</h2>

<p>What is the best messaging system out there? If you read my blog regularly, you probably know my biased answer. But to give an objective answer, we have to compare the candidates based on some criteria. There are many possible criteria, some of which are more relevant to your project than the others. One of them is how popular the candidate solutions are. In other words, if you choose a message broker and then you encounter a problem, how easy would it be to solve it? Is there anybody who can help you? One way to find it out is to check how many people are interested in the same solution. And the obvious way to do it is to ask Google.</p>

<p>Here is the Google trend graph for the last five years. It turns out, my personal preferences coincide with the public interest.</p>

<div class="separator" style="clear: both; text-align: center;"><script type="text/javascript" src="http://blog.ndpar.com//www.google.ca/trends/embed.js?hl=en-US&q=activemq,+rabbitmq,+zeromq,+hornetq&date=1/2008+60m&cmpt=q&content=1&cid=TIMESERIES_GRAPH_AVERAGES_CHART&export=5&w=800&h=330"></script></div>


<p>At this point I can stop and say &ldquo;Well, you see who&rsquo;s the winner&rdquo;. There are 5 times more people interested in RabbitMQ than HornetQ, so if you bet on Rabbit you have more chances to get the help from your fellow programmers, if you need to.</p>

<p>But before we make the final decision, I want to hear another opinion about the popularity of our candidates. Where do people go nowadays when they have software related problems? Right, they go to…</p>

<h2>StackOverflow</h2>

<p>The best thing about StackOverflow is their <a href="http://api.stackoverflow.com/1.0/usage">REST API</a>. For our purposes we need two API queries: get all <a href="http://api.stackoverflow.com/1.1/usage/methods/search">questions by a tag</a>, and get all <a href="http://api.stackoverflow.com/1.1/usage/methods/question-answers">answers</a> for the question. In fact, the second one is optional. Even the first query alone can give us most of what we want to know:</p>

<ul>
<li>how many questions have been posted for every candidate on our list?</li>
<li>how many answers did those questions receive?</li>
<li>how many answers were accepted?</li>
<li>how many questions and answers were marked useful?</li>
</ul>


<p>When we get all the numbers, we should know what people are actually using. We can also check if there is any correlation between Google data and StackOverflow.</p>

<p>So how do we proceed? We cannot use API directly to run analytics, because we would quickly exhaust the daily quota. What we can do is to fetch the data, save it locally, and run analytics against the local data. Here is another good thing about StackOverflow API: it comes in JSON format. What is the best way to analyze JSON data? Obviously, saving it in a JSON-oriented database that supports aggregated queries. And that&rsquo;s where MongoDB comes into play.</p>

<p><a href="https://gist.github.com/4276136#file-questions-py">Here</a> is the Python script that downloads all the questions for the specified tags from StackOverflow, and saves the results in the local MongoDB instance. I chose Python because I want to draw some graphs later, which is easy to do in Python. Plus, it&rsquo;s a simple and expressive language.</p>

<p>After we run this script, we get all the questions we need in our database. The next step is to get all the answers for those questions. <a href="https://gist.github.com/4276136#file-answers-py">Here</a> is the script that does exactly that.</p>

<p>Depends on how many questions we have saved on the first step, there might be quite a lot of queries to run to get all the answers. With my second script I exceeded the daily quota, so I had to wait for the next day to get the rest of the answers.</p>

<p>Now, when we have all the data, let&rsquo;s take a look how we can use it. Here is a typical StackOverflow record. I highlighted the fields that might be useful for our analysis.</p>

<pre>{
     "_id" : 269363,
     <font color="#0000FF">"accepted_answer_id"</font> : 290764,
     <font color="#0000FF">"answer_count" : 4</font>,
     "answers" : [
          ...
          {
               "view_count" : 0,
               "answer_comments_url" : "/answers/303710/comments",
               "answer_id" : 303710,
               "title" : "ActiveMQ .net client locks up",
               "community_owned" : false,
               "down_vote_count" : 0,
               "last_activity_date" : 1317300099,
               "creation_date" : 1227135282,
               "score" : 1,
               <font color="#0000FF">"up_vote_count" : 1</font>,
               "owner" : {
                    "display_name" : "HitLikeAHammer",
                    <font color="#0000FF">"reputation" : 1152</font>,
                    "user_id" : 35165,
                    "user_type" : "registered",
                    "email_hash" : "584cd9905db85f744e7e96740b11b7c0"
               },
               "accepted" : false,
               "last_edit_date" : 1317300099,
               "question_id" : 269363
          },
          ...
     ],
     "community_owned" : false,
     "creation_date" : 1225989513,
     "down_vote_count" : 0,
     "favorite_count" : 1,
     "last_activity_date" : 1317300112,
     "owner" : {
          "display_name" : "HitLikeAHammer",
          "reputation" : 1152,
          "user_id" : 35165,
          "user_type" : "registered",
          "email_hash" : "584cd9905db85f744e7e96740b11b7c0"
     },
     "question_answers_url" : "/questions/269363/answers",
     "question_comments_url" : "/questions/269363/comments",
     "question_id" : 269363,
     "question_timeline_url" : "/questions/269363/timeline",
     "score" : 1,
     <font color="#0000FF">"tags" : [
          ".net",
          "activemq"
     ]</font>,
     "title" : "ActiveMQ .net client locks up",
     <font color="#0000FF">"up_vote_count" : 1</font>,
     "view_count" : 1183
}</pre>


<p>First of all, we want to know how many questions are posted for each messaging system from our list. Here is the MongoDB query for that. The first snippet is a query, the second is the result.</p>

<figure class='code'><figcaption><span>Number of questions </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">stackoverflow</span><span class="p">.</span><span class="nx">aggregate</span><span class="p">([</span>
</span><span class='line'>     <span class="p">{</span><span class="nx">$unwind</span><span class="o">:</span><span class="s1">&#39;$tags&#39;</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="nx">$group</span><span class="o">:</span><span class="p">{</span><span class="nx">_id</span><span class="o">:</span><span class="s1">&#39;$tags&#39;</span><span class="p">,</span> <span class="nx">questions</span><span class="o">:</span><span class="p">{</span><span class="nx">$sum</span><span class="o">:</span><span class="mi">1</span><span class="p">}}},</span>
</span><span class='line'>     <span class="p">{</span><span class="nx">$match</span><span class="o">:</span><span class="p">{</span><span class="nx">_id</span><span class="o">:</span><span class="p">{</span><span class="nx">$in</span><span class="o">:</span><span class="p">[</span><span class="s1">&#39;activemq&#39;</span><span class="p">,</span> <span class="s1">&#39;rabbitmq&#39;</span><span class="p">,</span> <span class="s1">&#39;zeromq&#39;</span><span class="p">,</span> <span class="s1">&#39;hornetq&#39;</span><span class="p">]}}},</span>
</span><span class='line'>     <span class="p">{</span><span class="nx">$sort</span><span class="o">:</span><span class="p">{</span><span class="nx">questions</span><span class="o">:-</span><span class="mi">1</span><span class="p">}}</span>
</span><span class='line'><span class="p">])[</span><span class="s1">&#39;result&#39;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;activemq&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;questions&quot;</span> <span class="o">:</span> <span class="mi">1039</span>
</span><span class='line'>     <span class="p">},</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;rabbitmq&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;questions&quot;</span> <span class="o">:</span> <span class="mi">988</span>
</span><span class='line'>     <span class="p">},</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;zeromq&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;questions&quot;</span> <span class="o">:</span> <span class="mi">373</span>
</span><span class='line'>     <span class="p">},</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;hornetq&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;questions&quot;</span> <span class="o">:</span> <span class="mi">185</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The next query is to get the total number of answers by tag</p>

<figure class='code'><figcaption><span>Number of answers </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">stackoverflow</span><span class="p">.</span><span class="nx">aggregate</span><span class="p">([</span>
</span><span class='line'>     <span class="p">{</span><span class="nx">$unwind</span><span class="o">:</span><span class="s1">&#39;$tags&#39;</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="nx">$group</span><span class="o">:</span><span class="p">{</span><span class="nx">_id</span><span class="o">:</span><span class="s1">&#39;$tags&#39;</span><span class="p">,</span> <span class="nx">answers</span><span class="o">:</span><span class="p">{</span><span class="nx">$sum</span><span class="o">:</span><span class="s1">&#39;$answer_count&#39;</span><span class="p">}}},</span>
</span><span class='line'>     <span class="p">{</span><span class="nx">$match</span><span class="o">:</span><span class="p">{</span><span class="nx">_id</span><span class="o">:</span><span class="p">{</span><span class="nx">$in</span><span class="o">:</span><span class="p">[</span><span class="s1">&#39;activemq&#39;</span><span class="p">,</span> <span class="s1">&#39;rabbitmq&#39;</span><span class="p">,</span> <span class="s1">&#39;zeromq&#39;</span><span class="p">,</span> <span class="s1">&#39;hornetq&#39;</span><span class="p">]}}},</span>
</span><span class='line'>     <span class="p">{</span><span class="nx">$sort</span><span class="o">:</span><span class="p">{</span><span class="nx">answers</span><span class="o">:-</span><span class="mi">1</span><span class="p">}}</span>
</span><span class='line'><span class="p">])[</span><span class="s1">&#39;result&#39;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;activemq&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;answers&quot;</span> <span class="o">:</span> <span class="mi">1382</span>
</span><span class='line'>     <span class="p">},</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;rabbitmq&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;answers&quot;</span> <span class="o">:</span> <span class="mi">1322</span>
</span><span class='line'>     <span class="p">},</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;zeromq&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;answers&quot;</span> <span class="o">:</span> <span class="mi">572</span>
</span><span class='line'>     <span class="p">},</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;hornetq&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;answers&quot;</span> <span class="o">:</span> <span class="mi">227</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>It seems that the number of answers is proportional to the number of questions. With MongoDB we can quickly verify it.</p>

<figure class='code'><figcaption><span>Answers to questions ratio </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">stackoverflow</span><span class="p">.</span><span class="nx">aggregate</span><span class="p">([</span>
</span><span class='line'>     <span class="p">{</span><span class="nx">$unwind</span><span class="o">:</span><span class="s1">&#39;$tags&#39;</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="nx">$group</span><span class="o">:</span><span class="p">{</span><span class="nx">_id</span><span class="o">:</span><span class="s1">&#39;$tags&#39;</span><span class="p">,</span> <span class="nx">answers</span><span class="o">:</span><span class="p">{</span><span class="nx">$sum</span><span class="o">:</span><span class="s1">&#39;$answer_count&#39;</span><span class="p">},</span> <span class="nx">questions</span><span class="o">:</span><span class="p">{</span><span class="nx">$sum</span><span class="o">:</span><span class="mi">1</span><span class="p">}}},</span>
</span><span class='line'>     <span class="p">{</span><span class="nx">$match</span><span class="o">:</span><span class="p">{</span><span class="nx">_id</span><span class="o">:</span><span class="p">{</span><span class="nx">$in</span><span class="o">:</span><span class="p">[</span><span class="s1">&#39;activemq&#39;</span><span class="p">,</span> <span class="s1">&#39;rabbitmq&#39;</span><span class="p">,</span> <span class="s1">&#39;zeromq&#39;</span><span class="p">,</span> <span class="s1">&#39;hornetq&#39;</span><span class="p">]}}},</span>
</span><span class='line'>     <span class="p">{</span><span class="nx">$project</span><span class="o">:</span><span class="p">{</span><span class="nx">answers</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span> <span class="nx">questions</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span> <span class="nx">ratio</span><span class="o">:</span><span class="p">{</span><span class="nx">$divide</span><span class="o">:</span><span class="p">[</span><span class="s1">&#39;$answers&#39;</span><span class="p">,</span> <span class="s1">&#39;$questions&#39;</span><span class="p">]}}},</span>
</span><span class='line'>     <span class="p">{</span><span class="nx">$sort</span><span class="o">:</span><span class="p">{</span><span class="nx">ratio</span><span class="o">:-</span><span class="mi">1</span><span class="p">}}</span>
</span><span class='line'><span class="p">])[</span><span class="s1">&#39;result&#39;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;zeromq&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;answers&quot;</span> <span class="o">:</span> <span class="mi">572</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;questions&quot;</span> <span class="o">:</span> <span class="mi">373</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;ratio&quot;</span> <span class="o">:</span> <span class="mf">1.5335120643431635</span>
</span><span class='line'>     <span class="p">},</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;rabbitmq&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;answers&quot;</span> <span class="o">:</span> <span class="mi">1322</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;questions&quot;</span> <span class="o">:</span> <span class="mi">988</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;ratio&quot;</span> <span class="o">:</span> <span class="mf">1.3380566801619433</span>
</span><span class='line'>     <span class="p">},</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;activemq&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;answers&quot;</span> <span class="o">:</span> <span class="mi">1382</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;questions&quot;</span> <span class="o">:</span> <span class="mi">1039</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;ratio&quot;</span> <span class="o">:</span> <span class="mf">1.3301251203079885</span>
</span><span class='line'>     <span class="p">},</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;hornetq&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;answers&quot;</span> <span class="o">:</span> <span class="mi">227</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;questions&quot;</span> <span class="o">:</span> <span class="mi">185</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;ratio&quot;</span> <span class="o">:</span> <span class="mf">1.227027027027027</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Indeed, the answers/question ratio is almost the same for every tag. That means we can use just the number of questions for our analysis.</p>

<p>Here is the query that calculates the number of <em>accepted</em> answers by tag. Again, it correlates fairly well with the total number of answers and questions.</p>

<figure class='code'><figcaption><span>Number of accepted answers </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">stackoverflow</span><span class="p">.</span><span class="nx">aggregate</span><span class="p">([</span>
</span><span class='line'>     <span class="p">{</span><span class="nx">$match</span><span class="o">:</span><span class="p">{</span><span class="nx">accepted_answer_id</span><span class="o">:</span><span class="p">{</span><span class="nx">$ne</span><span class="o">:</span><span class="kc">null</span><span class="p">}}},</span>
</span><span class='line'>     <span class="p">{</span><span class="nx">$unwind</span><span class="o">:</span><span class="s1">&#39;$tags&#39;</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="nx">$group</span><span class="o">:</span><span class="p">{</span><span class="nx">_id</span><span class="o">:</span><span class="s1">&#39;$tags&#39;</span><span class="p">,</span> <span class="nx">accepted_answers</span><span class="o">:</span><span class="p">{</span><span class="nx">$sum</span><span class="o">:</span><span class="mi">1</span><span class="p">}}},</span>
</span><span class='line'>     <span class="p">{</span><span class="nx">$match</span><span class="o">:</span><span class="p">{</span><span class="nx">_id</span><span class="o">:</span><span class="p">{</span><span class="nx">$in</span><span class="o">:</span><span class="p">[</span><span class="s1">&#39;activemq&#39;</span><span class="p">,</span> <span class="s1">&#39;rabbitmq&#39;</span><span class="p">,</span> <span class="s1">&#39;zeromq&#39;</span><span class="p">,</span> <span class="s1">&#39;hornetq&#39;</span><span class="p">]}}},</span>
</span><span class='line'>     <span class="p">{</span><span class="nx">$sort</span><span class="o">:</span><span class="p">{</span><span class="nx">accepted_answers</span><span class="o">:-</span><span class="mi">1</span><span class="p">}}</span>
</span><span class='line'><span class="p">])[</span><span class="s1">&#39;result&#39;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;activemq&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;accepted_answers&quot;</span> <span class="o">:</span> <span class="mi">531</span>
</span><span class='line'>     <span class="p">},</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;rabbitmq&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;accepted_answers&quot;</span> <span class="o">:</span> <span class="mi">500</span>
</span><span class='line'>     <span class="p">},</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;zeromq&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;accepted_answers&quot;</span> <span class="o">:</span> <span class="mi">221</span>
</span><span class='line'>     <span class="p">},</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;hornetq&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;accepted_answers&quot;</span> <span class="o">:</span> <span class="mi">94</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The next query is more interesting. It calculates the number of question up-votes by tag. In other words, it shows the number of <em>useful</em> questions. If we divide it by the total number of questions, we should see which messaging system has bigger rate of useful questions than others</p>

<figure class='code'><figcaption><span>Number of useful questions </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">stackoverflow</span><span class="p">.</span><span class="nx">aggregate</span><span class="p">([</span>
</span><span class='line'>     <span class="p">{</span><span class="nx">$unwind</span><span class="o">:</span><span class="s1">&#39;$tags&#39;</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="nx">$group</span><span class="o">:</span><span class="p">{</span><span class="nx">_id</span><span class="o">:</span><span class="s1">&#39;$tags&#39;</span><span class="p">,</span> <span class="nx">upvotes</span><span class="o">:</span><span class="p">{</span><span class="nx">$sum</span><span class="o">:</span><span class="s1">&#39;$up_vote_count&#39;</span><span class="p">},</span> <span class="nx">questions</span><span class="o">:</span><span class="p">{</span><span class="nx">$sum</span><span class="o">:</span><span class="mi">1</span><span class="p">}}},</span>
</span><span class='line'>     <span class="p">{</span><span class="nx">$match</span><span class="o">:</span><span class="p">{</span><span class="nx">_id</span><span class="o">:</span><span class="p">{</span><span class="nx">$in</span><span class="o">:</span><span class="p">[</span><span class="s1">&#39;activemq&#39;</span><span class="p">,</span> <span class="s1">&#39;rabbitmq&#39;</span><span class="p">,</span> <span class="s1">&#39;zeromq&#39;</span><span class="p">,</span> <span class="s1">&#39;hornetq&#39;</span><span class="p">]}}},</span>
</span><span class='line'>     <span class="p">{</span><span class="nx">$project</span><span class="o">:</span><span class="p">{</span><span class="nx">upvotes</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span> <span class="nx">questions</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span> <span class="nx">ratio</span><span class="o">:</span><span class="p">{</span><span class="nx">$divide</span><span class="o">:</span><span class="p">[</span><span class="s1">&#39;$upvotes&#39;</span><span class="p">,</span> <span class="s1">&#39;$questions&#39;</span><span class="p">]}}},</span>
</span><span class='line'>     <span class="p">{</span><span class="nx">$sort</span><span class="o">:</span><span class="p">{</span><span class="nx">ratio</span><span class="o">:-</span><span class="mi">1</span><span class="p">}}</span>
</span><span class='line'><span class="p">])[</span><span class="s1">&#39;result&#39;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;zeromq&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;upvotes&quot;</span> <span class="o">:</span> <span class="mi">1078</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;questions&quot;</span> <span class="o">:</span> <span class="mi">373</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;ratio&quot;</span> <span class="o">:</span> <span class="mf">2.8900804289544237</span>
</span><span class='line'>     <span class="p">},</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;rabbitmq&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;upvotes&quot;</span> <span class="o">:</span> <span class="mi">1864</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;questions&quot;</span> <span class="o">:</span> <span class="mi">988</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;ratio&quot;</span> <span class="o">:</span> <span class="mf">1.8866396761133604</span>
</span><span class='line'>     <span class="p">},</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;activemq&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;upvotes&quot;</span> <span class="o">:</span> <span class="mi">1459</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;questions&quot;</span> <span class="o">:</span> <span class="mi">1039</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;ratio&quot;</span> <span class="o">:</span> <span class="mf">1.4042348411934553</span>
</span><span class='line'>     <span class="p">},</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;hornetq&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;upvotes&quot;</span> <span class="o">:</span> <span class="mi">233</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;questions&quot;</span> <span class="o">:</span> <span class="mi">185</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;ratio&quot;</span> <span class="o">:</span> <span class="mf">1.2594594594594595</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Interesting. The ZeroMQ users seem to ask more useful questions than the users of other brokers.</p>

<p>Let&rsquo;s do the same analysis for the answers. Here is the query that calculates the number of answer up-votes by tag.</p>

<figure class='code'><figcaption><span>Number of useful answers </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">stackoverflow</span><span class="p">.</span><span class="nx">aggregate</span><span class="p">([</span>
</span><span class='line'>     <span class="p">{</span><span class="nx">$unwind</span><span class="o">:</span><span class="s1">&#39;$answers&#39;</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="nx">$unwind</span><span class="o">:</span><span class="s1">&#39;$tags&#39;</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="nx">$group</span><span class="o">:</span><span class="p">{</span><span class="nx">_id</span><span class="o">:</span><span class="p">{</span><span class="nx">question</span><span class="o">:</span><span class="s1">&#39;$_id&#39;</span><span class="p">,</span> <span class="nx">tag</span><span class="o">:</span><span class="s1">&#39;$tags&#39;</span><span class="p">},</span> <span class="nx">upvotes</span><span class="o">:</span><span class="p">{</span><span class="nx">$sum</span><span class="o">:</span><span class="s1">&#39;$answers.up_vote_count&#39;</span><span class="p">}}},</span>
</span><span class='line'>     <span class="p">{</span><span class="nx">$group</span><span class="o">:</span><span class="p">{</span><span class="nx">_id</span><span class="o">:</span><span class="s1">&#39;$_id.tag&#39;</span><span class="p">,</span> <span class="nx">upvotes</span><span class="o">:</span><span class="p">{</span><span class="nx">$sum</span><span class="o">:</span><span class="s1">&#39;$upvotes&#39;</span><span class="p">},</span> <span class="nx">questions</span><span class="o">:</span><span class="p">{</span><span class="nx">$sum</span><span class="o">:</span><span class="mi">1</span><span class="p">}}},</span>
</span><span class='line'>     <span class="p">{</span><span class="nx">$match</span><span class="o">:</span><span class="p">{</span><span class="nx">_id</span><span class="o">:</span><span class="p">{</span><span class="nx">$in</span><span class="o">:</span><span class="p">[</span><span class="s1">&#39;activemq&#39;</span><span class="p">,</span> <span class="s1">&#39;rabbitmq&#39;</span><span class="p">,</span> <span class="s1">&#39;zeromq&#39;</span><span class="p">,</span> <span class="s1">&#39;hornetq&#39;</span><span class="p">]}}},</span>
</span><span class='line'>     <span class="p">{</span><span class="nx">$project</span><span class="o">:</span><span class="p">{</span><span class="nx">upvotes</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span> <span class="nx">questions</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span> <span class="nx">ratio</span><span class="o">:</span><span class="p">{</span><span class="nx">$divide</span><span class="o">:</span><span class="p">[</span><span class="s1">&#39;$upvotes&#39;</span><span class="p">,</span> <span class="s1">&#39;$questions&#39;</span><span class="p">]}}},</span>
</span><span class='line'>     <span class="p">{</span><span class="nx">$sort</span><span class="o">:</span><span class="p">{</span><span class="nx">ratio</span><span class="o">:-</span><span class="mi">1</span><span class="p">}}</span>
</span><span class='line'><span class="p">])[</span><span class="s1">&#39;result&#39;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;zeromq&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;upvotes&quot;</span> <span class="o">:</span> <span class="mi">1469</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;questions&quot;</span> <span class="o">:</span> <span class="mi">338</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;ratio&quot;</span> <span class="o">:</span> <span class="mf">4.346153846153846</span>
</span><span class='line'>     <span class="p">},</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;rabbitmq&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;upvotes&quot;</span> <span class="o">:</span> <span class="mi">2437</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;questions&quot;</span> <span class="o">:</span> <span class="mi">858</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;ratio&quot;</span> <span class="o">:</span> <span class="mf">2.84032634032634</span>
</span><span class='line'>     <span class="p">},</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;activemq&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;upvotes&quot;</span> <span class="o">:</span> <span class="mi">2199</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;questions&quot;</span> <span class="o">:</span> <span class="mi">902</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;ratio&quot;</span> <span class="o">:</span> <span class="mf">2.4379157427937916</span>
</span><span class='line'>     <span class="p">},</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;hornetq&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;upvotes&quot;</span> <span class="o">:</span> <span class="mi">262</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;questions&quot;</span> <span class="o">:</span> <span class="mi">156</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;ratio&quot;</span> <span class="o">:</span> <span class="mf">1.6794871794871795</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, ZeroMQ users post more useful answers than others.</p>

<p>To complete the picture of typical users, let&rsquo;s run the following query that calculates an average reputation of people that post answers</p>

<figure class='code'><figcaption><span>Reputation of respondents </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">stackoverflow</span><span class="p">.</span><span class="nx">aggregate</span><span class="p">([</span>
</span><span class='line'>     <span class="p">{</span><span class="nx">$unwind</span><span class="o">:</span><span class="s1">&#39;$answers&#39;</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="nx">$unwind</span><span class="o">:</span><span class="s1">&#39;$tags&#39;</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="nx">$group</span><span class="o">:</span><span class="p">{</span><span class="nx">_id</span><span class="o">:</span><span class="p">{</span><span class="nx">question</span><span class="o">:</span><span class="s1">&#39;$_id&#39;</span><span class="p">,</span> <span class="nx">tag</span><span class="o">:</span><span class="s1">&#39;$tags&#39;</span><span class="p">},</span> <span class="nx">reputation</span><span class="o">:</span><span class="p">{</span><span class="nx">$avg</span><span class="o">:</span><span class="s1">&#39;$answers.owner.reputation&#39;</span><span class="p">}}},</span>
</span><span class='line'>     <span class="p">{</span><span class="nx">$group</span><span class="o">:</span><span class="p">{</span><span class="nx">_id</span><span class="o">:</span><span class="s1">&#39;$_id.tag&#39;</span><span class="p">,</span> <span class="nx">reputation</span><span class="o">:</span><span class="p">{</span><span class="nx">$avg</span><span class="o">:</span><span class="s1">&#39;$reputation&#39;</span><span class="p">}}},</span>
</span><span class='line'>     <span class="p">{</span><span class="nx">$match</span><span class="o">:</span><span class="p">{</span><span class="nx">_id</span><span class="o">:</span><span class="p">{</span><span class="nx">$in</span><span class="o">:</span><span class="p">[</span><span class="s1">&#39;activemq&#39;</span><span class="p">,</span> <span class="s1">&#39;rabbitmq&#39;</span><span class="p">,</span> <span class="s1">&#39;zeromq&#39;</span><span class="p">,</span> <span class="s1">&#39;hornetq&#39;</span><span class="p">]}}},</span>
</span><span class='line'>     <span class="p">{</span><span class="nx">$sort</span><span class="o">:</span><span class="p">{</span><span class="nx">reputation</span><span class="o">:-</span><span class="mi">1</span><span class="p">}}</span>
</span><span class='line'><span class="p">])[</span><span class="s1">&#39;result&#39;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;zeromq&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;reputation&quot;</span> <span class="o">:</span> <span class="mf">10088.29552338687</span>
</span><span class='line'>     <span class="p">},</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;activemq&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;reputation&quot;</span> <span class="o">:</span> <span class="mf">7298.7539383380845</span>
</span><span class='line'>     <span class="p">},</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;rabbitmq&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;reputation&quot;</span> <span class="o">:</span> <span class="mf">6082.172231934734</span>
</span><span class='line'>     <span class="p">},</span>
</span><span class='line'>     <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;hornetq&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;reputation&quot;</span> <span class="o">:</span> <span class="mf">3472.9658119658116</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wow. ZeroMQ users not only ask more useful questions and give useful answers, they also have higher reputation on average in the StackOverflow community.</p>

<p>As a final exercise, I want to build a graph of question distribution over time. After all, ActiveMQ is the oldest broker, and it might have got more questions just because it was launched first. For this purpose I created <a href="https://gist.github.com/4276136#file-trends-py">this</a> Python script that uses amazing <a href="http://matplotlib.org/gallery.html">matplotlib</a> library. And here is the result for the last 60 months</p>

<p><img class="center" src="http://blog.ndpar.com/images/posts/mom-trends-so.png"></p>

<p>It shows that the proportion of interest in different massaging systems was approximately the same all the time. Furthermore, the StackOverflow statistics of this year correlates well with the Google statistics.</p>

<h2>Conclusion</h2>

<ol>
<li><p>RabbitMQ and ActiveMQ are very popular. If you choose one of them for your messaging infrastructure, you shouldn&rsquo;t have any problem with the community support. HornetQ might be a good message broker but it definitely lacks the community interest. Finally, as I <a href="http://blog.ndpar.com/2012/11/12/pycon-canada-2012/#learn">suspected</a> before, ZeroMQ is worth looking at. There are bunch of smart and helpful people in ZeroMQ community.</p></li>
<li><p>MongoDB is really nice! Its aggregation framework is powerful and easy to use. It was fun playing with it.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Retreat 2012]]></title>
    <link href="http://blog.ndpar.com/2012/12/09/code-retreat-2012/"/>
    <updated>2012-12-09T07:00:00-05:00</updated>
    <id>http://blog.ndpar.com/2012/12/09/code-retreat-2012</id>
    <content type="html"><![CDATA[<p>Yesterday was the Global Day of Code Retreat. Software engineers around the globe met together to learn from each other.</p>

<p><img class="center" src="https://pbs.twimg.com/media/A9mptOCCAAE0d7z.jpg" title="CR2012 1" ></p>

<p>There were several sessions where people were pair-programming <a href="http://en.wikipedia.org/wiki/Conway's_Game_of_Life">Conway&rsquo;s Game of Life</a>.</p>

<p><img class="center" src="https://pbs.twimg.com/media/A9nZYcTCQAEVtkP.jpg" title="CR2012 2" ></p>

<p>Each session you had to choose a new partner, so that both of you can learn something new.</p>

<p><img class="center" src="https://pbs.twimg.com/media/A9n_aHzCcAARnkJ.jpg" title="CR2012 3" ></p>

<p>During the first session my partner and I decided to implement the Game in Java, mainly because it was the language she was most comfortable with. We implemented the procedural solution using two-dimensional array and nested loops. At that moment that was the only solution I could think of. The main challenge was to cover all edge cases and fix all <code>ArrayIndexOutOfBoundsException</code>s. Java is fairly verbose language, and with nested loops and if-else statements the final solution was pretty hard to read. You can see <a href="http://rosettacode.org/wiki/Conway's_Game_of_Life#Java">here</a> how it might look like.</p>

<p>First session was a warmup, during which most people realized that programming arrays is a tedious work. For the second session my new partner suggested an object-oriented approach, where you would operate on Cell objects that would encapsulate coordinates on the grid. In this case you move the game logic from the grid to the cell, making it easier to calculate a new state. This was my first acquaintance with C#. Interesting language — basically, Java with lambdas. Here is an <a href="http://rosettacode.org/wiki/Conway's_Game_of_Life#C.23">example</a> of C# implementation. Our solution was very similar.</p>

<p>While the first session&rsquo;s data structure was array of booleans, on the second session it was replaced by a list of objects. The next step would be to relax the data structure even further. We decided to experiment with un-ordered set of coordinate pairs. For language we chose Clojure. Although we didn&rsquo;t finish the implementation, by the end of the session we had a clear picture how to solve the problem in functional style.</p>

<p>On the fourth session the facilitators put an interesting constraint: the coding must be done in absolute silence. That was the most amazing experience of the day. Before we started I thought we couldn&rsquo;t accomplish much without talking. As it turned out, we could. The key of effective silent coding is to use the tools which both partners are familiar with. In our case we both were advanced users of Vim, and we knew Lisp languages. Our Clojure implementation was based on map/filter/reduce approach and spanned 20 lines of code. After the session <a href="http://langnostic.blogspot.com">Leo</a> showed me Christophe Grand&rsquo;s <a href="http://clj-me.cgrand.net/2011/08/19/conways-game-of-life/">7-line solution</a> based on list comprehensions. It is so wonderful that I want to post it here</p>

<figure class='code'><figcaption><span>life.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">neighbours</span> <span class="p">[[</span><span class="nv">x</span> <span class="nv">y</span><span class="p">]]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">dx</span> <span class="p">[</span><span class="mi">-1</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">]</span> <span class="nv">dy</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">zero? </span><span class="nv">dx</span><span class="p">)</span> <span class="p">[</span><span class="mi">-1</span> <span class="mi">1</span><span class="p">]</span> <span class="p">[</span><span class="mi">-1</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">])]</span>
</span><span class='line'>    <span class="p">[(</span><span class="nb">+ </span><span class="nv">dx</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">dy</span> <span class="nv">y</span><span class="p">)]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">step</span> <span class="p">[</span><span class="nv">cells</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">set </span><span class="p">(</span><span class="nb">for </span><span class="p">[[</span><span class="nv">loc</span> <span class="nv">n</span><span class="p">]</span> <span class="p">(</span><span class="nf">frequencies</span> <span class="p">(</span><span class="nb">mapcat </span><span class="nv">neighbours</span> <span class="nv">cells</span><span class="p">))</span>
</span><span class='line'>             <span class="ss">:when</span> <span class="p">(</span><span class="nb">or </span><span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nf">cells</span> <span class="nv">loc</span><span class="p">)))]</span>
</span><span class='line'>         <span class="nv">loc</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the last session we chose Erlang. Because we already knew how to implement the functional solution, that was just an exercise of translating Clojure code into Erlang. Unfortunately we didn&rsquo;t find an equivalent of <code>frequencies</code> function in the standard library, so we implemented it ourselves. Other than that, the Erlang code is almost identical to Clojure.</p>

<figure class='code'><figcaption><span>life.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">import</span><span class="p">(</span><span class="n">sets</span><span class="p">,</span> <span class="p">[</span><span class="n">from_list</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">to_list</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">is_element</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">neighbours</span><span class="p">({</span><span class="nv">X</span><span class="p">,</span> <span class="nv">Y</span><span class="p">})</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">[{</span><span class="nv">X</span> <span class="o">+</span> <span class="nv">DX</span><span class="p">,</span> <span class="nv">Y</span> <span class="o">+</span> <span class="nv">DY</span><span class="p">}</span> <span class="p">||</span> <span class="nv">DX</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="nv">DY</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">{</span><span class="nv">DX</span><span class="p">,</span> <span class="nv">DY</span><span class="p">}</span> <span class="o">=/=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">}].</span>
</span><span class='line'>
</span><span class='line'><span class="nf">step</span><span class="p">(</span><span class="nv">Cells</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">Nbs</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">flatmap</span><span class="p">(</span><span class="k">fun</span> <span class="n">neighbours</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">to_list</span><span class="p">(</span><span class="nv">Cells</span><span class="p">)),</span>
</span><span class='line'>    <span class="nv">NewCells</span> <span class="o">=</span> <span class="p">[</span><span class="nv">C</span> <span class="p">||</span> <span class="p">{</span><span class="nv">C</span><span class="p">,</span> <span class="nv">N</span><span class="p">}</span> <span class="o">&lt;-</span> <span class="n">frequencies</span><span class="p">(</span><span class="nv">Nbs</span><span class="p">),</span>
</span><span class='line'>                     <span class="p">(</span><span class="nv">N</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span> <span class="ow">orelse</span> <span class="p">((</span><span class="nv">N</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="ow">andalso</span> <span class="n">is_element</span><span class="p">(</span><span class="nv">C</span><span class="p">,</span> <span class="nv">Cells</span><span class="p">))],</span>
</span><span class='line'>    <span class="n">from_list</span><span class="p">(</span><span class="nv">NewCells</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">frequencies</span><span class="p">(</span><span class="nv">List</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">frequencies</span><span class="p">(</span><span class="nv">List</span><span class="p">,</span> <span class="p">[]).</span>
</span><span class='line'><span class="nf">frequencies</span><span class="p">([],</span> <span class="nv">Acc</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">Acc</span><span class="p">;</span>
</span><span class='line'><span class="nf">frequencies</span><span class="p">([</span><span class="nv">X</span><span class="p">|</span><span class="nv">Xs</span><span class="p">],</span> <span class="nv">Acc</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">keyfind</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">Acc</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>        <span class="p">{</span><span class="nv">X</span><span class="p">,</span> <span class="nv">F</span><span class="p">}</span> <span class="o">-&gt;</span> <span class="n">frequencies</span><span class="p">(</span><span class="nv">Xs</span><span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">keyreplace</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">Acc</span><span class="p">,</span> <span class="p">{</span><span class="nv">X</span><span class="p">,</span> <span class="nv">F</span><span class="o">+</span><span class="mi">1</span><span class="p">}));</span>
</span><span class='line'>        <span class="n">false</span>  <span class="o">-&gt;</span> <span class="n">frequencies</span><span class="p">(</span><span class="nv">Xs</span><span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">keystore</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">Acc</span><span class="p">,</span> <span class="p">{</span><span class="nv">X</span><span class="p">,</span> <span class="mi">1</span><span class="p">}))</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Summary</h2>

<p>During this day I learnt a lot: new language, new abstractions, new techniques, new ways of communication, new ideas. I met bunch of smart people. I was so overwhelmed with all this cool stuff that I had to write this blog post to offload it from my head.</p>

<p>If you are a programmer and you&rsquo;ve never been to Code Retreat, I strongly encourage you to do it next year. It&rsquo;s an exciting experience.</p>

<p>I want to thank all the people who organized and participated in this event.</p>

<h3>Photo Credits</h3>

<ul>
<li>Michael DiBernardo <a href="https://twitter.com/mdibernardo/status/277439446381625345/photo/1">[1]</a></li>
<li>Kunal Gupta <a href="https://twitter.com/kunalfrompolar/status/277491865991921664/photo/1">[2]</a></li>
<li>Carlo Barrettara <a href="https://twitter.com/barrettara/status/277533676273823746/photo/1">[3]</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flexible language]]></title>
    <link href="http://blog.ndpar.com/2012/11/22/flexible-language/"/>
    <updated>2012-11-22T07:00:00-05:00</updated>
    <id>http://blog.ndpar.com/2012/11/22/flexible-language</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been learning Lisp for few years now, and every Lisp book I read keeps saying that Lisp is a flexible language that you can extend to the degree when it fits naturally to your domain. It&rsquo;s easy to say, but what exactly does this phrase mean? After all, when you program in your non-Lisp language, don&rsquo;t you modify it for your domain problem? I&rsquo;ve been thinking about it for a long time, and only recently I started to understand what flexibility really means. There is a difference between <em>using</em> the language and <em>changing</em> the language to solve a problem. In this post I will try to show the difference based on a simple example.</p>

<h2>Problem</h2>

<p><img class="right" src="http://blog.ndpar.com/images/posts/handlers.png"></p>

<p>Suppose you have a process that listens to a message queue. The messages are just ordinary maps. If the map contains certain keys, one or more handlers must be invoked. Here is a matrix that shows which handler is invoked for which key.</p>

<p>For example, if the map has key <strong><em>a</em></strong>, then DocHandler and AlertHandler need to be called. If it has key <strong><em>b</em></strong>, then NoteHandler and AlertHandler are called. In reality there might be more keys and more handlers, but for simplicity we limit our example to three keys and three handlers.</p>

<!-- more -->


<h2>Java</h2>

<p>Let&rsquo;s see how this can be implemented in Java. I chose Java just as an example of non-Lisp language. You can pick any other non-Lisp language instead.</p>

<figure class='code'><figcaption><span>SimpleMessageListener.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleMessageListener</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span> <span class="nf">onMessage</span><span class="o">(</span><span class="n">Map</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">List</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">isDoc</span><span class="o">(</span><span class="n">message</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">handleDoc</span><span class="o">(</span><span class="n">message</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">isNote</span><span class="o">(</span><span class="n">message</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">handleNote</span><span class="o">(</span><span class="n">message</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">isAlert</span><span class="o">(</span><span class="n">message</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">handleAlert</span><span class="o">(</span><span class="n">message</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Decision makers</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isDoc</span><span class="o">(</span><span class="n">Map</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">message</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">)</span> <span class="o">||</span> <span class="n">message</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="s">&quot;c&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isNote</span><span class="o">(</span><span class="n">Map</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">message</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="s">&quot;b&quot;</span><span class="o">)</span> <span class="o">||</span> <span class="n">message</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="s">&quot;c&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isAlert</span><span class="o">(</span><span class="n">Map</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">message</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">)</span> <span class="o">||</span> <span class="n">message</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="s">&quot;b&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Handlers</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="nf">handleDoc</span><span class="o">(</span><span class="n">Map</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;Document:%s:%s&quot;</span><span class="o">,</span> <span class="n">message</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">),</span> <span class="n">message</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;c&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="nf">handleNote</span><span class="o">(</span><span class="n">Map</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;Note:%s:%s&quot;</span><span class="o">,</span> <span class="n">message</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;b&quot;</span><span class="o">),</span> <span class="n">message</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;c&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="nf">handleAlert</span><span class="o">(</span><span class="n">Map</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;Alert:%s:%s&quot;</span><span class="o">,</span> <span class="n">message</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">),</span> <span class="n">message</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;b&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The internals of <code>handle</code> methods might be very different in reality. Consider the fact they have the same structure here as a coincidence. What is not coincidence though is the structure of <code>is</code> methods. Those methods are identical indeed.</p>

<p>Is this code clean? I would say, no. The main issue is that it&rsquo;s split in three separate but closely related parts. If tomorrow I introduce another message key and a new handler, I have to change three places in the code. Another problem is the code duplication in two spots: a series of <code>if</code> statements and a group of <code>is</code> methods.</p>

<p>The last thing to notice about this code is that it&rsquo;s hard to see what kind of problem it&rsquo;s trying to solve. If I didn&rsquo;t provide a matrix which maps message keys to handlers, it would take even more time to figure out what the code is doing.</p>

<p>Can we make this code better? Let&rsquo;s rewrite it as follows:</p>

<figure class='code'><figcaption><span>FunctionalMessageListener.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FunctionalMessageListener</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">interface</span> <span class="nc">Handler</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">Map</span> <span class="n">message</span><span class="o">,</span> <span class="n">List</span> <span class="n">acc</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">DocHandler</span> <span class="kd">implements</span> <span class="n">Handler</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isDoc</span><span class="o">(</span><span class="n">Map</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">message</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">)</span> <span class="o">||</span> <span class="n">message</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="s">&quot;c&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">Map</span> <span class="n">message</span><span class="o">,</span> <span class="n">List</span> <span class="n">acc</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">isDoc</span><span class="o">(</span><span class="n">message</span><span class="o">))</span> <span class="n">acc</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;Document:%s:%s&quot;</span><span class="o">,</span> <span class="n">message</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">),</span> <span class="n">message</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;c&quot;</span><span class="o">)));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">NoteHandler</span> <span class="kd">implements</span> <span class="n">Handler</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isNote</span><span class="o">(</span><span class="n">Map</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">message</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="s">&quot;b&quot;</span><span class="o">)</span> <span class="o">||</span> <span class="n">message</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="s">&quot;c&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">Map</span> <span class="n">message</span><span class="o">,</span> <span class="n">List</span> <span class="n">acc</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">isNote</span><span class="o">(</span><span class="n">message</span><span class="o">))</span> <span class="n">acc</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;Note:%s:%s&quot;</span><span class="o">,</span> <span class="n">message</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;b&quot;</span><span class="o">),</span> <span class="n">message</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;c&quot;</span><span class="o">)));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">AlertHandler</span> <span class="kd">implements</span> <span class="n">Handler</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isAlert</span><span class="o">(</span><span class="n">Map</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">message</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">)</span> <span class="o">||</span> <span class="n">message</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="s">&quot;b&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">Map</span> <span class="n">message</span><span class="o">,</span> <span class="n">List</span> <span class="n">acc</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">isAlert</span><span class="o">(</span><span class="n">message</span><span class="o">))</span> <span class="n">acc</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;Alert:%s:%s&quot;</span><span class="o">,</span> <span class="n">message</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">),</span> <span class="n">message</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;b&quot;</span><span class="o">)));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Handler</span><span class="o">&gt;</span> <span class="nf">handlers</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="k">new</span> <span class="n">DocHandler</span><span class="o">(),</span> <span class="k">new</span> <span class="n">NoteHandler</span><span class="o">(),</span> <span class="k">new</span> <span class="n">AlertHandler</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span> <span class="nf">onMessage</span><span class="o">(</span><span class="n">Map</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">List</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Handler</span> <span class="n">handler</span> <span class="o">:</span> <span class="n">handlers</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">handler</span><span class="o">.</span><span class="na">handle</span><span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this version we eliminated ugly <code>if</code> series, and grouped together <em>decision making</em> logic and <em>message handling</em>. From that perspective the code became cleaner, but not necessarily clearer. Now it actually takes more effort to understand what the code is doing. Also, the duplication inside the <code>is</code> methods is still there. We can fix it by extracting it to some abstract class or utility method. We can also use Java reflection within <code>handlers</code> method to build a collection of handlers without explicitly specifying them. All these manipulations arguably make the code cleaner, but&hellip; one thing we&rsquo;ll never be able to fix is the separation between decision making logic and message handling. <em>Whatever you do, there will always be the if-statement, in one form or another, that checks if you need to process the message, and the message processing logic itself.</em> Those two things will always be separate. This is the point where we hit the language limits.</p>

<h2>Clojure</h2>

<p>Now let&rsquo;s try to solve the same problem in Lisp and see if we can fix the language to eliminate the last issue from the paragraph above. Here is the direct translation of the previous Java snippet to Clojure dialect of Lisp</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">doc-handler</span> <span class="p">[</span><span class="nv">msg</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">a</span> <span class="p">(</span><span class="nf">msg</span> <span class="ss">:a</span><span class="p">)</span>, <span class="nv">c</span> <span class="p">(</span><span class="nf">msg</span> <span class="ss">:c</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">or </span><span class="nv">a</span> <span class="nv">c</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;Document:%s:%s&quot;</span> <span class="nv">a</span> <span class="nv">c</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">note-handler</span> <span class="p">[</span><span class="nv">msg</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">b</span> <span class="p">(</span><span class="nf">msg</span> <span class="ss">:b</span><span class="p">)</span>, <span class="nv">c</span> <span class="p">(</span><span class="nf">msg</span> <span class="ss">:c</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">or </span><span class="nv">b</span> <span class="nv">c</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;Note:%s:%s&quot;</span> <span class="nv">b</span> <span class="nv">c</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">alert-handler</span> <span class="p">[</span><span class="nv">msg</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">a</span> <span class="p">(</span><span class="nf">msg</span> <span class="ss">:a</span><span class="p">)</span>, <span class="nv">b</span> <span class="p">(</span><span class="nf">msg</span> <span class="ss">:b</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">or </span><span class="nv">a</span> <span class="nv">b</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;Alert:%s:%s&quot;</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">handlers</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">doc-handler</span> <span class="nv">note-handler</span> <span class="nv">alert-handler</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">on-message</span> <span class="p">[</span><span class="nv">msg</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">letfn</span> <span class="p">[(</span><span class="nf">handle</span> <span class="p">[</span><span class="nv">acc</span> <span class="nv">h</span><span class="p">]</span>
</span><span class='line'>            <span class="p">(</span><span class="nb">if-let </span><span class="p">[</span><span class="nv">res</span> <span class="p">(</span><span class="nf">h</span> <span class="nv">msg</span><span class="p">)]</span>
</span><span class='line'>              <span class="p">(</span><span class="nb">conj </span><span class="nv">acc</span> <span class="nv">res</span><span class="p">)</span>
</span><span class='line'>              <span class="nv">acc</span><span class="p">))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">reduce </span><span class="nv">handle</span> <span class="p">[]</span> <span class="p">(</span><span class="nf">handlers</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code is already easier to read, but we can do even better. The separation between decision making logic and message handling is still there. At this point we should ask the question: what kind of code do we want to see there? And the answer is: we want to replace the <code>-handler</code> methods above with the following code</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">handler</span> <span class="nb">doc </span><span class="p">[</span><span class="nv">a</span> <span class="nv">c</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;Document:%s:%s&quot;</span> <span class="nv">a</span> <span class="nv">c</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">handler</span> <span class="nv">note</span> <span class="p">[</span><span class="nv">b</span> <span class="nv">c</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;Note:%s:%s&quot;</span> <span class="nv">b</span> <span class="nv">c</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">handler</span> <span class="nv">alert</span> <span class="p">[</span><span class="nv">a</span> <span class="nv">b</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;Alert:%s:%s&quot;</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>You see: no conditionals. Handlers are self-sufficient entities which know <em>when</em> they have to be applied and <em>how</em>. In their signatures they explicitly declare which message keys they expect, and in the body they just <em>use</em> those keys. No boilerplate: clean and simple. The beauty of Lisp is that you can actually implement that code. The way you do it is by creating a macro which generates the appropriate functions. Creating a macro is not a simple task, I spent quite some time to get this one working, but it&rsquo;s worth of doing, because it makes the code clean and clear.</p>

<p>We can make one additional step further by moving the <code>handler</code> declarations inside the <code>build-handlers</code> function. (We need one small macro for that.) And here is the final solution</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">handler</span> <span class="p">[</span><span class="nb">name </span><span class="nv">args</span> <span class="o">&amp;</span> <span class="nv">body</span><span class="p">]</span>
</span><span class='line'>  <span class="o">`</span><span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="o">~</span><span class="ss">&#39;msg</span><span class="p">]</span>
</span><span class='line'>     <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="o">~@</span><span class="p">(</span><span class="nb">interleave </span><span class="nv">args</span> <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="o">`</span><span class="p">(</span><span class="nb">get </span><span class="o">~</span><span class="ss">&#39;msg</span> <span class="o">~</span><span class="p">(</span><span class="nb">keyword </span><span class="nv">x</span><span class="p">)))</span> <span class="nv">args</span><span class="p">))]</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">or </span><span class="o">~@</span><span class="nv">args</span><span class="p">)</span>
</span><span class='line'>         <span class="o">~@</span><span class="nv">body</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">build-handlers</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">body</span><span class="p">]</span>
</span><span class='line'>  <span class="o">`</span><span class="p">(</span><span class="kd">defn- </span><span class="nv">handlers</span> <span class="p">[]</span>
</span><span class='line'>     <span class="p">[</span><span class="o">~@</span><span class="nv">body</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">build-handlers</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">handler</span> <span class="nb">doc </span><span class="p">[</span><span class="nv">a</span> <span class="nv">c</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;Document:%s:%s&quot;</span> <span class="nv">a</span> <span class="nv">c</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">handler</span> <span class="nv">note</span> <span class="p">[</span><span class="nv">b</span> <span class="nv">c</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;Note:%s:%s&quot;</span> <span class="nv">b</span> <span class="nv">c</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">handler</span> <span class="nv">alert</span> <span class="p">[</span><span class="nv">a</span> <span class="nv">b</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;Alert:%s:%s&quot;</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">on-message</span> <span class="p">[</span><span class="nv">msg</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">letfn</span> <span class="p">[(</span><span class="nf">handle</span> <span class="p">[</span><span class="nv">acc</span> <span class="nv">h</span><span class="p">]</span>
</span><span class='line'>            <span class="p">(</span><span class="nb">if-let </span><span class="p">[</span><span class="nv">res</span> <span class="p">(</span><span class="nf">h</span> <span class="nv">msg</span><span class="p">)]</span>
</span><span class='line'>              <span class="p">(</span><span class="nb">conj </span><span class="nv">acc</span> <span class="nv">res</span><span class="p">)</span>
</span><span class='line'>              <span class="nv">acc</span><span class="p">))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">reduce </span><span class="nv">handle</span> <span class="p">[]</span> <span class="p">(</span><span class="nf">handlers</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>As I said, the first macro might be cryptic, but look at the lines 11–20. This is the essence of our problem, and it cannot be done any simpler. Suppose, we need to implement a new handler which should be called if key <strong><em>c</em></strong> is present in the message. Here what we would need to add to <code>build-handler</code>&rsquo;s body to implement this new requirement</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>  <span class="p">(</span><span class="nf">handler</span> <span class="k">new </span><span class="p">[</span><span class="nv">c</span><span class="p">]</span>
</span><span class='line'>    <span class="nv">...</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Simple, right? And what if a new key <strong><em>d</em></strong> is added to the message that should be processed by document handler? Here is what we need to change</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>  <span class="p">(</span><span class="nf">handler</span> <span class="nb">doc </span><span class="p">[</span><span class="nv">a</span> <span class="nv">c</span> <span class="nv">d</span><span class="p">]</span>
</span><span class='line'>    <span class="nv">...</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We just add a new key to the function&rsquo;s parameter list. That&rsquo;s it — one-word change.</p>

<h2>Summary</h2>

<p>Lisp is the most powerful programming language. By that I mean you can change the language in such a way that the solution to any particular problem can be expressed in the simplest possible way. By changing the language, you can remove all the barriers between the language and the problem domain. I hope I demonstrated this in my simple example.</p>

<h2>Resources</h2>

<p>Clojure <a href="https://github.com/ndpar/clojure/blob/master/src/dojo/handler.clj">source</a> code for this blog, along with the <a href="https://github.com/ndpar/clojure/blob/master/test/dojo/handler_test.clj">unit tests</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PyCon Canada 2012]]></title>
    <link href="http://blog.ndpar.com/2012/11/12/pycon-canada-2012/"/>
    <updated>2012-11-12T15:40:01-05:00</updated>
    <id>http://blog.ndpar.com/2012/11/12/pycon-canada-2012</id>
    <content type="html"><![CDATA[<p>This weekend I attended <a href="http://pycon.ca/">PyCon Canada</a>, the first conference in Canada dedicated to Python ecosystem. As you might find from my blog, I&rsquo;m not a Python guy. I&rsquo;ve been using Python mostly as a scripting language. I went to this conference for fresh ideas, or, as Michael Feathers said, for cross-polination from Python community. This blog post is not a detailed review of the conference — I just want to share my impression in general.</p>

<h2>Organization</h2>

<p>Considering how little time the organizers had for preparing this conference, 5 months I believe, they did amazing job. They invited great speakers. They kept people well informed using mailing list and Twitter. The official web site was clear and easy to navigate. The location was good. The food was decent. The only complaint I had is about the temperature in the rooms on the first day. It was so freezing cold inside that I had to wear my jacket all the time. But on the second day the problem was fixed.</p>

<h2>Keynotes</h2>

<p>Keynotes were absolutely fantastic. There were three of them. Jessica McKellar was talking about Python community. How they foster it, how they attract new people to programming in general and to Python in particular. She shared her experience from organizing Boston Python user group, the biggest Python user group in the world. The takeaway from her talk: Python community is big, welcoming, and well supported by Python Foundation.</p>

<p>Second keynote was Michael Feathers&#8217; <em>Why You Should(n&rsquo;t) be Using a Functional Programming Language Instead</em>. The main idea of his talk is: Don&rsquo;t lock yourself inside one language. Go outside of your community to see what other languages exist out there, how they solved the problems. Study those languages, learn their idioms and techniques, and then go back to your language and start using the ideas you&rsquo;ve learnt. I completely agree with that, and that&rsquo;s why I went to this conference in the first place. He gave bunch of examples of functional programming in Haskell. Then he showed his Ruby code written in functional style, where you could see the influence of Haskell. I liked his presentation because he verbalized the ideas I myself have been thinking about for a while. When I started programming in Groovy my Groovy code was basically a Java code without semicolons. Now my Java code looks more like Groovy.</p>

<p>The closing keynote was by Fernando Pérez, the scientist from University of California, Berkeley, and the creator of IPython. The talk, titled <a href="https://speakerdeck.com/fperez/science-and-python-a-interactively-biased-retrospective-of-a-mostly-successful-decade"><em>Science and Python</em></a>,  was really mind blowing. When I was a student I did all my computations using mainly Fortran and some proprietary software I don&rsquo;t even remember the name of. Later, I played with Mathematica and Octave a little bit. But I didn&rsquo;t know that you can do very sophisticated scientific calculations using Python. Fernando gave some examples from neuroscience, astrophysics and biology, and it&rsquo;s really impressive. The discovery of Supernova PTF11kyl is especially astonishing. From now on, if I need to do some math, I&rsquo;ll be using Python libraries; no more proprietary expensive software. Another theme of the presentation was IPython. Initially I thought it&rsquo;s just a shell on top of the standard Python, but it&rsquo;s actually the whole ecosystem. I cannot explain in a few words how amazing it is. Just google for &ldquo;ipython notebook&rdquo; or read Fernando&rsquo;s <a href="http://blog.fperez.org/2012/09/blogging-with-ipython-notebook.html">blog</a>.</p>

<h2>Talks</h2>

<p>As it happens on every conference, there were some great talks and some lousy talks, interesting talks and boring talks, geeky talks and academic talks. It&rsquo;s all normal and fine. The good thing about this conference though is that signal-noise ratio was pretty high; congratulations to the organizers for choosing talks. Another thing I like is the diversity of formats. There were 45-min presentation, 20-min talks, 5-min lightning talks, 90-min tutorials, and 3-hour workshop (there are also two full day coding sessions but I&rsquo;m not attending them). This is a really good approach. Switching between different formats during the day helps your brain functioning more productive, in my opinion.</p>

<h2>Pleasant discoveries</h2>

<p>I found many projects presented at the conference are using RabbitMQ, and that&rsquo;s great. I wish in Java world people would use AMQP more frequently instead of blindly choosing JMS for every new project.</p>

<p>Many people are using MongoDB properly. Nowadays NoSQL is a very popular buzzword, and many projects are using various NoSQL databases just because it&rsquo;s cool, even if it makes no sense for the project at all. It was nice to see that there are developers out there who do their homework and adopt NoSQL because it fits their domain.</p>

<h2>Unpleasant discoveries</h2>

<p>There seems to be a trend in Python community to despise Java. I actually see this trend in many communities outside of Java, so it&rsquo;s not Python specific, but at this conference I&rsquo;ve heard too many jokes about Java so it&rsquo;s not funny anymore, especially hearing them from the people who don&rsquo;t write a line of code in Java.</p>

<p>Another thing surprised me is the fanatic admiration of Mercurial and hate of Git from some Python programmers. I know lots of people who hate Git, mainly because they are confused and scared by Git. But dislike it for the reason not being written in Python is something new to me.</p>

<h2>Problems in Python</h2>

<p>Package and distribution management in Python is in pretty bad shape. Every person I talked to admitted that it&rsquo;s complete mess at the moment. I myself feel that pain every time I need to install a new library. Which tool should I use: pip, easy_install, pysetup? Some libraries installed using those tools don&rsquo;t work, or work partially. Many programmers use rpm or deb packages instead of Python tools, because OS packages usually work. I came to the same conclusion on my Mac OS. The only flawlessly working Python environment I have is that installed via mac ports. In Java we don&rsquo;t have those problems. Maven solved it once and for all long time ago. Now every JVM language benefits from it. Python community should clean up this mess and standardize their tools. I was told that with introducing PyPi and PEPs the situation is getting better, well, let&rsquo;s see if it resolves all the issues.</p>

<h2>What I&rsquo;ve learnt</h2>

<p>Here is the list of things I found pretty interesting, in no particular order.</p>

<h3>Python libraries to use</h3>

<p>numpy, matplotlib, pandas, scipy, sympy, quantities, collections. Thanks to the people who told me about these libraries.</p>

<h3>Cool Python stuff</h3>

<p>RunSnakeRun &#8212; GUI for Python profiler. Check out the screenshots on their <a href="http://www.vrplumber.com/programming/runsnakerun/">web site</a>. I wish Java profilers could draw such nice graphs.</p>

<p><a href="http://bpython-interpreter.org/screenshots/">bpython</a> &#8212; Python REPL for geeks written in <a href="http://excess.org/urwid/examples.html">Urwid</a>. Thanks to Ian Ward for the really nice <a href="http://pyvideo.org/video/1568/console-applications-with-urwid">presentation</a>.</p>

<h3>Interesting ideas</h3>

<p>Print log statements in JSON format so that you can analyze them using powerful tools. You can also save logs in MongoDB, either offline or asynchronously, and do statistic analysis using aggregation framework.</p>

<p>Write stored procedures in PostgreSQL in Python (and some other languages). They look much better in Python than plSQL.</p>

<h2>Things to learn<a name="learn">&nbsp;</a></h2>

<p>Here are some technology and tools that have a great potential, in my opinion, and worthy of learning: ZeroMQ, IPython, OpenStack. Those were mentioned multiple times during the conference, and I need to check them out in more details.</p>

<h2>Summary</h2>

<p>The conference was great. I&rsquo;m glad I attended it. The organizers did a great job. The conference was beneficial not only to Python community but to Toronto programming community in general. Thanks to all who made it happen.</p>

<p>P.S. Videos from the conference are available <a href="http://pyvideo.org/category/25/pycon-ca-2012">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple web application in Clojure]]></title>
    <link href="http://blog.ndpar.com/2012/11/08/simple-web-application-in-clojure/"/>
    <updated>2012-11-08T07:00:00-05:00</updated>
    <id>http://blog.ndpar.com/2012/11/08/simple-web-application-in-clojure</id>
    <content type="html"><![CDATA[<p>This blog entry is a micro-tutorial on how to build a simple web application in Clojure. The reason I call it micro will be clear when I introduce the framework we are going to use. This tutorial will be interesting to programmers relatively new to Clojure, but who have some experience with web frameworks in other languages, for instance Spring MVC. The goal of this tutorial is to help you get started with web development in Clojure. Also I want to share my approach to web development in general and in Clojure in particular. This approach is by no means the best way to develop web applications, but because I like to watch how other people write the software, I thought somebody might be interested to see how I do it.</p>

<!-- more -->


<h2>Problem</h2>

<p>So what are we going to build? I don&rsquo;t want to build a simplistic web application for the sake of building the application. On the other hand, I want to constrain myself to small feature set to prevent this tutorial from sinking in too many details. After thinking a while I found a problem which looks pretty simple, but at the same time there is a good chance people (including myself in the first place) will actually use the program I&rsquo;m going to create. And here is the problem.</p>

<p>I have a bunch of articles and e-books sitting in some directory on my home server. To be able to read those books from any computer in my home network, I run the simple Python web-server, which exposes the content of the directory via HTTP. If you are curious, here is the command I&rsquo;m using:</p>

<pre><code>$ cd /path/to/your/ebook/dir
$ python -m SimpleHTTPServer 3030
</code></pre>

<p>And here is how the &ldquo;library&rdquo; looks like in the browser</p>

<p><img class="center" src="http://blog.ndpar.com/images/posts/bookshelf1.png"></p>

<p>This library application is good enough for me, mainly because it&rsquo;s functional. I can easily find the book by skimming the page or using Find command in a browser. But for the purpose of this tutorial I want to make it slightly better. For example, I can split the file names and display the books in a table view, where I can see clearly what the name of the book is, who the author is, and when it was pablished. I can even add sorting as a bonus feature. Basically, I want something like this</p>

<p><img class="center" src="http://blog.ndpar.com/images/posts/bookshelf2.png"></p>

<p>As you can imagine, it shouldn&rsquo;t be hard to do this. The file names are already in the form that is easy to parse. So the question is really how to show the table data in a browser. Simple problem, minimum requirements. Let&rsquo;s see how to solve it in Clojure.</p>

<h2>Tools</h2>

<p>Clojure, being a Lisp descendant, is a powerful language. That means you can create your own web framework during a weekend, which many people actually do. But I think it&rsquo;s much better to take existing library, promote it, enhance it, fix the bugs if you like it. In Clojure I found such a framework, it&rsquo;s called <a href="http://www.webnoir.org/">Noir</a>. This framework is very small, so small that their developers call it micro-framework, that&rsquo;s why I&rsquo;m calling this tutorial micro-tutorial. Probably we shouldn&rsquo;t even call it framework at all, library would probably be a better name. The closest analog to Noir in other languages I know is probably <a href="http://wiki.basho.com/Webmachine.html">Webmachine</a> in Erlang, or Spring MVC in Java. I wouldn&rsquo;t compare it to Grails or Rails because those things are huge.</p>

<p>Noir is not only small, it&rsquo;s also simple. You can look at their source code and understand how it works without any problem, provided you have some experience with Clojure. As a result, Noir is a perfect tool for the problem we are going to solve.</p>

<p>Without further ado let&rsquo;s see how Noir works. The easiest way to set up a scaffolding of our future application is by using <a href="http://leiningen.org/">Leiningen</a>. Leiningen is a Clojure build tool, very similar to Maven. In Maven you would do mvn archetype:generate, in Leiningen you run</p>

<pre><code>$ lein new noir bookshelf
</code></pre>

<p>where bookshelf is the name of our application. This creates a directory called bookshelf where you can find some Noir template files, plus Leiningen project descriptor</p>

<pre><code>/.gitignore
/project.clj
/README.md
/resources/public/css/
/resources/public/css/reset.css
/resources/public/img/
/resources/public/js/
/src/bookshelf/models/
/src/bookshelf/server.clj
/src/bookshelf/views/common.clj
/src/bookshelf/views/welcome.clj
/test/bookshelf/
</code></pre>

<p>You can ignore <em>.gitignore</em>, it&rsquo;s already configured properly. Before we make our initial checkin, it&rsquo;s a good practice to edit project.clj and README.md to replace FIXME&rsquo;s. We will edit README file again later when we finish the development to provide more information on how to use the application. Before we move to Noir, let&rsquo;s quickly review project.clj file</p>

<figure class='code'><figcaption><span>project.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defproject </span><span class="nv">bookshelf</span> <span class="s">&quot;0.1.0-SNAPSHOT&quot;</span>
</span><span class='line'>  <span class="ss">:description</span> <span class="s">&quot;Bookshelf site&quot;</span>
</span><span class='line'>  <span class="ss">:dependencies</span> <span class="p">[[</span><span class="nv">org.clojure/clojure</span> <span class="s">&quot;1.4.0&quot;</span><span class="p">]</span>
</span><span class='line'>                 <span class="p">[</span><span class="nv">noir</span> <span class="s">&quot;1.3.0-beta3&quot;</span><span class="p">]]</span>
</span><span class='line'>  <span class="ss">:main</span> <span class="nv">bookshelf.server</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>project.clj</em> is a Clojure version of pom.xml (in fact, you can use pom.xml if you want, Clojure perfectly understands it). First two lines are obvious. Dependency entry specifies which JAR files we need to make our application work. In our case we only need two JARs. Leiningen will check Maven central repository as well as <a href="https://clojars.org/">Clojars</a> to download the required JARs with all transitive dependencies. The last line in the project descriptor says which namespace contains the main method. In our case it is <code>bookshelf.server</code>. You can find the source of this namespace in <em>/src/bookshelf/server.clj</em> file. Let&rsquo;s take a look at this file</p>

<figure class='code'><figcaption><span>/src/bookshelf/server.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">bookshelf.server</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">noir.server</span> <span class="ss">:as</span> <span class="nv">server</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">server/load-views-ns</span> <span class="ss">&#39;bookshelf.views</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">-main</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">m</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">mode</span> <span class="p">(</span><span class="nb">keyword </span><span class="p">(</span><span class="nb">or </span><span class="p">(</span><span class="nb">first </span><span class="nv">m</span><span class="p">)</span> <span class="ss">:dev</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">port</span> <span class="p">(</span><span class="nf">Integer.</span> <span class="p">(</span><span class="nb">get </span><span class="p">(</span><span class="nf">System/getenv</span><span class="p">)</span> <span class="s">&quot;PORT&quot;</span> <span class="s">&quot;8080&quot;</span><span class="p">))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">server/start</span> <span class="nv">port</span> <span class="p">{</span><span class="ss">:mode</span> <span class="nv">mode</span>
</span><span class='line'>                        <span class="ss">:ns</span> <span class="ss">&#39;bookshelf</span><span class="p">})))</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>server/load-views-ns</code> specifies the prefixes of the view namespaces that will be loaded by Noir server. In our case those namespaces start with <code>bookshelf.views</code>. By default Leiningen generates two view files: <em>/bookshelf/views/common.clj</em> and <em>/bookshelf/views/welcome.clj</em>, but you can create more if your project becomes more complex. Since Noir scans namespaces by prefixes, you can even put your files in the nested directories under <em>/bookshelf/views</em>, no changes in <em>server.clj</em> required.</p>

<p>To start Noir server, run</p>

<pre><code>$ lein run
</code></pre>

<p>This will start Jetty web server bound to localhost at port 8080. If you want to change the default port, say to 3030, run the following command</p>

<pre><code>$ export PORT=3030; lein run
</code></pre>

<p>Besides port, you can specify few other parameters such as :mode, :jetty-options, etc. (you can see all available options in the server <a href="https://github.com/noir-clojure/noir/blob/master/src/noir/server.clj">source</a>). I&rsquo;ll show below how to specify production mode, for example, when we deploy the final application.</p>

<p>If you started the server with the default port, open your browser at <a href="http://localhost:8080/">http://localhost:8080</a>. You should see the Noir&rsquo;s start page</p>

<p><img class="center" src="http://blog.ndpar.com/images/posts/bookshelf3.png"></p>

<p>This page by itself contains all you need to get started with Noir, so you can safely stop reading this article, and just follow the instructions on that page. Those who continue reading this tutorial and wondering where that start page is coming from, please open <em>/src/bookshelf/views/welcome.clj</em></p>

<figure class='code'><figcaption><span>/src/bookshelf/views/welcome.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">bookshelf.views.welcome</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">bookshelf.views.common</span> <span class="ss">:as</span> <span class="nv">common</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">noir.content.getting-started</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:use</span> <span class="p">[</span><span class="nv">noir.core</span> <span class="ss">:only</span> <span class="p">[</span><span class="nv">defpage</span><span class="p">]]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defpage</span> <span class="s">&quot;/welcome&quot;</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">common/layout</span>
</span><span class='line'>    <span class="p">[</span><span class="ss">:p</span> <span class="s">&quot;Welcome to bookshelf&quot;</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Third line tells us that the source of the start page is in <em>noir/content/getting-started.clj</em> file. If you are curious where this file is, look <a href="https://github.com/noir-clojure/noir/blob/master/src/noir/content/getting_started.clj">here</a>. Search for <code>(defpage "/" [] …)</code> to see how the start page is defined. On your web-site you probably want the start page to be different, so you can remove <code>[noir.content.getting-started]</code> from <code>:require</code> section.</p>

<p>The next thing to notice on the snippet above is <code>(defpage "/welcome" [] …)</code> function. That&rsquo;s how you define URL mappings (or routes, in Noir lingo) of your web-site. (Internally, Noir uses <a href="https://github.com/weavejester/compojure">Compojure</a> library to handle the routing.) It is similar to @RequestMapping annotations in Spring-MVC, where you specify which method is called when a user hits the given URL. As you can see, we have only one mapping at the moment, <code>/welcome</code>. Since we are building bookshelf application, let&rsquo;s rename it to <code>/books</code>. Also, to be even more explicit, let&rsquo;s rename the whole file to <em>books.clj</em>. Don&rsquo;t forget to update the namespace. Your <em>books.clj</em> file should now look like this</p>

<figure class='code'><figcaption><span>/src/bookshelf/views/books.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">bookshelf.views.books</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">bookshelf.views.common</span> <span class="ss">:as</span> <span class="nv">common</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:use</span> <span class="p">[</span><span class="nv">noir.core</span> <span class="ss">:only</span> <span class="p">[</span><span class="nv">defpage</span><span class="p">]]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defpage</span> <span class="s">&quot;/books&quot;</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">common/layout</span>
</span><span class='line'>    <span class="p">[</span><span class="ss">:p</span> <span class="s">&quot;Welcome to bookshelf&quot;</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you go to <a href="http://localhost:8080/books">http://localhost:8080/books</a> in your browser, you should see this screen</p>

<p><img class="center" src="http://blog.ndpar.com/images/posts/bookshelf4.png"></p>

<p>By looking at the source of this page, you find it a proper HTML with head and body elements. Those are generated by <a href="https://github.com/weavejester/hiccup">Hiccup</a> library, which we&rsquo;ll discuss in a moment. One thing I want to mention about defpage is that you can get the same result if you change <code>/books</code> route definition as follows</p>

<pre><code>(defpage "/books" []
  "&lt;html&gt;
     &lt;head&gt;
       &lt;title&gt;bookshelf&lt;/title&gt;
     &lt;/head&gt;
     &lt;body&gt;
       &lt;p&gt;Welcome to bookshelf&lt;/p&gt;
     &lt;/body&gt;
   &lt;/html&gt;")
</code></pre>

<p>It is just a theoretical exercise, in reality nobody hard-codes the entire HTML inside the Clojure code.</p>

<p>Now let&rsquo;s take look at how the page content is generated. If you look at the routing definition in <em>books.clj</em>, you see that the body of <code>defpage</code> function is a call to <code>layout</code> function defined in <em>/src/bookshelf/views/common.clj</em>. Let&rsquo;s open this file</p>

<figure class='code'><figcaption><span>/src/bookshelf/views/common.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">bookshelf.views.common</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:use</span> <span class="p">[</span><span class="nv">noir.core</span> <span class="ss">:only</span> <span class="p">[</span><span class="nv">defpartial</span><span class="p">]]</span>
</span><span class='line'>        <span class="p">[</span><span class="nv">hiccup.page</span> <span class="ss">:only</span> <span class="p">[</span><span class="nv">include-css</span> <span class="nv">html5</span><span class="p">]]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defpartial</span> <span class="nv">layout</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">content</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">html5</span>
</span><span class='line'>    <span class="p">[</span><span class="ss">:head</span>
</span><span class='line'>     <span class="p">[</span><span class="ss">:title</span> <span class="s">&quot;bookshelf&quot;</span><span class="p">]</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">include-css</span> <span class="s">&quot;/css/reset.css&quot;</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">[</span><span class="ss">:body</span>
</span><span class='line'>     <span class="p">[</span><span class="ss">:div#wrapper</span>
</span><span class='line'>      <span class="nv">content</span><span class="p">]]))</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>layout</code> is just a wrapper on top of <code>hiccup.core/html</code> function. Hiccup is an XML/HTML rendering library in Clojure. The idea behind it is pretty simple: You build a tree using Clojure vectors, and Hiccup transforms it to a valid HTML. If you are familiar with Groovy MarkupBuilder, it&rsquo;s the same idea. For example, let&rsquo;s define a couple of trees: head and body</p>

<pre><code>(def head
  [:head
   [:title "bookshelf"]])
(def body
  [:body
   [:div
    [:p "Welcome to bookshelf"]]])
</code></pre>

<p>Here is what you see in REPL when it evaluates different Hiccup HTML formats (I pretty formatted them for visibility purposes)</p>

<pre><code>(hiccup.page/html5 head body)
;=&gt; "&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;bookshelf&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div&gt;&lt;p&gt;Welcome to bookshelf&lt;/p&gt;&lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;"

(hiccup.page/html4 head body)
;=&gt; "&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;bookshelf&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div&gt;&lt;p&gt;Welcome to bookshelf&lt;/p&gt;&lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;"

(hiccup.page/xhtml head body)
;=&gt; "&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"&gt;
&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;
  &lt;head&gt;
    &lt;title&gt;bookshelf&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div&gt;&lt;p&gt;Welcome to bookshelf&lt;/p&gt;&lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;"
</code></pre>

<p>Noir&rsquo;s default format is html5, the first example above. You can change it to any other format if needed.</p>

<p>The last piece of <em>common.clj</em> I want to mention is <code>(include-css "/css/reset.css")</code>. This is another function from Hiccup library. It generates <code>&lt;link href="http://blog.ndpar.com/css/reset.css" rel="stylesheet" type="text/css"&gt;</code> element and inserts it in the <code>head</code> element of the page. If you recall the scaffolding we generated at the beginning, there is a directory called <em>/resources/public</em> where Noir keeps CSS files, JavaScript, and images required by your web-site. By default Noir creates <em>reset.css</em> in the corresponding subdirectory. Later we&rsquo;ll create other stylesheets and update <em>common.clj</em> appropriately.</p>

<p>Now, after we covered all the basics, we are ready to build our application.</p>

<h2>Controller and View</h2>

<p>Let&rsquo;s build our view and controller first. While doing that we&rsquo;ll figure out what data we need from the back-end. That&rsquo;s called top-down design.</p>

<p>We define controllers and views in <em>books.clj</em> file. For now I also include the model in this file. We&rsquo;ll move it to a proper namespace later when we are done with the front-end. Here is the new version of <em>books.clj</em></p>

<figure class='code'><figcaption><span>/src/bookshelf/views/books.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">bookshelf.views.books</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">bookshelf.views.common</span> <span class="ss">:as</span> <span class="nv">common</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:use</span> <span class="p">[</span><span class="nv">noir.core</span> <span class="ss">:only</span> <span class="p">[</span><span class="nv">defpage</span><span class="p">]]</span>
</span><span class='line'>        <span class="p">[</span><span class="nv">hiccup.element</span> <span class="ss">:only</span> <span class="p">[</span><span class="nv">link-to</span><span class="p">]]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">books</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">[{</span><span class="ss">:author</span> <span class="s">&quot;Fogus M., Houser C.&quot;</span>
</span><span class='line'>    <span class="ss">:title</span> <span class="s">&quot;The Joy Of Clojure&quot;</span>
</span><span class='line'>    <span class="ss">:year</span> <span class="s">&quot;2011&quot;</span>
</span><span class='line'>    <span class="ss">:format</span> <span class="s">&quot;pdf&quot;</span>
</span><span class='line'>    <span class="ss">:id</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'>   <span class="p">{</span><span class="ss">:author</span> <span class="s">&quot;Fogus M., Houser C.&quot;</span>
</span><span class='line'>    <span class="ss">:title</span> <span class="s">&quot;The Joy Of Clojure&quot;</span>
</span><span class='line'>    <span class="ss">:year</span> <span class="s">&quot;2011&quot;</span>
</span><span class='line'>    <span class="ss">:format</span> <span class="s">&quot;epub&quot;</span>
</span><span class='line'>    <span class="ss">:id</span> <span class="mi">2</span><span class="p">}])</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">list-books</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">[</span><span class="ss">:table</span>
</span><span class='line'>   <span class="p">[</span><span class="ss">:thead</span>
</span><span class='line'>    <span class="p">[</span><span class="ss">:tr</span>
</span><span class='line'>     <span class="p">[</span><span class="ss">:th</span> <span class="s">&quot;Author&quot;</span><span class="p">]</span>
</span><span class='line'>     <span class="p">[</span><span class="ss">:th</span> <span class="s">&quot;Title&quot;</span><span class="p">]</span>
</span><span class='line'>     <span class="p">[</span><span class="ss">:th</span> <span class="s">&quot;Published&quot;</span><span class="p">]</span>
</span><span class='line'>     <span class="p">[</span><span class="ss">:th</span> <span class="s">&quot;Format&quot;</span><span class="p">]]]</span>
</span><span class='line'>   <span class="p">(</span><span class="nb">into </span><span class="p">[</span><span class="ss">:tbody</span><span class="p">]</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">book</span> <span class="p">(</span><span class="nf">books</span><span class="p">)]</span>
</span><span class='line'>           <span class="p">[</span><span class="ss">:tr</span>
</span><span class='line'>            <span class="p">[</span><span class="ss">:td</span> <span class="p">(</span><span class="ss">:author</span> <span class="nv">book</span><span class="p">)]</span>
</span><span class='line'>            <span class="p">[</span><span class="ss">:td</span> <span class="p">(</span><span class="ss">:title</span> <span class="nv">book</span><span class="p">)]</span>
</span><span class='line'>            <span class="p">[</span><span class="ss">:td</span> <span class="p">(</span><span class="ss">:year</span> <span class="nv">book</span><span class="p">)]</span>
</span><span class='line'>            <span class="p">[</span><span class="ss">:td</span> <span class="p">(</span><span class="nf">link-to</span> <span class="p">(</span><span class="nf">clojure.string/join</span> <span class="s">&quot;/&quot;</span> <span class="p">[</span><span class="s">&quot;/books&quot;</span> <span class="p">(</span><span class="ss">:id</span> <span class="nv">book</span><span class="p">)</span> <span class="p">(</span><span class="ss">:format</span> <span class="nv">book</span><span class="p">)])</span>
</span><span class='line'>                          <span class="p">(</span><span class="ss">:format</span> <span class="nv">book</span><span class="p">))]]))])</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defpage</span> <span class="s">&quot;/books&quot;</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">common/layout</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">list-books</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are three functions in this file: <code>books</code> (model), <code>list-books</code> (view), and <code>/books</code> (controller/router). The controller is essentially the same as before and the model is simply a vector of maps. Each map contains the same keys as column names on the book table. View might look complicated, but there shouldn&rsquo;t be any surprise here either — it&rsquo;s again an ordinary tree. The only new element here is <code>link-to</code> function defined in <code>hiccup.element</code> namespace. We could really build it directly using <code>[:a {:href …}]</code> vector, but link-to is a standard way to do it in Hiccup.</p>

<p>If you refresh <a href="http://localhost:8080/books">http://localhost:8080/books</a> now (Leiningen/Jetty supports hot redeployment), you will see this screen</p>

<p><img class="center" src="http://blog.ndpar.com/images/posts/bookshelf5.png"></p>

<p>The important part of the view function is the format of the links. For the current book model the links are <a href="http://localhost:8080/books/1/pdf">http://localhost:8080/books/1/pdf</a> and <a href="http://localhost:8080/books/2/epub">http://localhost:8080/books/2/epub</a>. You can verify it by hovering the mouse over them. Those links are actually the main goal of our application. By clicking the link I want to load (or download) the book into the browser and read it. To implement this feature add the following functions to <em>books.clj</em></p>

<figure class='code'><figcaption><span>/src/bookshelf/views/books.clj (cont&#8217;d) </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">get-file</span> <span class="p">[</span><span class="nv">id</span><span class="p">]</span>
</span><span class='line'>  <span class="nv">nil</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">ctype</span> <span class="p">[</span><span class="nv">format</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="s">&quot;pdf&quot;</span> <span class="nv">format</span><span class="p">)</span> <span class="s">&quot;application/pdf&quot;</span> <span class="s">&quot;text/plain&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defpage</span> <span class="s">&quot;/books/:id/:format&quot;</span> <span class="p">{</span><span class="ss">:keys</span> <span class="p">[</span><span class="nv">id</span> <span class="nv">format</span><span class="p">]}</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">content-type</span> <span class="p">(</span><span class="nf">ctype</span> <span class="nv">format</span><span class="p">)</span> <span class="p">(</span><span class="nf">java.io.ByteArrayInputStream.</span> <span class="p">(</span><span class="nf">get-file</span> <span class="nv">id</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ignore for a moment <code>get-file</code> function — it does nothing. Later we will move it to model namespace and implement it properly, but we need some placeholder now to compile the application. ctype is a helper function that maps the file format to HTTP content type. I have three ebook formats in my library: ePub, Mobi, and PDF. The first two are plain text formats from HTTP content type perspective. Only PDF requires special type.</p>

<p>The interesting part of the snippet is the controller definition. If you ever implemented REST in Spring MVC, you should see the familiar pattern here. Like Spring, Noir (via Compojure) supports path variables. If you click on <a href="http://localhost:8080/books/1/pdf">http://localhost:8080/books/1/pdf</a> link in the browser, Noir calls the corresponding controller and binds <code>id</code> variable to &ldquo;1&rdquo; and <code>format</code> variable to &ldquo;pdf&rdquo;. When we implement <code>get-file</code> function, it should return the file with the given id as an array of bytes. Controller then wraps the array into a stream, and Noir pushes it to HTTP response. <code>content-type</code> function is defined in <em>noir.response</em> namespace, so we need to add <code>[noir.response :only [content-type]]</code> to <code>:use</code> section at the top of <em>books.clj</em>.</p>

<p>That&rsquo;s it, in terms of functionality the controller and the view of our application are done.</p>

<h2>Model</h2>

<p>Now we need to extract the logic that creates a model from presentation tier to middle-tier. In Noir that&rsquo;s what models directory is for. In our case it&rsquo;s <em>/src/bookshelf/models</em>. Let&rsquo;s create a file called <em>db.clj</em> in that directory, and move there books and <code>get-file</code> functions from <em>bookshelf.views.books</em> namespace. We have to update <em>books.clj</em> to load the new namespace. It should now look like this</p>

<figure class='code'><figcaption><span>/src/bookshelf/views/books.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">bookshelf.views.books</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">bookshelf.models.db</span> <span class="ss">:as</span> <span class="nv">db</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">bookshelf.views.common</span> <span class="ss">:as</span> <span class="nv">common</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:use</span> <span class="p">[</span><span class="nv">noir.core</span> <span class="ss">:only</span> <span class="p">[</span><span class="nv">defpage</span><span class="p">]]</span>
</span><span class='line'>        <span class="p">[</span><span class="nv">noir.response</span> <span class="ss">:only</span> <span class="p">[</span><span class="nv">content-type</span><span class="p">]]</span>
</span><span class='line'>        <span class="p">[</span><span class="nv">hiccup.element</span> <span class="ss">:only</span> <span class="p">[</span><span class="nv">link-to</span><span class="p">]]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">list-books</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">[</span><span class="ss">:table</span>
</span><span class='line'>   <span class="p">[</span><span class="ss">:thead</span>
</span><span class='line'>    <span class="p">[</span><span class="ss">:tr</span>
</span><span class='line'>     <span class="p">[</span><span class="ss">:th</span> <span class="s">&quot;Author&quot;</span><span class="p">]</span>
</span><span class='line'>     <span class="p">[</span><span class="ss">:th</span> <span class="s">&quot;Title&quot;</span><span class="p">]</span>
</span><span class='line'>     <span class="p">[</span><span class="ss">:th</span> <span class="s">&quot;Published&quot;</span><span class="p">]</span>
</span><span class='line'>     <span class="p">[</span><span class="ss">:th</span> <span class="s">&quot;Format&quot;</span><span class="p">]]]</span>
</span><span class='line'>   <span class="p">(</span><span class="nb">into </span><span class="p">[</span><span class="ss">:tbody</span><span class="p">]</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">book</span> <span class="p">(</span><span class="nf">db/books</span><span class="p">)]</span>
</span><span class='line'>           <span class="p">[</span><span class="ss">:tr</span>
</span><span class='line'>            <span class="p">[</span><span class="ss">:td</span> <span class="p">(</span><span class="ss">:author</span> <span class="nv">book</span><span class="p">)]</span>
</span><span class='line'>            <span class="p">[</span><span class="ss">:td</span> <span class="p">(</span><span class="ss">:title</span> <span class="nv">book</span><span class="p">)]</span>
</span><span class='line'>            <span class="p">[</span><span class="ss">:td</span> <span class="p">(</span><span class="ss">:year</span> <span class="nv">book</span><span class="p">)]</span>
</span><span class='line'>            <span class="p">[</span><span class="ss">:td</span> <span class="p">(</span><span class="nf">link-to</span> <span class="p">(</span><span class="nf">clojure.string/join</span> <span class="s">&quot;/&quot;</span> <span class="p">[</span><span class="s">&quot;/books&quot;</span> <span class="p">(</span><span class="ss">:id</span> <span class="nv">book</span><span class="p">)</span> <span class="p">(</span><span class="ss">:format</span> <span class="nv">book</span><span class="p">)])</span>
</span><span class='line'>                          <span class="p">(</span><span class="ss">:format</span> <span class="nv">book</span><span class="p">))]]))])</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defpage</span> <span class="s">&quot;/books&quot;</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">common/layout</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">list-books</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">ctype</span> <span class="p">[</span><span class="nv">format</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="s">&quot;pdf&quot;</span> <span class="nv">format</span><span class="p">)</span> <span class="s">&quot;application/pdf&quot;</span> <span class="s">&quot;text/plain&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defpage</span> <span class="s">&quot;/books/:id/:format&quot;</span> <span class="p">{</span><span class="ss">:keys</span> <span class="p">[</span><span class="nv">id</span> <span class="nv">format</span><span class="p">]}</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">content-type</span> <span class="p">(</span><span class="nf">ctype</span> <span class="nv">format</span><span class="p">)</span> <span class="p">(</span><span class="nf">java.io.ByteArrayInputStream.</span> <span class="p">(</span><span class="nf">db/get-file</span> <span class="nv">id</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you refresh your browser, nothing should change.</p>

<p>All right, now it&rsquo;s time to implement our model properly. Recall that our model should scan the directory it&rsquo;s running in for the files with the format Author-Title-Year.FileFormat, and convert each of those files to byte array. Here is how I implemented it</p>

<figure class='code'><figcaption><span>/src/bookshelf/models/db.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">bookshelf.models.db</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:use</span> <span class="p">[</span><span class="nv">clojure.java.shell</span> <span class="ss">:only</span> <span class="p">(</span><span class="nf">sh</span><span class="p">)]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">list-files</span> <span class="p">[</span><span class="nv">dir</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">clojure.string/split</span> <span class="p">(</span><span class="ss">:out</span> <span class="p">(</span><span class="nf">sh</span> <span class="s">&quot;ls&quot;</span> <span class="nv">dir</span><span class="p">))</span> <span class="o">#</span><span class="s">&quot;\n&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nb">parse </span><span class="p">[</span><span class="nv">file</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when-let </span><span class="p">[</span><span class="nv">match</span> <span class="p">(</span><span class="nb">re-matches </span><span class="o">#</span><span class="s">&quot;([^-]+)-([^-]+)-(\d+)\.(\S+)&quot;</span> <span class="nv">file</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">zipmap </span><span class="p">[</span><span class="ss">:file</span> <span class="ss">:author</span> <span class="ss">:title</span> <span class="ss">:year</span> <span class="ss">:format</span><span class="p">]</span> <span class="nv">match</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">add-id</span> <span class="p">[</span><span class="nv">book</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">assoc </span><span class="nv">book</span> <span class="ss">:id</span> <span class="p">(</span><span class="nf">clojure.string/replace</span> <span class="p">(</span><span class="ss">:file</span> <span class="nv">book</span><span class="p">)</span> <span class="o">#</span><span class="s">&quot;[., ]&quot;</span> <span class="s">&quot;&quot;</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">books</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="p">(</span><span class="nf">list-files</span> <span class="s">&quot;.&quot;</span><span class="p">)</span> <span class="p">(</span><span class="nb">map </span><span class="nv">parse</span><span class="p">)</span> <span class="p">(</span><span class="nb">remove </span><span class="nv">nil?</span><span class="p">)</span> <span class="p">(</span><span class="nb">map </span><span class="nv">add-id</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">file</span> <span class="p">[</span><span class="nv">id</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">mapping</span> <span class="p">(</span><span class="nb">into </span><span class="p">{}</span> <span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">b</span> <span class="p">(</span><span class="nf">books</span><span class="p">)]</span> <span class="p">[(</span><span class="ss">:id</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="ss">:file</span> <span class="nv">b</span><span class="p">)]))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">get </span><span class="nv">mapping</span> <span class="nv">id</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">get-file</span> <span class="p">[</span><span class="nv">id</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">with-open </span><span class="p">[</span><span class="nv">input</span>  <span class="p">(</span><span class="nf">java.io.FileInputStream.</span> <span class="p">(</span><span class="nf">file</span> <span class="nv">id</span><span class="p">))</span>
</span><span class='line'>              <span class="nv">buffer</span> <span class="p">(</span><span class="nf">java.io.ByteArrayOutputStream.</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">clojure.java.io/copy</span> <span class="nv">input</span> <span class="nv">buffer</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">.toByteArray</span> <span class="nv">buffer</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s take a look what each of the functions does. Function <code>list-files</code> returns a vector of file names that reside in the given directory <code>dir</code>. To find all files in the directory I&rsquo;m using <code>clojure.java.shell/sh</code> function which executes <code>ls</code> command. This works fine on Linux and Mac, but probalby doesn&rsquo;t on Windows. Function <code>parse</code> checks if the given file name has the required format. If so, it returns a map <code>{:file file, :author Author, :title Title, :year Year, :format FileFormat}</code>, otherwise it returns <code>nil</code>. <code>add-id</code> function removes dots, commas, and spaces from the file name and add the result as a book ID to the book map. Function <code>books</code> is just a composition of those three functions, and it returns the result expected by the view.</p>

<p>Function <code>file</code> returns the file by given ID. The implementation above is not efficient, but my library is too small to notice any performance issues. Finally, <code>get-file</code> function finds the file by ID and returns it as a byte array. Those four lines is a pretty standard idiom which you can find in many Clojure source files.</p>

<p>Now we are ready to test our application. For testing purposes I&rsquo;m going to copy a couple of e-books I recently received updates for to the project home directory. The content of this directory looks like this</p>

<pre><code>.gitignore
README.md
Thomas D.-Programming Ruby 1.9-2010.epub
Thomas D.-Programming Ruby 1.9-2010.pdf
project.clj
resources
src
test
</code></pre>

<p>I refresh my browser and here I can see these two books</p>

<p><img class="center" src="http://blog.ndpar.com/images/posts/bookshelf6.png"></p>

<p>If I click on pdf, I can read the book in my browser</p>

<p><img class="center" src="http://blog.ndpar.com/images/posts/bookshelf7.png"></p>

<p>OK, the application is functional. The next step is to make it little bit prettier.</p>

<h2>Styling</h2>

<p>Since our application is written in Noir framework, let&rsquo;s make it look like Noir. First, I downloaded Noir background <a href="http://www.webnoir.org/img/bg.png">image</a> and save it to <em>/resources/public/img</em> directory. Second, I created a stylesheet <em>/resources/public/css/noir.css</em> which resembles Noir&rsquo;s original</p>

<figure class='code'><figcaption><span>/resources/public/css/noir.css </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">body</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">background</span><span class="o">:</span> <span class="m">#2a2b2b</span><span class="p">;</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="m">#d1d9e1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background</span><span class="o">:</span> <span class="sx">url(&#39;/img/bg.png&#39;)</span><span class="p">;</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span> <span class="m">60px</span> <span class="m">60px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">font-family</span><span class="o">:</span> <span class="s1">&#39;Helvetica Neue&#39;</span><span class="o">,</span><span class="n">Helvetica</span><span class="o">,</span><span class="n">Verdana</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">a</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">text-decoration</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="m">#d1d9e1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">a</span><span class="nd">:hover</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="m">#6bffbd</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">h1</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="m">#6bffbd</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then I updated <em>bookshelf.views.common</em> namespace to include new CSS</p>

<figure class='code'><figcaption><span>/src/bookshelf/views/common.clj (cont&#8217;d) </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defpartial</span> <span class="nv">layout</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">content</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">html5</span>
</span><span class='line'>    <span class="p">[</span><span class="ss">:head</span>
</span><span class='line'>     <span class="p">[</span><span class="ss">:title</span> <span class="s">&quot;Bookshelf&quot;</span><span class="p">]</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">include-css</span> <span class="s">&quot;/css/reset.css&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">include-css</span> <span class="s">&quot;/css/noir.css&quot;</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">[</span><span class="ss">:body</span>
</span><span class='line'>     <span class="p">[</span><span class="ss">:div#wrapper</span>
</span><span class='line'>      <span class="nv">content</span><span class="p">]]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, I want to add a header to the page in <em>bookshelf.views.books</em></p>

<figure class='code'><figcaption><span>/src/bookshelf/views/books.clj (cont&#8217;d) </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defpage</span> <span class="s">&quot;/books&quot;</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">common/layout</span>
</span><span class='line'>    <span class="p">[</span><span class="ss">:h1</span> <span class="s">&quot;Books&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">list-books</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Refresh books web page on the browser to see the changes</p>

<p><img class="center" src="http://blog.ndpar.com/images/posts/bookshelf8.png"></p>

<p>The last thing left unstyled is the book table. I won&rsquo;t style it directly, because I want to add client-side sorting to it, and I happen to know that TableSorter JavaScript library provides its own style.</p>

<h2>JavaScript</h2>

<p>TableSorter is a jQuery plugin, so you need to download jQuery first. Grab the latest <a href="http://code.jquery.com/jquery-1.8.2.min.js">min</a> and save it to <em>/resources/public/js</em> directory. Then, download <a href="http://tablesorter.com/docs/#Download">tablesorter.zip</a> that contains both JavaScript and stylesheet files. As before, JavaScript goes to <em>/resources/public/js</em> and stylesheets go to <em>/resources/public/css</em> directory. Here is the resources directory structure I have after everything is saved</p>

<pre><code>resources/public/css/tablesorter/asc.gif
resources/public/css/tablesorter/bg.gif
resources/public/css/tablesorter/desc.gif
resources/public/css/tablesorter/style.css
resources/public/js/jquery-1.8.2.min.js
resources/public/js/jquery.tablesorter.js
</code></pre>

<p>If you are curious, here is my <em>style.css</em>. I changed the original tablesorter css a little bit to better fit Noir theme</p>

<figure class='code'><figcaption><span>/resources/public/css/style.css </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">table</span><span class="nc">.tablesorter</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">margin</span><span class="o">:</span><span class="m">10px</span> <span class="m">0pt</span> <span class="m">15px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">font-size</span><span class="o">:</span> <span class="m">10pt</span><span class="p">;</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>    <span class="k">text-align</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">table</span><span class="nc">.tablesorter</span> <span class="nt">thead</span> <span class="nt">tr</span> <span class="nt">th</span><span class="o">,</span> <span class="nt">table</span><span class="nc">.tablesorter</span> <span class="nt">tfoot</span> <span class="nt">tr</span> <span class="nt">th</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="m">#000000</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background-color</span><span class="o">:</span> <span class="m">#b0b8c0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="m">#2a2b2b</span><span class="p">;</span>
</span><span class='line'>    <span class="k">font-size</span><span class="o">:</span> <span class="m">10pt</span><span class="p">;</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span> <span class="m">4px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">table</span><span class="nc">.tablesorter</span> <span class="nt">thead</span> <span class="nt">tr</span> <span class="nc">.header</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">background-image</span><span class="o">:</span> <span class="sx">url(bg.gif)</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background-repeat</span><span class="o">:</span> <span class="k">no-repeat</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background-position</span><span class="o">:</span> <span class="k">center</span> <span class="k">right</span><span class="p">;</span>
</span><span class='line'>    <span class="k">cursor</span><span class="o">:</span> <span class="k">pointer</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">table</span><span class="nc">.tablesorter</span> <span class="nt">tbody</span> <span class="nt">td</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="m">#b0b8c0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span> <span class="m">4px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background-image</span><span class="o">:</span> <span class="sx">url(&#39;/img/bg.png&#39;)</span><span class="p">;</span>
</span><span class='line'>    <span class="k">vertical-align</span><span class="o">:</span> <span class="k">top</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">table</span><span class="nc">.tablesorter</span> <span class="nt">tbody</span> <span class="nt">tr</span><span class="nc">.odd</span> <span class="nt">td</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">background-color</span><span class="o">:</span><span class="m">#F0F0F6</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">table</span><span class="nc">.tablesorter</span> <span class="nt">thead</span> <span class="nt">tr</span> <span class="nc">.headerSortUp</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">background-image</span><span class="o">:</span> <span class="sx">url(asc.gif)</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">table</span><span class="nc">.tablesorter</span> <span class="nt">thead</span> <span class="nt">tr</span> <span class="nc">.headerSortDown</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">background-image</span><span class="o">:</span> <span class="sx">url(desc.gif)</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">table</span><span class="nc">.tablesorter</span> <span class="nt">thead</span> <span class="nt">tr</span> <span class="nc">.headerSortDown</span><span class="o">,</span> <span class="nt">table</span><span class="nc">.tablesorter</span> <span class="nt">thead</span> <span class="nt">tr</span> <span class="nc">.headerSortUp</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">background-color</span><span class="o">:</span> <span class="m">#6bffbd</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To enable tablesorter we have to update both view files. Few changes in bookshelf.views.common</p>

<figure class='code'><figcaption><span>/src/bookshelf/views/common.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">bookshelf.views.common</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:use</span> <span class="p">[</span><span class="nv">noir.core</span> <span class="ss">:only</span> <span class="p">[</span><span class="nv">defpartial</span><span class="p">]]</span>
</span><span class='line'>        <span class="p">[</span><span class="nv">hiccup.page</span> <span class="ss">:only</span> <span class="p">[</span><span class="nv">include-css</span> <span class="nv">include-js</span> <span class="nv">html5</span><span class="p">]]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defpartial</span> <span class="nv">layout</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">content</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">html5</span>
</span><span class='line'>    <span class="p">[</span><span class="ss">:head</span>
</span><span class='line'>     <span class="p">[</span><span class="ss">:title</span> <span class="s">&quot;Bookshelf&quot;</span><span class="p">]</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">include-js</span> <span class="s">&quot;/js/jquery-1.8.2.min.js&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">include-js</span> <span class="s">&quot;/js/jquery.tablesorter.js&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">include-css</span> <span class="s">&quot;/css/reset.css&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">include-css</span> <span class="s">&quot;/css/tablesorter/style.css&quot;</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">include-css</span> <span class="s">&quot;/css/noir.css&quot;</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">[</span><span class="ss">:body</span>
</span><span class='line'>     <span class="p">[</span><span class="ss">:div#wrapper</span>
</span><span class='line'>      <span class="nv">content</span><span class="p">]]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>and few changes in <em>bookshelf.views.books</em></p>

<figure class='code'><figcaption><span>/src/bookshelf/views/books.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">bookshelf.views.books</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">bookshelf.models.db</span> <span class="ss">:as</span> <span class="nv">db</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">bookshelf.views.common</span> <span class="ss">:as</span> <span class="nv">common</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:use</span> <span class="p">[</span><span class="nv">noir.core</span> <span class="ss">:only</span> <span class="p">[</span><span class="nv">defpage</span><span class="p">]]</span>
</span><span class='line'>        <span class="p">[</span><span class="nv">noir.response</span> <span class="ss">:only</span> <span class="p">[</span><span class="nv">content-type</span><span class="p">]]</span>
</span><span class='line'>        <span class="p">[</span><span class="nv">hiccup.element</span> <span class="ss">:only</span> <span class="p">[</span><span class="nv">link-to</span> <span class="nv">javascript-tag</span><span class="p">]]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">list-books</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">[</span><span class="ss">:table.tablesorter</span> <span class="p">{</span><span class="ss">:id</span> <span class="s">&quot;bookTable&quot;</span><span class="p">}</span>
</span><span class='line'>   <span class="p">[</span><span class="ss">:thead</span>
</span><span class='line'>    <span class="p">[</span><span class="ss">:tr</span>
</span><span class='line'>     <span class="p">[</span><span class="ss">:th</span> <span class="s">&quot;Author&quot;</span><span class="p">]</span>
</span><span class='line'>     <span class="p">[</span><span class="ss">:th</span> <span class="s">&quot;Title&quot;</span><span class="p">]</span>
</span><span class='line'>     <span class="p">[</span><span class="ss">:th</span> <span class="s">&quot;Published&quot;</span><span class="p">]</span>
</span><span class='line'>     <span class="p">[</span><span class="ss">:th</span> <span class="s">&quot;Format&quot;</span><span class="p">]]]</span>
</span><span class='line'>   <span class="p">(</span><span class="nb">into </span><span class="p">[</span><span class="ss">:tbody</span><span class="p">]</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">book</span> <span class="p">(</span><span class="nf">db/books</span><span class="p">)]</span>
</span><span class='line'>           <span class="p">[</span><span class="ss">:tr</span>
</span><span class='line'>            <span class="p">[</span><span class="ss">:td</span> <span class="p">(</span><span class="ss">:author</span> <span class="nv">book</span><span class="p">)]</span>
</span><span class='line'>            <span class="p">[</span><span class="ss">:td</span> <span class="p">(</span><span class="ss">:title</span> <span class="nv">book</span><span class="p">)]</span>
</span><span class='line'>            <span class="p">[</span><span class="ss">:td</span> <span class="p">(</span><span class="ss">:year</span> <span class="nv">book</span><span class="p">)]</span>
</span><span class='line'>            <span class="p">[</span><span class="ss">:td</span> <span class="p">(</span><span class="nf">link-to</span> <span class="p">(</span><span class="nf">clojure.string/join</span> <span class="s">&quot;/&quot;</span> <span class="p">[</span><span class="s">&quot;/books&quot;</span> <span class="p">(</span><span class="ss">:id</span> <span class="nv">book</span><span class="p">)</span> <span class="p">(</span><span class="ss">:format</span> <span class="nv">book</span><span class="p">)])</span>
</span><span class='line'>                          <span class="p">(</span><span class="ss">:format</span> <span class="nv">book</span><span class="p">))]]))])</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defpage</span> <span class="s">&quot;/books&quot;</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">common/layout</span>
</span><span class='line'>    <span class="p">[</span><span class="ss">:h1</span> <span class="s">&quot;Books&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">javascript-tag</span> <span class="s">&quot;$(document).ready(function() {$(\&quot;#bookTable\&quot;).tablesorter();});&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">list-books</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">ctype</span> <span class="p">[</span><span class="nv">format</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="s">&quot;pdf&quot;</span> <span class="nv">format</span><span class="p">)</span> <span class="s">&quot;application/pdf&quot;</span> <span class="s">&quot;text/plain&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defpage</span> <span class="s">&quot;/books/:id/:format&quot;</span> <span class="p">{</span><span class="ss">:keys</span> <span class="p">[</span><span class="nv">id</span> <span class="nv">format</span><span class="p">]}</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">content-type</span> <span class="p">(</span><span class="nf">ctype</span> <span class="nv">format</span><span class="p">)</span> <span class="p">(</span><span class="nf">java.io.ByteArrayInputStream.</span> <span class="p">(</span><span class="nf">db/get-file</span> <span class="nv">id</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>After we refresh the browser, we should see the final design and be able to sort the table</p>

<p><img class="center" src="http://blog.ndpar.com/images/posts/bookshelf9.png"></p>

<h2>Ship it!</h2>

<p>OK, we are ready to ship. But before we build a deployable artifact, we, as professional developers, should update documentation (<a href="https://github.com/ndpar/bookshelf/blob/master/README.md">README.md</a> in our case) and finalize the version of the application</p>

<figure class='code'><figcaption><span>project.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defproject </span><span class="nv">bookshelf</span> <span class="s">&quot;0.1.0&quot;</span>
</span><span class='line'>  <span class="ss">:description</span> <span class="s">&quot;Bookshelf site&quot;</span>
</span><span class='line'>  <span class="ss">:dependencies</span> <span class="p">[[</span><span class="nv">org.clojure/clojure</span> <span class="s">&quot;1.4.0&quot;</span><span class="p">]</span>
</span><span class='line'>                 <span class="p">[</span><span class="nv">noir</span> <span class="s">&quot;1.3.0-beta3&quot;</span><span class="p">]]</span>
</span><span class='line'>  <span class="ss">:main</span> <span class="nv">bookshelf.server</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I want to run this application as a a standalone Java web application, without any dependency on Leiningen. Therefore I have to add <code>:gen-class</code> to <em>server.clj</em></p>

<figure class='code'><figcaption><span>/src/bookshelf/server.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">bookshelf.server</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">noir.server</span> <span class="ss">:as</span> <span class="nv">server</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:gen-class</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">server/load-views-ns</span> <span class="ss">&#39;bookshelf.views</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">-main</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">m</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">mode</span> <span class="p">(</span><span class="nb">keyword </span><span class="p">(</span><span class="nb">or </span><span class="p">(</span><span class="nb">first </span><span class="nv">m</span><span class="p">)</span> <span class="ss">:dev</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">port</span> <span class="p">(</span><span class="nf">Integer.</span> <span class="p">(</span><span class="nb">get </span><span class="p">(</span><span class="nf">System/getenv</span><span class="p">)</span> <span class="s">&quot;PORT&quot;</span> <span class="s">&quot;8080&quot;</span><span class="p">))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">server/start</span> <span class="nv">port</span> <span class="p">{</span><span class="ss">:mode</span> <span class="nv">mode</span>
</span><span class='line'>                        <span class="ss">:ns</span> <span class="ss">&#39;bookshelf</span><span class="p">})))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now package the application by running the following command</p>

<pre><code>$ lein uberjar
</code></pre>

<p>As a result of this command, <em>bookshelf-0.1.0-standalone.jar</em> artifact is created in the target directory. I scp this file to my server, to the directory where my books are located, and start the app</p>

<pre><code>$ export PORT=3030; nohup java -jar bookshelf-0.1.0-standalone.jar prod &gt; nohup.out 2&gt;&amp;1 &amp;
</code></pre>

<p>And that&rsquo;s basically it. We have created a simplest web application in Clojure, which might be useful by its own. But more importantly, you&rsquo;ve learned <em>how</em> to build it. I hope you enjoyed reading this tutorial as I enjoyed writing it.</p>

<h2>Recap</h2>

<p>If you want to create web application in Clojure, try Noir. Noir is small and easy to pick up.</p>

<ul>
<li>use defpage macro to define URL routes</li>
<li>use defpartial macro to build views</li>
<li>use Leiningen to run local web server</li>
<li>use REPL to experiment with business logic</li>
<li>have fun with Clojure</li>
</ul>


<h2>Resources</h2>

<ol>
<li>Long in-depth Noir tutorial: <a href="http://yogthos.net/blog/22">http://yogthos.net/blog/22</a></li>
<li>Source code of this tutorial: <a href="https://github.com/ndpar/bookshelf">https://github.com/ndpar/bookshelf</a></li>
<li>Noir: <a href="http://www.webnoir.org/">http://www.webnoir.org</a></li>
<li>Hiccup: <a href="https://github.com/weavejester/hiccup">https://github.com/weavejester/hiccup</a></li>
</ol>


<p>P.S. After I wrote the draft of this post I found another <a href="http://clojure-lab.tumblr.com/post/35207280637/clojure-web-development">tutorial</a> on Clojure web development, which even has the same name for the application! If I knew about it before, I wouldn&rsquo;t probably write mine. But since it&rsquo;s already typed, let it be published.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exporting Solr documents]]></title>
    <link href="http://blog.ndpar.com/2012/10/01/exporting-solr-documents/"/>
    <updated>2012-10-01T08:00:00-04:00</updated>
    <id>http://blog.ndpar.com/2012/10/01/exporting-solr-documents</id>
    <content type="html"><![CDATA[<p>Recently I had to copy some documents from one <a href="http://lucene.apache.org/solr/">Solr</a> server to another. I expected Solr already had an interface that allowed me to extract documents in the same format they were inserted. In that case I would pipe an output of one curl command to another, and consider the job done. As it turned out, the format of Solr input document is different than the output format. Here is how input document looks like:</p>

<pre><code>&lt;add&gt;
    &lt;doc&gt;
        &lt;field name="id"&gt;12345&lt;/field&gt;
        &lt;field name="articlestate"&gt;published&lt;/field&gt;
        &lt;field name="articletype"&gt;news&lt;/field&gt;
        &lt;field name="body"&gt;Lorem ipsum dolor...&lt;/field&gt;
        &lt;field name="referenceid"&gt;175820&lt;/field&gt;
        &lt;field name="referenceid"&gt;163786&lt;/field&gt;
        &lt;field name="created"&gt;2011-02-15T14:57:54.766Z&lt;/field&gt;
    &lt;/doc&gt;
&lt;/add&gt;
</code></pre>

<p>Notice the flat structure of this document: all element names are the same regardless of the filed type, and arrays (referenceid) are not grouped. Now compare it to the output format. Here is what you get when you execute a query against a Solr server:</p>

<pre><code>&lt;response&gt;
    &lt;lst name="responseHeader"&gt;
        &lt;int name="status"&gt;0&lt;/int&gt;
        &lt;int name="QTime"&gt;1&lt;/int&gt;
        &lt;lst name="params"&gt;
            &lt;str name="q"&gt;id:12345&lt;/str&gt;
        &lt;/lst&gt;
    &lt;/lst&gt;
    &lt;result name="response" numFound="1" start="0"&gt;
        &lt;doc&gt;
            &lt;str name="id"&gt;12345&lt;/str&gt;
            &lt;str name="articlestate"&gt;published&lt;/str&gt;
            &lt;str name="articletype"&gt;news&lt;/str&gt;
            &lt;str name="body"&gt;Lorem ipsum dolor...&lt;/str&gt;
            &lt;arr name="referenceid"&gt;
                &lt;str&gt;175820&lt;/str&gt;
                &lt;str&gt;163786&lt;/str&gt;
            &lt;/arr&gt;
            &lt;date name="created"&gt;2011-02-15T14:57:54.766Z&lt;/date&gt;
        &lt;/doc&gt;
    &lt;/result&gt;
&lt;/response&gt;
</code></pre>

<p>Even if we ignore the response header, the structure of the response/result/doc is not the same as of input document: the element names reflect the types, the arrays are grouped. If you try to add this document to a Solr server, you will get an error &ldquo;unexpected XML tag&rdquo;, obviously. I googled for couple hours on how to convert an output document to an input, and, to my surprise, didn&rsquo;t find any solution. Therefore I implemented my own converter in Groovy, which solved the problem. I post it <a href="http://gist.github.com/3813775">here</a> in case somebody needs it.</p>

<p>Note: You can also use this script to re-index Solr.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ford marbles]]></title>
    <link href="http://blog.ndpar.com/2011/11/05/ford-marbles/"/>
    <updated>2011-11-05T08:00:00-04:00</updated>
    <id>http://blog.ndpar.com/2011/11/05/ford-marbles</id>
    <content type="html"><![CDATA[<p>I found these marvelous renderings of Ford circles on <a href="http://www.flickr.com/photos/fdecomite/2564742912/in/photostream">flickr</a>. I can&rsquo;t help but share them here.</p>

<p><img class="center" src="http://farm4.static.flickr.com/3189/2564742912_d0faf59e38_z.jpg"></p>

<!-- more -->


<p><img class="center" src="http://farm4.static.flickr.com/3076/2563846663_6d0f428f08_z.jpg"></p>

<p><img class="center" src="http://farm4.static.flickr.com/3165/2564630336_d35c4ccf04_z.jpg"></p>

<p>As <a href="http://blog.ndpar.com/2011/08/06/thomaes-function/">Thomae&rsquo;s function</a>, <a href="http://en.wikipedia.org/wiki/Ford_circle">Ford circles</a> is another visual representation of rational numbers. You can investigate them <a href="http://demonstrations.wolfram.com/FordCircles/">here</a> with interactive Wolfram demo.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modulo who?]]></title>
    <link href="http://blog.ndpar.com/2011/09/16/modulo-who/"/>
    <updated>2011-09-16T08:00:00-04:00</updated>
    <id>http://blog.ndpar.com/2011/09/16/modulo-who</id>
    <content type="html"><![CDATA[<p>When programmer and mathematician are talking about modulus or modulo, there is often a confusion what this term means. For programmer <a href="http://en.wikipedia.org/wiki/Modulo_operator">modulo</a> means an operator that finds the <em>remainder</em> of division of one number by another, e.g. 5&nbsp;mod&nbsp;2 = 1. For mathematician <a href="http://en.wikipedia.org/wiki/Modular_arithmetic">modulo</a> is a <em>congruence</em> relation between two numbers: <em>a</em> and <em>b</em> are said to be congruent modulo <em>n</em>, written <em>a</em>&nbsp;&#8801;&nbsp;<em>b</em>&nbsp;(mod&nbsp;<em>n</em>), if their difference <em>a</em>&nbsp;&#8722;&nbsp;<em>b</em> is an integer multiple of <em>n</em>.</p>

<p>These two definitions are not equivalent. The former is a special case of the latter: if <em>b</em>&nbsp;mod&nbsp;<em>n</em> = <em>a</em> then <em>a</em>&nbsp;&#8801;&nbsp;<em>b</em>&nbsp;(mod&nbsp;<em>n</em>). The inverse is not true in general case. 5&nbsp;mod&nbsp;2 = 1, and 1&nbsp;&#8801;&nbsp;5&nbsp;(mod&nbsp;2) because 1&nbsp;&ndash;&nbsp;5&nbsp;=&nbsp;–4 is integer multiple of 2. Now 5&nbsp;&#8801;&nbsp;1&nbsp;(mod&nbsp;2), because 5&nbsp;&ndash;&nbsp;1&nbsp;=&nbsp;4 is evenly divisible by 2, but 1&nbsp;mod&nbsp;2 = 1, not 5.</p>

<p>The biggest confusion happens when programmer and mathematician start arguing about Gauss&#8217; famous <a href="http://mathworld.wolfram.com/QuadraticReciprocityTheorem.html">Golden Theorem</a> where both definitions of modulus can be used.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thomae's function]]></title>
    <link href="http://blog.ndpar.com/2011/08/06/thomaes-function/"/>
    <updated>2011-08-06T08:00:00-04:00</updated>
    <id>http://blog.ndpar.com/2011/08/06/thomaes-function</id>
    <content type="html"><![CDATA[<p><a href="http://en.wikipedia.org/wiki/Thomae%27s_function">Thomae&rsquo;s function</a> (a.k.a. Riemann function) is defined on the interval (0, 1) as follows</p>

<p><img class="center" src="http://blog.ndpar.com/images/posts/thomae-def.png"></p>

<p>Here is the graph of this function with some points highlighted as plus symbols for better view.</p>

<p><img class="center" src="http://blog.ndpar.com/images/posts/thomae.jpg"></p>

<p>This function has interesting property: it&rsquo;s continuous at all irrational numbers. It&rsquo;s easy to see this if you notice that for any positive <em>ε</em> there is finite number of points above the line <em>y</em> = <em>ε</em>. That means for any irrational number <em>x</em><sub>0</sub> you can always construct a <em>δ</em>-neighbourhood that doesn&rsquo;t contain any point from the area above the line <em>y</em> = <em>ε</em>.</p>

<p><img class="center" src="http://blog.ndpar.com/images/posts/thomae-e-d.jpg"></p>

<p>To generate the data file with point coordinates I wrote Common Lisp program:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">rational-numbers</span> <span class="p">(</span><span class="nv">max-denominator</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">result</span> <span class="p">(</span><span class="nb">list</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">q</span> <span class="nv">from</span> <span class="mi">2</span> <span class="nv">to</span> <span class="nv">max-denominator</span> <span class="nb">do</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">p</span> <span class="nv">from</span> <span class="mi">1</span> <span class="nv">to</span> <span class="p">(</span><span class="nb">1-</span> <span class="nv">q</span><span class="p">)</span> <span class="nb">do</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">pushnew</span> <span class="p">(</span><span class="nb">/</span> <span class="nv">p</span> <span class="nv">q</span><span class="p">)</span> <span class="nv">result</span><span class="p">)))</span>
</span><span class='line'>    <span class="nv">result</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">thomae-rational-points</span> <span class="p">(</span><span class="nv">abscissae</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">mapcar</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">x</span> <span class="p">(</span><span class="nb">/</span> <span class="mi">1</span> <span class="p">(</span><span class="nb">denominator</span> <span class="nv">x</span><span class="p">))))</span> <span class="nv">abscissae</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">thomae</span> <span class="p">(</span><span class="nv">max-denominator</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">points</span> <span class="p">(</span><span class="nv">thomae-rational-points</span> <span class="p">(</span><span class="nv">rational-numbers</span> <span class="nv">max-denominator</span><span class="p">))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">with-open-file</span> <span class="p">(</span><span class="nc">stream</span> <span class="s">&quot;thomae.dat&quot;</span> <span class="ss">:direction</span> <span class="ss">:output</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">point</span> <span class="nv">in</span> <span class="nv">points</span> <span class="nb">do</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">format</span> <span class="nc">stream</span> <span class="s">&quot;~4$ ~4$~%&quot;</span> <span class="p">(</span><span class="nb">first</span> <span class="nv">point</span><span class="p">)</span> <span class="p">(</span><span class="nb">second</span> <span class="nv">point</span><span class="p">))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">thomae</span> <span class="mi">500</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>To create the images I used <a href="http://www.gnuplot.info/">gnuplot</a> commands:</p>

<pre><code>plot "thomae.dat" using 1:2 with dots
plot "thomae.dat" using 1:2 with points
</code></pre>

<p>and Photoshop.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Math and Physics of Benderama]]></title>
    <link href="http://blog.ndpar.com/2011/06/27/math-and-physics-of-benderama/"/>
    <updated>2011-06-27T08:00:00-04:00</updated>
    <id>http://blog.ndpar.com/2011/06/27/math-and-physics-of-benderama</id>
    <content type="html"><![CDATA[<p>The last episode of <a href="http://theinfosphere.org/Benderama">Futurama</a> has interesting formula involved. The entire plot is based on the Professor&rsquo;s latest invention &mdash; <a href="http://en.wikipedia.org/wiki/Banach&amp;#8211;Tarski_paradox">Banach-Tarski</a> Dupla-Shrinker &mdash; the machine that produces two copies of any object at a 60% scale. It was just a matter of time when Bender found a proper usage of this machine: to replicate himself. Then two small copies of Bender replicated themselves making four smaller copies, and so forth. At some point the Professor horrified the crew that if they don&rsquo;t stop this unlimited growth, the total mass of all Benders will eventually be so big that the entire Earth will be consumed during the process of replication. As a proof he demonstrated this formula of the mass of all generations of Bender</p>

<p><img class="center" src="http://pool.theinfosphere.org/images/thumb/0/04/Benderama_Maths.png/800px-Benderama_Maths.png"></p>

<p>This is a perfect toy for a science geek. The first obvious question it brings: is this formula mathematically correct? As it turns out, it is not. Considering the scale of 60%, the cubic dependency of volume on linear dimension, and the constant density of all copies, the formula should be the following</p>

<p><img class="center" src="http://blog.ndpar.com/images/posts/benderama-mass.png"></p>

<p>As you can see the total mass of infinite number of Benders actually converges to approximately 1.76 <em>M</em><sub>0</sub>. So from Math perspective there is nothing to worry about. But what if our assumption of constant density is invalid. Would it be a problem from Physics perspective? Let&rsquo;s see.</p>

<p>Knowing that every new copy has a size of 0.6 of the original it was made from, we have the following formula for the size of Bender in the <em>n</em><sup>th</sup> generation</p>

<p><img class="center" src="http://blog.ndpar.com/images/posts/benderama-length.png"></p>

<p>This exponential function becomes very small pretty soon. In the <a href="http://www.wolframalpha.com/input/?i=0.6%5E154">154</a><sup>th</sup> generation it already reaches the <a href="http://en.wikipedia.org/wiki/Planck_length">Planck length</a>, after which the further replication is physically impossible. If we calculate the total mass of 154 Bender&rsquo;s generations using the Professor&rsquo;s formula, we get <a href="http://www.wolframalpha.com/input/?i=H%28154%29">H(154)</a> &#215; <a href="http://www.peelified.com/Futurama-Forum-1/Topic-4095-0-Benders_Weight.html">238</a> kg &#8776; 1,337.56 kg, which is nothing comparing to the Earth mass.</p>

<p>So we have to admit that from both Math and Physics perspective the Professor was wrong, and there was no real threat to the Earth.</p>

<p>Although the Professor&rsquo;s formula doesn&rsquo;t describe the replication process adequately, it&rsquo;s still a beautiful piece of Math because it&rsquo;s a formula of <a href="http://en.wikipedia.org/wiki/Harmonic_series_(mathematics)">harmonic series</a>. If you want to know why harmonic series is beautiful and which real processes it describes, read this nice <a href="http://plus.maths.org/content/perfect-harmony">article</a> of John H. Webb.</p>

<p>And don&rsquo;t miss the next <a href="http://theinfosphere.org/Ghost_in_the_Machines">episode</a> of Futurama this Thursday :&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional Groovy switch statement]]></title>
    <link href="http://blog.ndpar.com/2011/06/08/functional-groovy-switch-statement/"/>
    <updated>2011-06-08T08:00:00-04:00</updated>
    <id>http://blog.ndpar.com/2011/06/08/functional-groovy-switch-statement</id>
    <content type="html"><![CDATA[<p>In the previous <a href="http://blog.ndpar.com/2011/06/01/reversing-groovy-switch-statement">post</a> I showed how to replace chained if-else statements in Groovy with one concise switch. It was done for the special case of if-stement where every branch was evaluated using the same condition function. Today I want to make a generalization of that technique by allowing to use different conditionals.</p>

<p>Suppose your code looks like this:</p>

<pre><code>if (param % 2 == 0) {
    'even'
} else if (param % 3 == 0) {
    'threeven'
} else if (0 &lt; param) {
    'positive'
} else {
    'negative'
}
</code></pre>

<p>As long as every condition operates on the same parameter, you can replace the entire chain with a switch. In this scenario <code>param</code> becomes a switch parameter and conditions become <code>case</code> parameters of Closure type. The only thing we need to do is to override <code>Closure.isCase()</code> method as I described in the previous post. The safest way to do it is to create a category class:</p>

<pre><code>class CaseCategory {
    static boolean isCase(Closure casePredicate, Object switchParameter) {
        casePredicate.call switchParameter
    }
}
</code></pre>

<p>Now we can replace if-statement with the following switch:</p>

<pre><code>use (CaseCategory) {
    switch (param) {
        case { it % 2 == 0 } : return 'even'
        case { it % 3 == 0 } : return 'threeven'
        case { 0 &lt; it }      : return 'positive'
        default              : return 'negative'
    }
}
</code></pre>

<p>We can actually go further and extract in-line closures:</p>

<pre><code>def even = {
    it % 2 == 0
}
def threeven = {
    it % 3 == 0
}
def positive = {
    0 &lt; it
}
</code></pre>

<p>After which the code becomes even more readable:</p>

<pre><code>use (CaseCategory) {
    switch (param) {
        case even     : return 'even'
        case threeven : return 'threeven'
        case positive : return 'positive'
        default       : return 'negative'
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nothing new under the Sun]]></title>
    <link href="http://blog.ndpar.com/2011/06/07/nothing-new-under-sun/"/>
    <updated>2011-06-07T08:00:00-04:00</updated>
    <id>http://blog.ndpar.com/2011/06/07/nothing-new-under-sun</id>
    <content type="html"><![CDATA[<p>Every generation of software developers needs its own fad. For my generation it was Agile, for generation before it was OOP, and before that it was another big thing. Gerald Weinberg, one of the most influential people in our industry, blogged yesterday about this issue. With over 50 years of experience in software development he knows what he is talking about. Read his <a href="http://secretsofconsulting.blogspot.com/2011/06/beyond-agile-programming.html">blog post</a> — he has a very good point.</p>

<p>P.S. I&rsquo;m wondering what will be the next big thing. Will it be Cloud or <a href="http://blog.ndpar.com/2013/01/15/embrace-big-data/">Big Data</a>?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multimethods in Groovy]]></title>
    <link href="http://blog.ndpar.com/2011/06/05/multimethods-in-groovy/"/>
    <updated>2011-06-05T08:00:00-04:00</updated>
    <id>http://blog.ndpar.com/2011/06/05/multimethods-in-groovy</id>
    <content type="html"><![CDATA[<p>Every time I switch from Groovy to Java I have to remind myself that some things that seem so natural and work as expected in Groovy, don&rsquo;t work in Java. One of such differences is method dispatching. Groovy supports <a href="http://en.wikipedia.org/wiki/Multiple_dispatch">multiple dispatch</a>, while Java does not. Therefore the following <a href="http://www.gigamonkeys.com/book/object-reorientation-generic-functions.html#multimethods">code</a> works differently in Groovy and Java:</p>

<pre><code>public class A {
    public void foo(A a) { System.out.println("A/A"); }
    public void foo(B b) { System.out.println("A/B"); }
}
public class B extends A {
    public void foo(A a) { System.out.println("B/A"); }
    public void foo(B b) { System.out.println("B/B"); }
}
public class Main {
    public static void main(String[] args) {
        A a = new A();
        A b = new B();
        a.foo(a);
        b.foo(b);
    }
}

$ java Main
A/A
B/A

$ groovy Main.groovy
A/A
B/B
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reversing Groovy switch statement]]></title>
    <link href="http://blog.ndpar.com/2011/06/01/reversing-groovy-switch-statement/"/>
    <updated>2011-06-01T08:00:00-04:00</updated>
    <id>http://blog.ndpar.com/2011/06/01/reversing-groovy-switch-statement</id>
    <content type="html"><![CDATA[<p>Recently I&rsquo;ve been working on a Groovy code that had many methods with long multibranch conditionals like this:</p>

<pre><code>def parse(message, options) {
    if (options.contains('A')) {
        parseARule message
    } else if (options.contains(2)) {
        parseSmallDigitRule message
    ...
    } else if (options.contains(something)) {
        parseSomeRule message
    } else {
        parseSomeOtherRule message
    }
}
</code></pre>

<p>Although this code is working, it is hard to see which branch is called under which condition. It would be much better if we could replace this code with something like Lisp <code>cond</code> macro. The best candidate for such a task in Groovy would be a <code>switch</code> statement. If we could only refactor the code above to something like following, it would significantly improve readability:</p>

<pre><code>def parse(message, options) {
    switch (options) {
        case 'A' : return parseARule(message)
        case 2   : return parseSmallDigitRule(message)
        ...
        case ... : return parseSomeRule(message)
        default  : return parseSomeOtherRule(message)
    }
}
</code></pre>

<p>Unfortunately, this code doesn&rsquo;t work out of the box in Groovy, but it works if we do some metaprogramming.</p>

<p>The way <code>switch</code> statement works in Groovy is a bit <a href="http://docs.codehaus.org/display/GROOVY/Logical+Branching#LogicalBranching-switchstatement">different</a> than in Java. Instead of equals() it uses isCase() method to match case-value and switch-value. The default implementation of isCase() method falls back to equals() method, but some classes, including <a href="http://groovy.codehaus.org/groovy-jdk/java/util/Collection.html#isCase(java.lang.Object)">Collection</a>, override this behaviour. That&rsquo;s why in Groovy you can do things like this:</p>

<pre><code>switch (value) {
    case ['A','E','I','O','U'] : return 'vowel'
    case 0..9                  : return 'digit'
    case Date                  : return 'date'
    default                    : return 'something else'
}
</code></pre>

<p>For our purposes we need some sort of reverse <code>switch</code>, where collection is used as a switch-value, and String and Integer are used as a case-value. To do this we need to override default implementation of isCase() method on String and Integer classes. It&rsquo;s not possible in Java, but is very easy in Groovy. You can change method implementation globally by replacing it in corresponding meta class, or locally with the help of categories. Let&rsquo;s create a category that swaps object and subject of isCase() method:</p>

<pre><code>class CaseCategory {
    static boolean isCase(String string, Collection col) {
        reverseCase(string, col)
    }
    static boolean isCase(Integer integer, Collection col) {
        reverseCase(integer, col)
    }
    // Add more overloaded methods here if needed

    private static boolean reverseCase(left, right) {
        right.isCase(left)
    }
}
</code></pre>

<p>Now we can use this category to achieve the goal we stated at the beginning of this post:</p>

<pre><code>def parse(message, options) {
    use (CaseCategory) {
        switch (options) {
            case 'A' : return parseARule(message)
            case 2   : return parseSmallDigitRule(message)
            ...
            case ... : return parseSomeRule(message)
            default  : return parseSomeOtherRule(message)
        }
    }
}
</code></pre>

<p>If you are comfortable with global method replacement, you can amend String and Integer meta classes. In this case you don&rsquo;t need to wrap <code>switch</code> statement with <code>use</code> keyword.</p>
]]></content>
  </entry>
  
</feed>
