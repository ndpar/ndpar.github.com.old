<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Conference | Side Notes]]></title>
  <link href="http://blog.ndpar.com/categories/conference/atom.xml" rel="self"/>
  <link href="http://blog.ndpar.com/"/>
  <updated>2014-10-13T21:45:18-04:00</updated>
  <id>http://blog.ndpar.com/</id>
  <author>
    <name><![CDATA[Andrey Paramonov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lambda Jam 2013]]></title>
    <link href="http://blog.ndpar.com/2013/07/08/lambdajam-2013/"/>
    <updated>2013-07-08T05:00:00-04:00</updated>
    <id>http://blog.ndpar.com/2013/07/08/lambdajam-2013</id>
    <content type="html"><![CDATA[<p>This is my impressionistic non-canonical irregular Clojuresque-Erlangish notes on <a href="http://lambdajam.com">Lambda Jam</a> conference which took place in Chicago on July 8–10, 2013.
These notes are pretty long, and I don’t split them on purpose.
If you read them all, you should become overwhelmed and overloaded with the information.
Only this way you can feel the same I felt on the last day of the conference :)</p>

<p><img src="http://lambdajam.com/storage/2013/GrandBallroom2_header.jpg.jpeg?__SQUARESPACE_CACHEVERSION=1361043346973"></p>

<!-- more -->

<h2 id="stuart-sierra--data-visibility-and-abstraction">Stuart Sierra — Data, Visibility, and Abstraction</h2>

<ul>
  <li>Video: <a href="http://www.infoq.com/presentations/data-visibility-abstraction">InfoQ</a></li>
</ul>

<h3 id="quotes">Quotes</h3>

<ul>
  <li>QBasic distinguished between subroutines and functions.</li>
  <li>Perl is a QBasic of Linux.</li>
  <li>Perl provided bunch of abstractions that made my life easier.</li>
  <li>Just a few generic data structures can represent pretty much any kind of data.</li>
</ul>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1">#!/usr/bin/env perl&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span><span class="k">my</span> <span class="nv">$user</span> <span class="o">=</span>
</span><span class='line'>  <span class="p">{</span> <span class="n">name</span>  <span class="o">=&amp;</span><span class="ow">gt</span><span class="p">;</span> <span class="err">“</span><span class="n">Stuart</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>    <span class="n">age</span>   <span class="o">=&amp;</span><span class="ow">gt</span><span class="p">;</span> <span class="mi">15</span><span class="p">,</span>
</span><span class='line'>    <span class="n">langs</span> <span class="o">=&amp;</span><span class="ow">gt</span><span class="p">;</span> <span class="p">[</span> <span class="err">“</span><span class="n">BASIC</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>               <span class="err">“</span><span class="n">C</span><span class="o">++</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>               <span class="err">“</span><span class="n">Perl</span><span class="err">”</span> <span class="p">]</span> <span class="p">};</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span><span class="k">print</span> <span class="nv">$user</span><span class="o">-&amp;</span><span class="ow">gt</span><span class="p">;{</span><span class="err">‘</span><span class="n">langs</span><span class="err">’</span><span class="p">}[</span><span class="mi">2</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
  <li><code>Tie::File</code> — Access the lines of a disk file via a Perl array.</li>
  <li>XSLT is a homoiconic programming language.</li>
  <li>[In XSLT] you can write the entire program as a series of data transformations.</li>
</ul>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/usr/bin/env bash</span>
</span><span class='line'>saxon one.xslt site.xml t1.xml
</span><span class='line'>saxon two.xslt t1.xml t2.xml
</span><span class='line'>saxon three.xslt t2.xml t3.xml
</span><span class='line'>saxon four.xslt t3.xml index.html
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
  <li>Clojure has universal data structures.</li>
</ul>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">user</span> <span class="p">{</span><span class="ss">:name</span> <span class="err">“</span><span class="nv">Stuart</span><span class="err">”</span>
</span><span class='line'>           <span class="ss">:age</span> <span class="mi">25</span>
</span><span class='line'>           <span class="ss">:langs</span> <span class="p">[</span><span class="err">“</span><span class="nv">Lisp</span><span class="err">”</span>
</span><span class='line'>                   <span class="err">“</span><span class="nv">Ruby</span><span class="err">”</span>
</span><span class='line'>                   <span class="err">“</span><span class="nv">Clojure</span><span class="err">”</span><span class="p">]})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
  <li>I’m frequently suspicious of libraries that use a lot of macros to create their abstractions because it means I can’t see them, I can’t manipulate them with the tools I already have.</li>
</ul>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">require</span> <span class="err">‘</span><span class="nv">clojure.inspector</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">clojure.inspector/inspect-tree</span> <span class="nv">user</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img class="center" src="/images/posts/clojure.inspector.png"></p>

<ul>
  <li>I started to write my programs as a series of data transformations with just one set of side-effects at the very end.</li>
</ul>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">gather-information</span> <span class="p">[</span><span class="nv">state</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">assoc </span><span class="nv">state</span> <span class="ss">:analysis</span>
</span><span class='line'>               <span class="p">(</span><span class="nf">computation</span> <span class="p">(</span><span class="ss">:input</span> <span class="nv">state</span><span class="p">))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">make-decision</span> <span class="p">[</span><span class="nv">state</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">assoc </span><span class="nv">state</span> <span class="ss">:response</span>
</span><span class='line'>               <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">condition?</span> <span class="p">(</span><span class="ss">:analysis</span> <span class="nv">state</span><span class="p">))</span>
</span><span class='line'>                   <span class="ss">:launch-missile</span>
</span><span class='line'>                   <span class="ss">:erase-hard-drive</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">take-action</span> <span class="p">[</span><span class="nv">state</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">case</span> <span class="p">(</span><span class="ss">:response</span> <span class="nv">state</span><span class="p">)</span>
</span><span class='line'>    <span class="ss">:launch-missile</span> <span class="p">(</span><span class="nf">launch-missile</span><span class="p">)</span>
</span><span class='line'>    <span class="ss">:erase-hard-drive</span> <span class="p">(</span><span class="nf">erase-hard-drive</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">complex-process</span> <span class="p">[</span><span class="nv">initial-state</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">-</span><span class="o">&amp;</span><span class="nv">gt</span><span class="c1">; initial-state</span>
</span><span class='line'>      <span class="nv">gather-information</span>
</span><span class='line'>      <span class="nv">make-decision</span>
</span><span class='line'>      <span class="nv">take-action</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
  <li>I try to pursue abstractions that make programs more visible, make easier to see what the program is doing.</li>
</ul>

<p><blockquote><p>Being abstract is something profoundly different from being vague…</p></p><p><p>The purpose of abstraction is not to be vague, but to create a new semantic level in which one can be absolutely precise.</p><footer><strong>Edsger Dijkstra</strong></footer></blockquote></p>

<h2 id="aditya-siram--simile-free-monad-recipes">Aditya Siram — Simile-Free Monad Recipes</h2>

<ul>
  <li>Slides: <a href="https://github.com/strangeloop/lambdajam2013/blob/master/slides/Siram-SimileFreeMonadRecipes.pdf">GitHub</a></li>
</ul>

<h3 id="non-idiomatic-haskell-monad-tutorial">Non-idiomatic Haskell monad tutorial</h3>

<p>Working with monads is a switching between monadic and non-monadic context.</p>

<h3 id="io">IO</h3>

<ul>
  <li><code>&lt;-</code> operator gets the value from monadic context.</li>
  <li><code>return</code> puts the value into monadic context.</li>
</ul>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">main</span> <span class="ow">::</span> <span class="kt">IO</span> <span class="nb">()</span>
</span><span class='line'><span class="nf">main</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class='line'>  <span class="n">writeFile</span> <span class="err">“</span><span class="n">test</span><span class="o">.</span><span class="n">txt</span><span class="err">”</span> <span class="err">“</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">e</span><span class="err">”</span> <span class="ow">::</span> <span class="kt">IO</span> <span class="nb">()</span>
</span><span class='line'>  <span class="n">x</span> <span class="ow">::</span> <span class="kt">String</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">readFile</span> <span class="err">“</span><span class="n">test</span><span class="o">.</span><span class="n">txt</span><span class="err">”</span> <span class="ow">::</span> <span class="kt">IO</span> <span class="kt">String</span>
</span><span class='line'>  <span class="kr">let</span> <span class="n">upCased</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">=</span> <span class="n">map</span> <span class="n">toUpper</span> <span class="n">x</span>
</span><span class='line'>  <span class="n">y</span> <span class="ow">::</span> <span class="kt">String</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">return</span> <span class="n">upCased</span> <span class="ow">::</span> <span class="kt">IO</span> <span class="kt">String</span>
</span><span class='line'>  <span class="n">print</span> <span class="n">y</span> <span class="ow">::</span> <span class="kt">IO</span> <span class="nb">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="reader">Reader</h3>

<ul>
  <li>Reader = Read-only State + Result</li>
  <li><code>runReader</code> :: Reader Monad -&gt; Read-Only State -&gt; Result</li>
  <li><code>ask</code> extracts the state from the monad for inspection.</li>
</ul>

<h3 id="writer">Writer</h3>

<ul>
  <li>Writer = Append-Only State + Result</li>
  <li><code>runWriter</code> :: Writer Monad -&gt; (Result, Accumulated State)</li>
  <li>State is accumulated using <code>tell</code>.</li>
</ul>

<h3 id="state">State</h3>

<ul>
  <li>State Monad = Mutable State + Result</li>
  <li><code>get</code>, <code>put</code> do what they sound like.</li>
  <li><code>runState</code> :: State Monad -&gt; Initial State -&gt; (Result, New State)</li>
  <li>Initial State is required.</li>
</ul>

<h2 id="dean-wampler--copious-data-the-killer-app-for-fp">Dean Wampler — Copious Data, the “Killer App” for FP</h2>

<ul>
  <li>Slides: <a href="https://github.com/strangeloop/lambdajam2013/blob/master/slides/Wampler-CopiousDataTheKillerAppForFP.pdf">GitHub</a></li>
  <li>Video: <a href="http://www.infoq.com/presentations/big-data-functional-programming">InfoQ</a></li>
</ul>

<h3 id="quotes-1">Quotes</h3>

<ul>
  <li>It’s hard to implement many algorithms in MapReduce.</li>
  <li>MapReduce is very course-grained.</li>
  <li>For Hadoop in particularly, the Java API is hard to use.</li>
  <li>Hadoop is the EJBs of our time</li>
</ul>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapred.</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">class</span> <span class="nc">WCMapper</span> <span class="kd">extends</span> <span class="n">MapReduceBase</span>
</span><span class='line'>    <span class="kd">implements</span> <span class="n">Mapper</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">LongWritable</span><span class="o">,</span> <span class="n">Text</span><span class="o">,</span> <span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">static</span> <span class="kd">final</span> <span class="n">IntWritable</span> <span class="n">one</span> <span class="o">=</span> <span class="k">new</span> <span class="n">IntWritable</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'><span class="kd">static</span> <span class="kd">final</span> <span class="n">Text</span> <span class="n">word</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Text</span><span class="o">();</span> <span class="c1">// Value will be set in a non-thread-safe way!</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">map</span><span class="o">(</span><span class="n">LongWritable</span> <span class="n">key</span><span class="o">,</span> <span class="n">Text</span> <span class="n">valueDocContents</span><span class="o">,</span>
</span><span class='line'>        <span class="n">OutputCollector</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">output</span><span class="o">,</span> <span class="n">Reporter</span> <span class="n">reporter</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span><span class="o">[]</span> <span class="n">tokens</span> <span class="o">=</span> <span class="n">valueDocContents</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;\\s+&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="nl">wordString:</span> <span class="n">tokens</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">wordString</span><span class="o">.</span><span class="na">length</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">word</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">wordString</span><span class="o">.</span><span class="na">toLowerCase</span><span class="o">());</span>
</span><span class='line'>            <span class="n">output</span><span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="n">one</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span> <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">class</span> <span class="nc">Reduce</span> <span class="kd">extends</span> <span class="n">MapReduceBase</span>
</span><span class='line'>    <span class="kd">implements</span> <span class="n">Reducer</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">,</span> <span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kt">void</span> <span class="n">reduce</span><span class="o">(</span><span class="n">Text</span> <span class="n">keyWord</span><span class="o">,</span> <span class="n">Iterator</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">IntWritable</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">valuesCounts</span><span class="o">,</span>
</span><span class='line'>        <span class="n">OutputCollector</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">output</span><span class="o">,</span> <span class="n">Reporter</span> <span class="n">reporter</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">totalCount</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">valuesCounts</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">totalCount</span> <span class="o">+=</span> <span class="n">valuesCounts</span><span class="o">.</span><span class="na">next</span><span class="o">().</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">output</span><span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">keyWord</span><span class="o">,</span> <span class="k">new</span> <span class="n">IntWritable</span><span class="o">(</span><span class="n">totalCount</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<ul>
  <li>Use Cascalog</li>
</ul>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">lowercase</span> <span class="p">[</span><span class="nv">w</span><span class="p">]</span> <span class="p">(</span><span class="nf">.toLowerCase</span> <span class="nv">w</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">?</span><span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;- (stdout) [?word ?count]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">sentence</span> <span class="nv">?s</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">split</span> <span class="nv">?s</span> <span class="err">:</span><span class="o">&amp;</span><span class="nv">gt</span><span class="c1">; ?word1)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">lowercase</span> <span class="nv">?word1</span> <span class="err">:</span><span class="o">&amp;</span><span class="nv">gt</span><span class="c1">; ?word)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">c/count</span> <span class="nv">?count</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
  <li>Use Spark</li>
</ul>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">WordCountSpark</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">file</span> <span class="k">=</span> <span class="n">spark</span><span class="o">.</span><span class="n">textFile</span><span class="o">(</span><span class="n">args</span><span class="o">(</span><span class="mi">0</span><span class="o">))</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">counts</span> <span class="k">=</span> <span class="n">file</span><span class="o">.</span><span class="n">flatMap</span><span class="o">(</span><span class="n">line</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="o">(</span><span class="err">“</span><span class="o">\</span><span class="n">W</span><span class="o">+</span><span class="err">”</span><span class="o">))</span>
</span><span class='line'>                         <span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">word</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="mi">1</span><span class="o">))</span>
</span><span class='line'>                         <span class="o">.</span><span class="n">reduceByKey</span><span class="o">(</span><span class="k">_</span> <span class="o">+</span> <span class="k">_</span><span class="o">)</span>
</span><span class='line'>        <span class="n">counts</span><span class="o">.</span><span class="n">saveAsTextFile</span><span class="o">(</span><span class="n">args</span><span class="o">(</span><span class="mi">1</span><span class="o">))</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
  <li>Data problems are fundamentally Mathematics!</li>
  <li>Data will drive widespread FP adoption.</li>
</ul>

<h3 id="resources">Resources</h3>

<ul>
  <li><a href="http://www.cascading.org">Cascading</a> — an application framework for Java developers to simply develop Data Analytics applications on Hadoop.</li>
  <li>Nathan Marz — Introducing Cascalog: a Clojure-based query language for Hadoop. [<a href="http://nathanmarz.com/blog/introducing-cascalog-a-clojure-based-query-language-for-hado.html">blog</a>]</li>
  <li><a href="http://storm-project.net">Storm</a> — free and open source distributed realtime computation system.</li>
  <li><a href="http://spark-project.org">Spark</a> — an open source cluster computing system that aims to make data analytics fast.</li>
  <li>Evan Miller — The Mathematical Hacker. [<a href="http://www.evanmiller.org/mathematical-hacker.html">blog</a>]</li>
</ul>

<h2 id="jam">Jam</h2>

<p>A jam is similar to a code retreat, only you work in groups instead of pairs. It starts with a problem description. Then you form a group and work on the problem for three hours. In the end you share your experience with the audience.</p>

<p>The problem of the first jam was Peter Norvig’s <a href="http://norvig.com/spell-correct.html">Spelling Corrector</a>. I was wandering the room looking for an Erlang group to join when I bumped into this bunch of wonderful people: <a href="https://twitter.com/Bruce_Adams">Bruce Adams</a>, <a href="https://twitter.com/joeerl">Joe Armstrong</a>, <a href="https://twitter.com/gar1t">Garrett Smith</a>, <a href="https://twitter.com/bryan_hunter">Bryan Hunter</a>, and <a href="https://twitter.com/karl_grz">Karl Grzeszczak</a>.</p>

<p><img class="center" src="https://pbs.twimg.com/media/BOrdEK6CYAA2zlb.jpg"></p>

<p>Soon the jam transformed into an Erlang master class from Joe Armstrong. We were watching Joe’s work flow, his way of thinking, learning his tips and tricks, listening to his brilliant comments about Erlang and Haskell.</p>

<p><img class="center" src="https://pbs.twimg.com/media/BOrk-wfCEAE3kKr.jpg"></p>

<p>At some point I remarked how elegant was the function Joe Armstrong just implemented, on which he replied: <strong><em>There is not much intelligence here. It’s all about practice.</em></strong></p>

<p><blockquote><p>Today I watched @joeerl implementing a parallel spell checker in Erlang. That was worth the price of admission alone. Thank you! #LambdaJam</p><footer><strong>@karl_grz</strong> <cite><a href='https://twitter.com/karl_grz/statuses/354386650291380224'>twitter.com/karl_grz/statuses/&hellip;</a></cite></footer></blockquote></p>

<h3 id="resources-1">Resources</h3>

<ul>
  <li><a href="https://github.com/ericnormand/spelling-jam/blob/master/code/erlang/spell.erl">Source code</a></li>
</ul>

<h2 id="joe-armstrong--keynote">Joe Armstrong — Keynote</h2>

<h3 id="systems-that-run-forever-self-heal-and-scale">Systems That Run Forever Self-Heal and Scale</h3>

<ul>
  <li>Slides: <a href="https://github.com/strangeloop/lambdajam2013/blob/master/slides/Armstrong-SystemsThatRunForever.pdf">GitHub</a></li>
  <li>Video: <a href="http://www.infoq.com/presentations/self-heal-scalable-system">InfoQ</a></li>
</ul>

<h3 id="quotes-2">Quotes</h3>

<ul>
  <li>I’m not interested in programming languages. I’m interested in solving problems.</li>
  <li>Primary goal Erlang was designed for is the fault-talerant computation.</li>
  <li>I think it’s a bad idea to design your system for 10 people and then scale it up for 10,000. It’s better to design it for 10M and scale it down.</li>
  <li>The difficult part of making reliable system is to make multiple machines work independently in parallel.</li>
</ul>

<p>Why distributed programming is hard</p>

<ol>
  <li>Difficulty in identifying and dealing with failures.</li>
  <li>Achieving consistency in data across processes.</li>
  <li>Heterogeneous nature of the components involved in the system.</li>
  <li>Testing a distributed system is quite difficult.</li>
  <li>The technologies involved in distributed systems are not easy to understand.</li>
</ol>

<p><em>Chord</em> algorithm: distributing data across several machines</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>S1 <span class="nv">IP</span> <span class="o">=</span> 235.23.34.12
</span><span class='line'>S2 <span class="nv">IP</span> <span class="o">=</span> 223.23.141.53
</span><span class='line'>S3 <span class="nv">IP</span> <span class="o">=</span> 122.67.12.23&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;md5<span class="o">(</span>ip<span class="o">(</span>s1<span class="o">))</span> <span class="o">=</span> C82D4DB065065DBDCDADFBC5A727208E
</span><span class='line'>md5<span class="o">(</span>ip<span class="o">(</span>s2<span class="o">))</span> <span class="o">=</span> 099340C20A42E004716233AB216761C3
</span><span class='line'>md5<span class="o">(</span>ip<span class="o">(</span>s3<span class="o">))</span> <span class="o">=</span> A0E607462A563C4D8CCDB8194E3DEC8B&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Sorted:
</span><span class='line'><span class="nv">099340C20A42E004716233AB216761C3</span> <span class="o">=</span>&amp;gt; s2
</span><span class='line'><span class="nv">A0E607462A563C4D8CCDB8194E3DEC8B</span> <span class="o">=</span>&amp;gt; s3
</span><span class='line'><span class="nv">C82D4DB065065DBDCDADFBC5A727208E</span> <span class="o">=</span>&amp;gt; s1&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;lookup <span class="nv">Key</span> <span class="o">=</span> “mail-23412”
</span><span class='line'>md5<span class="o">(</span>“mail-23412”<span class="o">)</span> <span class="o">=</span>&amp;gt; B91AF709D7C1E6988FCEE7ADF7094A26&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;So the Value is on machine s3 <span class="o">(</span>first machine with Md5 lower than md5 of key<span class="o">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Replica:
</span><span class='line'>md5<span class="o">(</span>md5<span class="o">(</span>“mail-23412”<span class="o">))</span> <span class="o">=</span>&amp;gt; D604E7A54DC18FD7AC70D12468C34B63&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;So the replica is on machine s1
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
  <li>What if master dies? <em>Paxos</em> — distributed leadership election algorithm. Very complicated algorithm that only few people understand.</li>
  <li>The leadership election is solved in OTP (mnesia, gen_leader) and Riak.</li>
  <li>You don’t need libraries to write web server. Any fool can write them. But distributed data storage is difficult.</li>
</ul>

<p>Six rules for building HA systems</p>

<ol>
  <li>Isolation</li>
  <li>Concurrency</li>
  <li>Failure detection</li>
  <li>Fault identification</li>
  <li>Live code upgrade</li>
  <li>Stable storage</li>
</ol>

<ul>
  <li>With stable storage you don’t need backups. You need snapshots, because you override the data, but you don’t need backups.</li>
  <li>Threads are evil because they share resources.</li>
  <li>We already solved the problem with parallel computing (in Erlang). <em>We are working on detecting bottlenecks now.</em></li>
</ul>

<h3 id="resources-2">Resources</h3>

<ul>
  <li>Ericsson <a href="http://www.ericsson.com/ourportfolio/products/sgsn-mme">SGSN-MME</a>.</li>
  <li>Rajith Attapattu — 5 reasons why Distributed Systems are hard to program. [<a href="http://rajith.2rlabs.com/2008/07/23/5-reasons-why-distributed-systems-are-hard-to-develop/">blog</a>]</li>
  <li><a href="http://en.wikipedia.org/wiki/Chord_(peer-to-peer)">Chord</a> algorithm.</li>
  <li><a href="http://en.wikipedia.org/wiki/Paxos_(computer_science)">Paxos</a> algorithm.</li>
  <li>Leslie Lamport — Paxos Made Simple. [<a href="http://www.cs.utexas.edu/users/lorenzo/corsi/cs380d/past/03F/notes/paxos-simple.pdf">pdf</a>]</li>
  <li>Thomas Arts, Koen Claessen, Hans Svensson — Semi-formal development of a fault-tolerant leader election protocol in Erlang. [<a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.101.3220">article</a>]</li>
  <li><a href="http://concurix.com">Concurix</a> — performance tool for Erlang.</li>
</ul>

<h2 id="erlang-beer-with-joe-armstrong">Erlang beer with Joe Armstrong</h2>

<p><blockquote><p>For those who didn't hear, we're meeting up at The Public House - 400 N State St.</p><footer><strong>@gar1t</strong> <cite><a href='https://twitter.com/gar1t/statuses/354375863971749888'>twitter.com/gar1t/statuses/&hellip;</a></cite></footer></blockquote></p>

<p>This was the best part of the first day :)</p>

<h2 id="john-daily--distributed-programming-with-riak-core-and-pipe">John Daily — Distributed Programming with Riak Core and Pipe</h2>

<ul>
  <li>Slides: <a href="https://github.com/strangeloop/lambdajam2013/blob/master/slides/Daily-RiakCorePipe.pdf">GitHub</a></li>
</ul>

<p>Distributed programming is hard (clocks, latency, lost messages, servers break). Use Riak.</p>

<h3 id="resources-3">Resources</h3>

<ul>
  <li>Sources: Riak <a href="https://github.com/basho/riak_core">core</a> and <a href="https://github.com/basho/riak_pipe">pipe</a>.</li>
  <li>Eric Redmond — A Little Riak <a href="https://github.com/coderoshi/little_riak_book/tree/master/rendered/">Book</a>.</li>
</ul>

<h2 id="tracy-harms--semantics-clarity-and-notation-the-benefits-of-expressions-over-statements">Tracy Harms — Semantics, clarity, and notation: the benefits of expressions over statements</h2>

<p><blockquote><p>@kaleidic’s “Benefits of Expressions Over Statements” is gold. Brain is barely keeping up.</p><footer><strong>@bryan_hunter</strong> <cite><a href='https://twitter.com/bryan_hunter/statuses/354619102792396803'>twitter.com/bryan_hunter/&hellip;</a></cite></footer></blockquote></p>

<ul>
  <li>Expressions condense meaning in space, and eliminate time.</li>
  <li>Understanding occurs only when meaning is selected and simplified enough for a mind to think about it.</li>
</ul>

<p><blockquote><p>This is the example @kaleidic is showing now</p><footer><strong>@gazoombo</strong> <cite><a href='https://twitter.com/gazoombo/statuses/354622989599383552'>twitter.com/gazoombo/statuses/&hellip;</a></cite></footer></blockquote></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>allmasks=: 2 #:@i.@^ #
</span><span class='line'>firstend=: 1 0 i.&amp;1@E.”1 ]
</span><span class='line'>laststart=: 0 1 {:@I.@E.”1 ]
</span><span class='line'>noncont=: &lt;@#~ (#~ firstend &lt; laststart)@allmasks&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>noncont 1+i.4
</span><span class='line'>┌───┬───┬───┬─────┬─────┐
</span><span class='line'>│2 4│1 4│1 3│1 3 4│1 2 4│
</span><span class='line'>└───┴───┴───┴─────┴─────┘&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>noncont ‘aeiou’
</span><span class='line'>┌──┬──┬──┬───┬───┬──┬──┬───┬──┬───┬───┬────┬───┬───┬────┬────┐
</span><span class='line'>│iu│eu│eo│eou│eiu│au│ao│aou│ai│aiu│aio│aiou│aeu│aeo│aeou│aeiu│
</span><span class='line'>└──┴──┴──┴───┴───┴──┴──┴───┴──┴───┴───┴────┴───┴───┴────┴────┘&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>#noncont i.10
</span><span class='line'>968</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="resources-4">Resources</h3>

<ul>
  <li>P. J. Landin — The Next 700 Programming Languages. [<a href="http://www.cs.cmu.edu/~crary/819-f09/Landin66.pdf">pdf</a>]</li>
  <li>Tracy Harms — J: A Programming Language. [<a href="http://kaleidic.com/talks/ELC2013-1-1.pdf">pdf</a>]</li>
</ul>

<h2 id="chris-ford--functional-composition">Chris Ford — Functional composition</h2>

<ul>
  <li>Video: <a href="http://www.infoq.com/presentations/music-functional-language">InfoQ</a></li>
  <li>Demo source code: <a href="https://github.com/ctford/functional-composition/tree/LambdaJam-2013">GitHub</a></li>
</ul>

<h3 id="quotes-3">Quotes</h3>

<ul>
  <li>Western music notation is a DSL designed to be executed on a pecular kind of FSM called the musician.</li>
  <li>Sound error correction happening in the brain.</li>
  <li>Given the audience, let’s try <em>F sharp blues</em>.</li>
  <li>A canon is defined as a series of notes that are accompanied by a functional transformation of themselves.</li>
</ul>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">canon</span> <span class="p">[</span><span class="nv">f</span> <span class="nv">notes</span><span class="p">]</span> <span class="p">(</span><span class="nb">concat </span><span class="nv">notes</span> <span class="p">(</span><span class="nf">f</span> <span class="nv">notes</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
  <li>These are all pure functions, so we can compose them together. And that’s what composers did long before the lambda calculus was invented.</li>
</ul>

<h2 id="clinton-dreisbach--functional-web-development-with-clojure">Clinton Dreisbach — Functional Web Development with Clojure</h2>

<p>The Clojure way of web development: lots of loosely coupled libraries.</p>

<h3 id="ring">Ring</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defproject </span><span class="nv">request-echo</span> <span class="err">“</span><span class="mf">0.1</span><span class="nv">.0-SNAPSHOT</span><span class="err">”</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="ss">:dependencies</span> <span class="p">[[</span><span class="nv">org.clojure/clojure</span> <span class="err">“</span><span class="mf">1.5</span><span class="nv">.1</span><span class="err">”</span><span class="p">]</span>
</span><span class='line'>                 <span class="p">[</span><span class="nv">ring</span> <span class="err">“</span><span class="mf">1.1</span><span class="nv">.8</span><span class="err">”</span><span class="p">]]</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="ss">:plugins</span> <span class="p">[[</span><span class="nv">lein-ring</span> <span class="err">“</span><span class="mf">0.8</span><span class="nv">.3</span><span class="err">”</span><span class="p">]]</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="ss">:ring</span> <span class="p">{</span><span class="ss">:handler</span> <span class="nv">request-echo/handler</span>
</span><span class='line'>         <span class="ss">:port</span> <span class="mi">3001</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<pre><code>lein ring server
</code></pre>

<p><img class="center" src="/images/posts/ring.png"></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">request-echo</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.pprint</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">pprint</span><span class="p">]]))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">handler</span> <span class="p">[</span><span class="nv">request</span><span class="p">]</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="ss">:body</span> <span class="p">(</span><span class="nb">str </span><span class="err">“</span><span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;h1&amp;gt;Request Echo&amp;lt;/h1&amp;gt;&amp;lt;pre&amp;gt;”</span>
</span><span class='line'>              <span class="p">(</span><span class="nb">with-out-str </span><span class="p">(</span><span class="nf">pprint</span> <span class="nv">request</span><span class="p">))</span>
</span><span class='line'>              <span class="err">“</span><span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;/pre&amp;gt;”)})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="compojure">Compojure</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">require</span> <span class="err">‘</span><span class="p">[</span><span class="nv">compojure.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">])</span>
</span><span class='line'><span class="p">(</span><span class="nf">require</span> <span class="err">‘</span><span class="p">[</span><span class="nv">compojure.route</span> <span class="ss">:as</span> <span class="nv">route</span><span class="p">])</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">routes</span>
</span><span class='line'>  <span class="c1">;verb  route   parameters        handler</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">GET</span>   <span class="err">“</span><span class="nv">/</span><span class="err">”</span>     <span class="p">[]</span>                <span class="p">(</span><span class="nf">index-page</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">GET</span>   <span class="err">“</span><span class="nv">/debts/</span><span class="ss">:person</span><span class="err">”</span> <span class="p">[</span><span class="nv">person</span><span class="p">]</span> <span class="p">(</span><span class="nf">person-page</span> <span class="nv">person</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">GET</span>   <span class="err">“</span><span class="nv">/add-debt</span><span class="err">”</span> <span class="p">[]</span>            <span class="p">(</span><span class="nf">add-debt-page</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">POST</span>  <span class="err">“</span><span class="nv">/add-debt</span><span class="err">”</span> <span class="p">[</span><span class="nv">from</span> <span class="nv">to</span> <span class="nv">amount</span><span class="p">]</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">add-debt-post</span> <span class="p">{</span><span class="ss">:from</span> <span class="nv">from</span>, <span class="ss">:to</span> <span class="nv">to</span>, <span class="ss">:amount</span> <span class="nv">amount</span><span class="p">}))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">route/resources</span> <span class="err">“</span><span class="nv">/</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">route/not-found</span> <span class="err">“</span><span class="nv">Page</span> <span class="nb">not </span><span class="nv">found</span><span class="err">”</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="hiccup">Hiccup</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">require</span> <span class="err">‘</span><span class="p">[</span><span class="nv">hiccup.core</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">html</span><span class="p">]])</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">html</span> <span class="p">[</span><span class="ss">:a.btn</span>         <span class="c1">; element + class or id</span>
</span><span class='line'>       <span class="p">{</span><span class="ss">:href</span> <span class="err">“</span><span class="nv">/go</span><span class="err">”</span><span class="p">}</span>  <span class="c1">; map for attributes</span>
</span><span class='line'>       <span class="err">“</span><span class="nv">Click</span> <span class="nv">here</span><span class="err">”</span><span class="p">])</span> <span class="c1">; Content</span>
</span><span class='line'><span class="c1">;;=&amp;gt; “&lt;a class=&quot;btn&quot; href=&quot;http://blog.ndpar.com/go&quot;&gt;Click here&lt;/a&gt;”</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="cheshire">Cheshire</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">require</span> <span class="err">‘</span><span class="p">[</span><span class="nv">cheshire.core</span> <span class="ss">:as</span> <span class="nv">json</span><span class="p">])</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">debts</span> <span class="p">(</span><span class="ss">:debts</span> <span class="err">@</span><span class="nv">db</span><span class="p">)</span>
</span><span class='line'>      <span class="nv">balances</span> <span class="p">(</span><span class="nf">debts/balances</span> <span class="nv">debts</span><span class="p">)]</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="ss">:body</span> <span class="p">(</span><span class="nf">json/generate-string</span>
</span><span class='line'>          <span class="p">{</span><span class="ss">:debts</span> <span class="nv">debts</span>
</span><span class='line'>           <span class="ss">:balances</span> <span class="nv">balances</span><span class="p">})})</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">routes</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">POST</span> <span class="err">“</span><span class="nv">/add-debt.json</span><span class="err">”</span> <span class="p">{</span><span class="nv">body</span> <span class="ss">:body</span><span class="p">}</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">views/add-debt-json</span> <span class="nv">db</span> <span class="p">(</span><span class="nb">slurp </span><span class="nv">body</span><span class="p">))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">add-debt-json</span> <span class="p">[</span><span class="nv">db</span> <span class="nv">body</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">json/parse-string</span> <span class="nv">body</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="garden">Garden</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">require</span> <span class="err">‘</span><span class="p">[</span><span class="nv">garden.units</span> <span class="ss">:as</span> <span class="nv">u</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">px</span> <span class="nv">pt</span><span class="p">]])</span>
</span><span class='line'><span class="p">(</span><span class="nf">require</span> <span class="err">‘</span><span class="p">[</span><span class="nv">garden.core</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">css</span><span class="p">]])</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">def </span><span class="nv">default-color</span> <span class="err">“</span><span class="o">#</span><span class="nv">EFE</span><span class="err">”</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">[[</span><span class="ss">:body</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:background-color</span> <span class="nv">default-color</span><span class="p">}]</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">[</span><span class="ss">:.btn-primary&lt;/p&gt;</span>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">[</span><span class="err">:</span><span class="o">&amp;</span><span class="nv">amp</span><span class="c1">;:hover</span>
</span><span class='line'>   <span class="p">{</span><span class="ss">:border-color</span> <span class="err">“</span><span class="nv">black</span><span class="err">”</span><span class="p">}]]]</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">routes</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">GET</span> <span class="err">“</span><span class="nv">/&lt;em&gt;.css</span><span class="err">”</span> <span class="p">{</span> <span class="p">{</span><span class="nb">path </span><span class="ss">:&lt;/em&gt;</span><span class="p">}</span> <span class="ss">:route-params</span><span class="p">}</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">views/css-page-memoized</span> <span class="nv">path</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">css-page</span> <span class="p">[</span><span class="nv">path</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when-let </span><span class="p">[</span><span class="nv">garden-url</span> <span class="p">(</span><span class="nf">io/resource</span> <span class="p">(</span><span class="nb">str </span><span class="err">“</span><span class="nv">public/</span><span class="err">”</span> <span class="nb">path </span><span class="err">“</span><span class="nv">.garden</span><span class="err">”</span><span class="p">))]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">garden-data</span> <span class="p">(</span><span class="nb">load-file </span><span class="p">(</span><span class="nf">.getPath</span> <span class="nv">garden-url</span><span class="p">))]</span>
</span><span class='line'>      <span class="p">{</span><span class="ss">:status</span> <span class="mi">200</span>
</span><span class='line'>       <span class="ss">:headers</span> <span class="p">{</span><span class="err">“</span><span class="nv">Content-Type</span><span class="err">”</span> <span class="err">“</span><span class="nv">text/css</span><span class="err">”</span><span class="p">}</span>
</span><span class='line'>       <span class="ss">:body</span> <span class="p">(</span><span class="nf">css</span> <span class="nv">garden-data</span><span class="p">)})))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">def </span><span class="nv">css-page-memoized</span> <span class="p">(</span><span class="nf">memoize</span> <span class="nv">css-page</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="resources-5">Resources</h3>

<ul>
  <li><a href="https://github.com/noir-clojure/lib-noir">lib-noir</a> — a set of utilities and helpers for building ring apps.</li>
  <li><a href="http://www.luminusweb.net/">Luminus</a> — another Clojure web framework.</li>
  <li><a href="https://github.com/clojure/clojurescript">ClojureScript</a> — Clojure to JS compiler.</li>
  <li><a href="http://pedestal.io">Pedestal</a> — another framework.</li>
  <li><a href="http://clojure-liberator.github.io/liberator/">Liberator</a> — WebMachine in Clojure.</li>
</ul>

<h2 id="gerald-sussman--keynote">Gerald Sussman — Keynote</h2>

<h3 id="programming-for-the-expression-of-ideas">Programming for the Expression of Ideas</h3>

<ul>
  <li>Slides: <a href="https://github.com/strangeloop/lambdajam2013/blob/master/slides/Sussman-ExpressionOfIdeas.pdf">GitHub</a></li>
  <li>Video: <a href="http://www.infoq.com/presentations/Expression-of-Ideas">InfoQ</a></li>
</ul>

<p><blockquote><p>Gerald Sussman on stage and Joe Armstrong in the front row nodding along. #LambdaJam is a special place.</p><footer><strong>@bryan_hunter</strong> <cite><a href='https://twitter.com/bryan_hunter/statuses/354717953125650432'>twitter.com/bryan_hunter/&hellip;</a></cite></footer></blockquote></p>

<p><img class="center" src="http://d3j5vwomefv46c.cloudfront.net/photos/large/789035195.jpg"></p>

<p>Lagrange’s equations of motion in Leibniz notation (with type violation)</p>

<script type="math/tex; mode=display">
\frac{\mathrm d}{\mathrm d t} \left(\frac{\partial L}{\partial \dot{q}^i}\right) - \frac{\partial L}{\partial q^i} = 0
</script>

<p>Expanded form (correct but ugly)</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\frac{\mathrm d}{\mathrm d t} \left(\left.\frac{\partial L(t,q,\dot{q})}{\partial \dot{q}}\right|_{\begin{aligned}q &= w(t)\\ \dot{q} &= \frac{\mathrm d w(t)}{\mathrm d t}\end{aligned}}\right) - \left.\frac{\partial L(t,q,\dot{q})}{\partial q}\right|_{\begin{aligned}q &= w(t)\\ \dot{q} &= \frac{\mathrm d w(t)}{\mathrm d t}\end{aligned}} = 0
 %]]&gt;</script>

<p>Functional form (correct and beautiful)</p>

<script type="math/tex; mode=display">
D((\partial_2 L) \circ (\Gamma[w])) - (\partial_1 L) \circ (\Gamma[w]) = 0
</script>

<p>where</p>

<script type="math/tex; mode=display">
(Df)(t) = \left.\frac{\mathrm d}{\mathrm d x} f(x)\right|_{x=t}  \qquad  \Gamma[w](t) = (t, w(t), Dw(t))
</script>

<p>As Scheme code</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">((</span><span class="nf">Lagrange-equations</span> <span class="nv">Lagrangian</span><span class="p">)</span> <span class="nv">w</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nf">D</span> <span class="p">(</span><span class="nf">compose</span> <span class="p">((</span><span class="nf">partial</span> <span class="mi">2</span><span class="p">)</span> <span class="nv">Lagrangian</span><span class="p">)</span>
</span><span class='line'>                 <span class="p">(</span><span class="nf">Gamma</span> <span class="nv">w</span><span class="p">)))</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">compose</span> <span class="p">((</span><span class="nf">partial</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">Lagrangian</span><span class="p">)</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">Gamma</span> <span class="nv">w</span><span class="p">))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">define </span><span class="p">((</span><span class="nf">Gamma</span> <span class="nv">w</span><span class="p">)</span> <span class="nv">t</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">up</span> <span class="nv">t</span> <span class="p">(</span><span class="nf">w</span> <span class="nv">t</span><span class="p">)</span> <span class="p">((</span><span class="nf">D</span> <span class="nv">w</span><span class="p">)</span> <span class="nv">t</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We can even generate LaTeX from the Scheme code.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="nf">show-expression</span>
</span><span class='line'>  <span class="p">(((</span><span class="nf">Lagrange-equations</span> <span class="p">(</span><span class="nf">L-harmonic</span> <span class="err">‘</span><span class="nv">m</span> <span class="err">‘</span><span class="nv">k</span><span class="p">))</span>
</span><span class='line'>    <span class="nv">proposed-solution</span><span class="p">)</span>
</span><span class='line'>   <span class="err">‘</span><span class="nv">t</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The moral: originally, Lagrange’s equations had missing parameters and a type error. Programming them forced an elegant and <em>effective</em> statement.</p>

<p><img class="center" src="https://pbs.twimg.com/media/BOxIoM5CEAIpW0o.jpg"></p>

<h3 id="quotes-4">Quotes</h3>

<ul>
  <li>Computer revolution changed the way we think.</li>
  <li>The way we teach students is not the same way we do it ourselves.</li>
  <li>I’ve been doing it all my life. My real goal is to transform things that are hard to understand to the things that are easy to understand. Programming was one of the tools of doing that.</li>
  <li>Students have to learn simultaneously the language and the culture, as well as the content.</li>
  <li>I like to tell students what is going on.</li>
  <li>Idioms make reading hard.</li>
  <li>Leibniz notation for the derivatives happens to be a disaster.</li>
  <li>Let’s get to the General Relativity… I’ll be mercifully short.</li>
  <li>The point is, it makes it comprehensible what was badly expressed in the traditional form.</li>
  <li>I have no problem of enslaving electronic apparatus.</li>
</ul>

<h3 id="resources-6">Resources</h3>

<ul>
  <li>Michael Spivak — Calculus. [<a href="http://ia801606.us.archive.org/22/items/Calculus_643/Spivak-Calculus.pdf">pdf</a>]</li>
  <li>Gerald Jay Sussman, Jack Wisdom — Functional Differential Geometry. [<a href="http://mitpress.mit.edu/books/functional-differential-geometry">MIT</a>]</li>
  <li>Marvin Minsky — Why programming is a good medium for expressing poorly understood and sloppily-formulated ideas. [<a href="http://web.media.mit.edu/~minsky/papers/Why%20programming%20is--.html">html</a>]</li>
</ul>

<h2 id="erlang-cocktail">Erlang cocktail</h2>

<p>with
<a href="https://twitter.com/bryan_hunter">Bryan Hunter</a>,
<a href="https://twitter.com/joeerl">Joe Armstrong</a>, and
<a href="https://twitter.com/kscaldef">Kevin Scaldeferri</a></p>

<p><img class="center" src="https://pbs.twimg.com/media/BOx-YSyCQAAA_TQ.jpg"></p>

<p>Wonderful ending of the second day.</p>

<h2 id="dave-thomas--living-in-big-data-with-vector-functional-programming">Dave Thomas — Living in Big Data with Vector Functional Programming</h2>

<ul>
  <li>Slides: <a href="https://github.com/strangeloop/lambdajam2013/blob/master/slides/Thomas-LivingInBigDataWithVectorFunctionalProgramming.pdf">GitHub</a></li>
</ul>

<p><blockquote><p>This is the first time I’ve been in the audience of a talk on vector languages.</p><footer><strong>@kaleidic</strong> <cite><a href='https://twitter.com/kaleidic/statuses/354961117816176642'>twitter.com/kaleidic/statuses/&hellip;</a></cite></footer></blockquote></p>

<ul>
  <li>Extreme cases — that’s what is interesting.</li>
  <li>I don’t do Big Data, I don’t have a petabyte in my pocket.</li>
  <li>I’m an industrial language pimp.</li>
  <li>I’ve got 3 characters on the screen and I have no idea what they’re doing.</li>
  <li>What slows languages down is scalars and non-scalars, boxing and unboxing.</li>
  <li>How to learn an array language? Slowly.</li>
</ul>

<p><img class="center" src="https://pbs.twimg.com/media/BO0b6S-CMAI2CFd.jpg"></p>

<ul>
  <li>Pairing is a great way to learn new things.</li>
  <li>Most programs, by 2020, will be queries.</li>
  <li>There are five error messages, they are all irritating.</li>
  <li>WTF (what the function?) error message.</li>
  <li>All IDEs are bad. Intellij is the best of worst.</li>
</ul>

<h3 id="resources-7">Resources</h3>

<ul>
  <li>Emily Bache — An introduction to Array Languages. [<a href="http://coding-is-like-cooking.info/2013/09/an-introduction-to-array-languages/">blog</a>]</li>
  <li>Bryan Cantrilla — Conversation with Arthur Whitney. [<a href="http://queue.acm.org/detail.cfm?id=1531242">article</a>]</li>
</ul>

<h2 id="steve-vinoski--addressing-network-congestion-in-riak-clusters">Steve Vinoski — Addressing Network Congestion in Riak Clusters</h2>

<ul>
  <li>Slides: <a href="https://dl.dropboxusercontent.com/u/10363968/vinoski-addressing-network-congestion-in-riak.pdf">Dropbox</a></li>
  <li>
    <p>Video: <a href="http://www.youtube.com/watch?v=Y6PG6hkUHPM">YouTube</a></p>
  </li>
  <li>Riak — A distributed highly available eventually consistent highly scalable open source key-value database written primarily in Erlang, built for operational ease.</li>
  <li>Riak TCP traffic:
    <ol>
      <li>Client requests: made to any node in the ring</li>
      <li>Coordination: node receiving client request coordinates the operation across the owning replicas</li>
      <li>Gossip: Riak nodes share ring state via a gossip protocol</li>
      <li>Active Anti-Entropy: nodes actively verify and repair data consistency across the ring</li>
      <li>Erlang: distributed Erlang nodes form a full mesh and do periodic node availability checks</li>
      <li>Handoff</li>
    </ol>
  </li>
  <li>TCP incast.</li>
  <li>Low Extra Delay Background Transport (LEDBAT).</li>
  <li>Micro Transport Protocol (μTP, or uTP).</li>
</ul>

<h3 id="resources-8">Resources</h3>

<ul>
  <li>Amazon’s Dynamo Paper and <a href="http://docs.basho.com/riak/latest/theory/dynamo/">Riak</a>.</li>
  <li><a href="https://github.com/bittorrent/libutp">libutp</a> — The uTorrent Transport Protocol library.</li>
  <li><a href="https://github.com/basho-labs/gen_utp">gen_utp</a> — an API and driver for the uTP protocol.</li>
</ul>

<h2 id="mahesh-paolini-subramanya--finite-state-machines-why-the-fear">Mahesh Paolini-Subramanya — Finite State Machines. Why the fear?</h2>

<ul>
  <li>Slides: <a href="http://www.slideshare.net/dieswaytoofast/genfsm-the-erlang-behavior-that-gets-no-respect">Slideshare</a></li>
</ul>

<p><blockquote><p>Sitting behind @webyrd, @dfried00, Sussman, and @joeerl in @dieswaytoofast’s finite state machine talk.</p><footer><strong>@gazoombo</strong> <cite><a href='https://twitter.com/gazoombo/statuses/354991392247906305'>twitter.com/gazoombo/statuses/&hellip;</a></cite></footer></blockquote></p>

<p><img class="center" src="https://pbs.twimg.com/media/BO0uyloCAAAS7X4.jpg"></p>

<ul>
  <li>Write a project in C++ or Java and you’re creating work for 5 other devs. Write it in Erlang and you’re done.</li>
  <li>There is a special place in hell for the people who came up with the Oauth 2.0 spec.</li>
  <li>Everything is an FSM. Problem with actually modeling this is complexity of large FSMs. Answer is encapsulation.</li>
  <li>Design your system as a big FSM that is a collection of little FSMs. Only transition between them as needed.</li>
</ul>

<h2 id="sean-cribbs-chris-meiklejohn--functional-web-applications-with-webmachine">Sean Cribbs, Chris Meiklejohn — Functional Web Applications with Webmachine</h2>

<p>The keyword here is <em>Functional</em>.</p>

<ul>
  <li>Slides: <a href="https://github.com/strangeloop/lambdajam2013/blob/master/slides/CribbsMeiklejohn-Webmachine.pdf">GitHub</a></li>
  <li>Tutorial: <a href="https://github.com/cmeiklejohn/webmachine-tutorial">GitHub</a></li>
  <li>Webmachine <a href="https://github.com/basho/webmachine/wiki/Diagram">diagram</a></li>
</ul>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git@github.com:cmeiklejohn/webmachine-tutorial.git
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><img class="center" src="/images/posts/webmachine-diagram.png"></p>

<pre><code>git checkout hello-world
</code></pre>

<ul>
  <li>f(ReqData,State) -&gt; {RetV,ReqData,State}.</li>
  <li><code>iolist()</code></li>
</ul>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>src/tweeter_resource.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">init</span><span class="p">([])</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">[]}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">to_html</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="p">{[</span><span class="err">“&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">html</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">body</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">”</span><span class="p">,</span> <span class="nn">wrq</span><span class="p">:</span><span class="nf">get_req_header</span><span class="p">(</span><span class="err">“</span><span class="n">host</span><span class="err">”</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">),</span> <span class="err">“&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">/</span><span class="n">body</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">/</span><span class="n">html</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">”</span><span class="p">],</span>
</span><span class='line'>     <span class="nv">ReqData</span><span class="p">,</span>
</span><span class='line'>     <span class="nv">State</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Supervisor: resources, routes, dispatch</p>

<pre><code>git checkout -f load-tweets
</code></pre>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>src/tweeter_sup.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">init</span><span class="p">([])</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="err">…</span>
</span><span class='line'>    <span class="nv">Resources</span> <span class="o">=</span> <span class="p">[</span><span class="n">tweeter_wm_tweet_resource</span><span class="p">,</span> <span class="n">tweeter_wm_asset_resource</span><span class="p">],</span>
</span><span class='line'>    <span class="nv">Dispatch</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">flatten</span><span class="p">([</span><span class="nv">Module</span><span class="p">:</span><span class="nf">routes</span><span class="p">()</span> <span class="p">||</span> <span class="nv">Module</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="nv">Resources</span><span class="p">]),</span>
</span><span class='line'>    <span class="err">…</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>src/tweeter_wm_tweet_resource.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">routes</span><span class="p">()</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[{[</span><span class="err">“</span><span class="n">tweets</span><span class="err">”</span><span class="p">],</span> <span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="p">[]}].</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>src/tweeter_wm_asset_resource.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">routes</span><span class="p">()</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[{[</span><span class="err">””</span><span class="p">],</span> <span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="p">[]},</span> <span class="p">{[</span><span class="err">’</span><span class="o">*</span><span class="err">’</span><span class="p">],</span> <span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="p">[]}].</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Media Types</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>src/tweeter_wm_tweet_resource.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">content_types_provided</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="p">{[{</span><span class="err">“</span><span class="n">application</span><span class="o">/</span><span class="n">json</span><span class="err">”</span><span class="p">,</span> <span class="n">to_json</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span><span class="err">“</span><span class="n">application</span><span class="o">/</span><span class="n">x</span><span class="o">-</span><span class="n">erlang</span><span class="o">-</span><span class="n">binary</span><span class="err">”</span><span class="p">,</span> <span class="n">to_erlang</span><span class="p">}],</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">to_json</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">Tweets</span> <span class="o">=</span> <span class="p">[</span><span class="nv">Value</span> <span class="p">||</span> <span class="p">[{_</span><span class="nv">Key</span><span class="p">,</span> <span class="nv">Value</span><span class="p">}]</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="nn">ets</span><span class="p">:</span><span class="nf">match</span><span class="p">(</span><span class="n">tweets</span><span class="p">,</span> <span class="err">‘</span><span class="sc">$1</span><span class="err">’</span><span class="p">)],</span>
</span><span class='line'>    <span class="nv">Content</span> <span class="o">=</span> <span class="nn">mochijson2</span><span class="p">:</span><span class="nf">encode</span><span class="p">({</span><span class="n">struct</span><span class="p">,</span> <span class="p">[{</span><span class="n">tweets</span><span class="p">,</span> <span class="nv">Tweets</span><span class="p">}]}),</span>
</span><span class='line'>    <span class="p">{</span><span class="nv">Content</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">to_erlang</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">Tweets</span> <span class="o">=</span> <span class="p">[</span><span class="nv">Value</span> <span class="p">||</span> <span class="p">[{_</span><span class="nv">Key</span><span class="p">,</span> <span class="nv">Value</span><span class="p">}]</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="nn">ets</span><span class="p">:</span><span class="nf">match</span><span class="p">(</span><span class="n">tweets</span><span class="p">,</span> <span class="err">‘</span><span class="sc">$1</span><span class="err">’</span><span class="p">)],</span>
</span><span class='line'>    <span class="nv">Content</span> <span class="o">=</span> <span class="nb">term_to_binary</span><span class="p">(</span><span class="nv">Tweets</span><span class="p">),</span>
</span><span class='line'>    <span class="p">{</span><span class="nv">Content</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -i -H “Accept:application/x-erlang-binary” “http://localhost:8080/tweets”
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Vary: Accept
</span><span class='line'>Server: MochiWeb/1.1 WebMachine/1.10.0 (never breaks eye contact)
</span><span class='line'>Content-Type: application/x-erlang-binary&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>?llhdavatarmZhttps://si0.twimg.com/profile_images/2536088319/4sl2go65was3o0km520j_reasonably_small.jpeghdmessageCaremad.jlhdavatarm\https://si0.twimg.com/profile_images/3778090444/e4fde2cad4b921cd8c07fcecc0ff2fff_bigger.jpeghdmessagemRubby is over!jlhdavatarmZhttps://si0.twimg.com/profile_images/2536088319/4sl2go65was3o0km520j_reasonably_small.jpeghdmessagemYou boys having a taste?jj</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>resource_exists</code></p>

<pre><code>git checkout -f tweet-urls
</code></pre>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>src/tweeter_wm_tweet_resource.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">routes</span><span class="p">()</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[{[</span><span class="err">“</span><span class="n">tweets</span><span class="err">”</span><span class="p">,</span> <span class="n">tweet_id</span><span class="p">],</span> <span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="p">[]}].</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">tweet_id</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="n">time_from_timestamp</span><span class="p">(</span><span class="nn">wrq</span><span class="p">:</span><span class="nf">path_info</span><span class="p">(</span><span class="n">tweet_id</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">)).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">resource_exists</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">maybe_retrieve_tweet</span><span class="p">(</span><span class="nv">Context</span><span class="p">,</span> <span class="n">tweet_id</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">))</span> <span class="k">of</span>
</span><span class='line'>        <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nv">NewContext</span><span class="p">}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">NewContext</span><span class="p">};</span>
</span><span class='line'>        <span class="p">{</span><span class="n">false</span><span class="p">,</span> <span class="nv">Context</span><span class="p">}</span>   <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="p">{</span><span class="n">false</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">}</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl http://localhost:8080/tweets
</span><span class='line'>{“tweets”:[
</span><span class='line'>  {“avatar”:”https://si0.twimg.com/profile_images/2536088319/4sl2go65was3o0km520j_reasonably_small.jpeg”,”message”:”Caremad.”,”id”:”1376843311536798”},
</span><span class='line'>  {“avatar”:”https://si0.twimg.com/profile_images/3778090444/e4fde2cad4b921cd8c07fcecc0ff2fff_bigger.jpeg”,”message”:”Rubby is over!”,”id”:”1376843311536799”},
</span><span class='line'>  {“avatar”:”https://si0.twimg.com/profile_images/2536088319/4sl2go65was3o0km520j_reasonably_small.jpeg”,”message”:”You boys having a taste?”,”id”:”1376843311536800”}]}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -i http://localhost:8080/tweets/1376843311536798
</span><span class='line'>HTTP/1.1 200 OK&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>{“tweet”:{“avatar”:”https://si0.twimg.com/profile_images/2536088319/4sl2go65was3o0km520j_reasonably_small.jpeg”,”message”:”Caremad.”}}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -i http://localhost:8080/tweets/42
</span><span class='line'>HTTP/1.1 404 Object Not Found&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;html>&lt;head>&lt;title>404 Not Found&lt;/title>&lt;/head>&lt;body>&lt;h1>Not Found&lt;/h1>The requested document was not found on this server.&lt;p>&lt;hr />&lt;address>mochiweb+webmachine web server&lt;/address></span></code></pre></td></tr></table></div></figure></notextile></div>

`POST`, response header

    git checkout -f create-tweets

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>src/tweeter_wm_tweets_resource.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">allowed_methods</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="p">{[</span><span class="n">&#39;HEAD&#39;</span><span class="p">,</span> <span class="n">&#39;GET&#39;</span><span class="p">,</span> <span class="n">&#39;POST&#39;</span><span class="p">],</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">post_is_create</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">create_path</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">maybe_create_tweet</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>        <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nv">NewContext</span><span class="p">}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>            <span class="p">{</span><span class="nv">Id</span><span class="p">,</span> <span class="p">_}</span> <span class="o">=</span> <span class="nv">NewContext</span><span class="nl">#context.tweet</span><span class="p">,</span>
</span><span class='line'>            <span class="nv">Resource</span> <span class="o">=</span> <span class="s">&quot;/tweets/&quot;</span> <span class="o">++</span> <span class="nb">binary_to_list</span><span class="p">(</span><span class="n">time_to_timestamp</span><span class="p">(</span><span class="nv">Id</span><span class="p">)),</span>
</span><span class='line'>            <span class="nv">NewReqData</span> <span class="o">=</span> <span class="nn">wrq</span><span class="p">:</span><span class="nf">set_resp_header</span><span class="p">(</span><span class="s">&quot;Location&quot;</span><span class="p">,</span> <span class="nv">Resource</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">),</span>
</span><span class='line'>            <span class="p">{</span><span class="nv">Resource</span><span class="p">,</span> <span class="nv">NewReqData</span><span class="p">,</span> <span class="nv">NewContext</span><span class="p">};</span>
</span><span class='line'>        <span class="p">{</span><span class="n">false</span><span class="p">,</span> <span class="nv">Context</span><span class="p">}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>            <span class="p">{</span><span class="s">&quot;/users&quot;</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">}</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">content_types_accepted</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="p">{[{</span><span class="s">&quot;application/json&quot;</span><span class="p">,</span> <span class="n">from_json</span><span class="p">}],</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">from_json</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">maybe_create_tweet</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>        <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nv">NewContext</span><span class="p">}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>            <span class="p">{_,</span> <span class="nv">Tweet</span><span class="p">}</span> <span class="o">=</span> <span class="nv">NewContext</span><span class="nl">#context.tweet</span><span class="p">,</span>
</span><span class='line'>            <span class="nv">Response</span> <span class="o">=</span> <span class="nn">mochijson2</span><span class="p">:</span><span class="nf">encode</span><span class="p">({</span><span class="n">struct</span><span class="p">,</span> <span class="p">[{</span><span class="n">tweet</span><span class="p">,</span> <span class="nv">Tweet</span><span class="p">}]}),</span>
</span><span class='line'>            <span class="nv">NewReqData</span> <span class="o">=</span> <span class="nn">wrq</span><span class="p">:</span><span class="nf">set_resp_body</span><span class="p">(</span><span class="nv">Response</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">),</span>
</span><span class='line'>            <span class="p">{</span><span class="n">true</span><span class="p">,</span> <span class="nv">NewReqData</span><span class="p">,</span> <span class="nv">NewContext</span><span class="p">};</span>
</span><span class='line'>        <span class="p">{</span><span class="n">false</span><span class="p">,</span> <span class="nv">Context</span><span class="p">}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>            <span class="p">{</span> <span class="p">{</span><span class="n">halt</span><span class="p">,</span> <span class="mi">409</span><span class="p">},</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">}</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -i -X POST -H "Content-Type:application/json" \
</span><span class='line'>      http://localhost:8080/tweets --data @-
</span><span class='line'>{
</span><span class='line'>  "tweet":{
</span><span class='line'>    "message":"testing...",
</span><span class='line'>    "avatar":"https://si0.twimg.com/profile_images/3778090444/e4fde2cad4b921cd8c07fcecc0ff2fff_bigger.jpeg"
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>HTTP/1.1 201 Created
</span><span class='line'>Location: /tweets/1376847941255278
</span><span class='line'>Content-Type: application/json
</span><span class='line'>
</span><span class='line'>{"tweet":{"message":"testing...","avatar":"https://si0.twimg.com/profile_images/3778090444/e4fde2cad4b921cd8c07fcecc0ff2fff_bigger.jpeg"}}</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -i -X POST -H "Content-Type:application/xml" \
</span><span class='line'>      http://localhost:8080/tweets --data @-
</span><span class='line'>{
</span><span class='line'>  "tweet":{
</span><span class='line'>    "message":"testing...",
</span><span class='line'>    "avatar":"https://si0.twimg.com/profile_images/3778090444/e4fde2cad4b921cd8c07fcecc0ff2fff_bigger.jpeg"
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>HTTP/1.1 415 Unsupported Media Type
</span><span class='line'>Location: /tweets/1376848621307991
</span><span class='line'>Content-Type: text/html
</span><span class='line'>
</span><span class='line'>&lt;html>&lt;head>&lt;title>415 Unsupported Media Type&lt;/title>&lt;/head>&lt;body>&lt;h1>Unsupported Media Type&lt;/h1>Unsupported Media Type&lt;p>&lt;hr />&lt;address>mochiweb+webmachine web server&lt;/address></span></code></pre></td></tr></table></div></figure></notextile></div>

Note: `create_path` is called before `content_types_accepted`

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -i -X POST -H "Content-Type:application/xml" \
</span><span class='line'>      http://localhost:8080/tweets --data @-
</span><span class='line'>&lt;tweet>
</span><span class='line'>  &lt;message>testing...&lt;/message>
</span><span class='line'>  &lt;avatar>https://si0.twimg.com/profile_images/3778090444/e4fde2cad4b921cd8c07fcecc0ff2fff_bigger.jpeg&lt;/avatar>
</span><span class='line'>&lt;/tweet>
</span><span class='line'>HTTP/1.1 500 Internal Server Error
</span><span class='line'>Content-Type: text/html
</span><span class='line'>
</span><span class='line'>&lt;html>&lt;head>&lt;title>500 Internal Server Error&lt;/title>&lt;/head>&lt;body>&lt;h1>Internal Server Error&lt;/h1>The server encountered an error while processing this request:&lt;br />&lt;pre>{"create_path not a string",
</span><span class='line'> {error,
</span><span class='line'>     {...}}}&lt;/pre>&lt;p>&lt;hr />&lt;address>mochiweb+webmachine web server&lt;/address></span></code></pre></td></tr></table></div></figure></notextile></div>

ETags, caching, preconditions

    git checkout -f etag-tweets

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>src/tweeter_wm_tweets_resource.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">generate_etag</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="p">{_,</span> <span class="nv">NewContext</span><span class="p">}</span> <span class="o">=</span>  <span class="n">maybe_retrieve_tweets</span><span class="p">(</span><span class="nv">Context</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">ETag</span> <span class="o">=</span> <span class="nn">mochihex</span><span class="p">:</span><span class="nf">to_hex</span><span class="p">(</span><span class="nn">erlang</span><span class="p">:</span><span class="nb">phash2</span><span class="p">(</span><span class="nv">NewContext</span><span class="nl">#context.tweets</span><span class="p">)),</span>
</span><span class='line'>    <span class="p">{</span><span class="nv">ETag</span><span class="p">,</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">NewContext</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">last_modified</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">Id</span> <span class="o">=</span> <span class="nn">ets</span><span class="p">:</span><span class="nf">last</span><span class="p">(</span><span class="n">tweets</span><span class="p">),</span>
</span><span class='line'>    <span class="p">{</span><span class="nn">calendar</span><span class="p">:</span><span class="nf">now_to_datetime</span><span class="p">(</span><span class="nv">Id</span><span class="p">),</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -i http://localhost:8080/tweets
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Last-Modified: Sun, 18 Aug 2013 21:44:50 GMT
</span><span class='line'>ETag: "30008d7"
</span><span class='line'>
</span><span class='line'>{"tweets":[
</span><span class='line'>  {"avatar":"https://si0.twimg.com/profile_images/2536088319/4sl2go65was3o0km520j_reasonably_small.jpeg","message":"Caremad.","id":"1376860726482913"},
</span><span class='line'>  {"avatar":"https://si0.twimg.com/profile_images/3778090444/e4fde2cad4b921cd8c07fcecc0ff2fff_bigger.jpeg","message":"Rubby is over!","id":"1376860726482914"},
</span><span class='line'>  {"avatar":"https://si0.twimg.com/profile_images/2536088319/4sl2go65was3o0km520j_reasonably_small.jpeg","message":"You boys having a taste?","id":"1376860726482915"}]}</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -i -H 'If-None-Match:"30008d7"' http://localhost:8080/tweets
</span><span class='line'>HTTP/1.1 304 Not Modified
</span><span class='line'>ETag: "30008d7"</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -i -H 'If-Modified-Since:Sun, 18 Aug 2013 21:45:41 GMT' http://localhost:8080/tweets
</span><span class='line'>HTTP/1.1 304 Not Modified
</span><span class='line'>ETag: "30008d7"</span></code></pre></td></tr></table></div></figure></notextile></div>

Authorization, CSRF

    git checkout -f csrf

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>src/tweeter_wm_tweets_resource.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">forbidden</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="p">{</span><span class="nn">tweeter_security</span><span class="p">:</span><span class="nf">is_protected</span><span class="p">(</span><span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">),</span> <span class="nv">ReqData</span><span class="p">,</span> <span class="nv">Context</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

Visual debugger

    git checkout -f debugger

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>src/tweeter_wm_asset_resource.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">init</span><span class="p">([])</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="nn">wmtrace_resource</span><span class="p">:</span><span class="nf">add_dispatch_rule</span><span class="p">(</span><span class="s">&quot;wmtrace&quot;</span><span class="p">,</span> <span class="s">&quot;/tmp&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">{</span> <span class="p">{</span><span class="nb">trace</span><span class="p">,</span> <span class="s">&quot;/tmp&quot;</span><span class="p">},</span> <span class="nl">#context</span><span class="p">{}}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<img class="center" src="/images/posts/webmachine-debugger-1.png">

<img class="center" src="/images/posts/webmachine-debugger-2.png">

ErlyDTL, Dialyzer

### Resources

* Webmachine: [Request Data API](https://github.com/basho/webmachine/wiki/Request-Data-API)
* James Hague — A Ramble Through Erlang IO Lists. [[blog](http://prog21.dadgum.com/70.html)]
* Andrei Neculau — [http-decision-diagram](https://github.com/andreineculau/http-decision-diagram)


## David Nolen — Keynote

### Everything I Have Learned I Have Learned From Someone Else

* Slides: [GitHub](https://github.com/strangeloop/lambdajam2013/blob/master/slides/Nolen-EverythingIHaveLearned.pdf)
* Video: [InfoQ](http://www.infoq.com/presentations/learning-developer)

<blockquote><p>It is practically impossible to teach good programming to students that have had a prior exposure to BASIC: as potential programmers they are mentally mutilated beyond hope of regeneration.</p><footer><strong>Edsger Dijkstra</strong></footer></blockquote>

### Quotes

- We sick of the status quo, and there is a resurgence among engineers and excitement around new programming languages.
- In Clojure we can pattern match on persistent vectors and hashmaps.

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">x</span> <span class="nv">true</span>
</span><span class='line'>      <span class="nv">y</span> <span class="nv">true</span>
</span><span class='line'>      <span class="nv">z</span> <span class="nv">true</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">match</span> <span class="p">[</span><span class="nv">x</span> <span class="nv">y</span> <span class="nv">z</span><span class="p">]</span>
</span><span class='line'>    <span class="p">[</span><span class="nv">_</span> <span class="nv">false</span> <span class="nv">true</span><span class="p">]</span> <span class="mi">1</span>
</span><span class='line'>    <span class="p">[</span><span class="nv">false</span> <span class="nv">true</span> <span class="nv">_</span> <span class="p">]</span> <span class="mi">2</span>
</span><span class='line'>    <span class="p">[</span><span class="nv">_</span> <span class="nv">_</span> <span class="nv">false</span><span class="p">]</span> <span class="mi">3</span>
</span><span class='line'>    <span class="p">[</span><span class="nv">_</span> <span class="nv">_</span> <span class="nv">true</span><span class="p">]</span> <span class="mi">4</span>
</span><span class='line'>    <span class="ss">:else</span> <span class="mi">5</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">match</span> <span class="p">[</span><span class="nv">x</span><span class="p">]</span>
</span><span class='line'>  <span class="p">[{</span><span class="ss">:a</span> <span class="nv">_</span> <span class="ss">:b</span> <span class="mi">2</span><span class="p">}]</span> <span class="mi">1</span>
</span><span class='line'>  <span class="p">[{</span><span class="ss">:a</span> <span class="mi">1</span> <span class="ss">:b</span> <span class="mi">1</span><span class="p">}]</span> <span class="mi">2</span>
</span><span class='line'>  <span class="p">[{</span><span class="ss">:c</span> <span class="mi">3</span> <span class="ss">:d</span> <span class="nv">_</span> <span class="ss">:e</span> <span class="mi">4</span><span class="p">}]</span> <span class="mi">3</span>
</span><span class='line'>  <span class="ss">:else</span> <span class="mi">4</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

- The best way to predict the future is to read papers and *engineer* it.

### Papers

- Phil Bagwell — Ideal Hash Trees [[pdf](http://lampwww.epfl.ch/papers/idealhashtrees.pdf)]
- Phil Bagwell, Tiark Rompf — RRB-Trees: Efficient Immutable Vectors [[pdf](http://infoscience.epfl.ch/record/169879/files/RMTrees.pdf)]
- William E. Byrd — Relational Programming in miniKanren: Techniques, Applications, and Implementations [[pdf](https://scholarworks.iu.edu/dspace/bitstream/handle/2022/8777/Byrd_indiana_0093A_10344.pdf)]
- David C. Bender, Lindsey Kuper, William E. Byrd, Daniel P. Friedman — Efficient representations for triangular substitutions: A comparison in miniKanren [[pdf](http://www.cs.indiana.edu/~lkuper/papers/walk.pdf)]
- William A. Kornfeld — Equality for Prolog [[pdf](http://www.ijcai.org/Past%20Proceedings/IJCAI-83-VOL-1/PDF/120.pdf)]
- Philip Wadler, Stephen Blott — Ho to make *ad-hoc* polymorphism less *ad hoc* [[ps](http://homepages.inf.ed.ac.uk/wadler/papers/class/class.ps)]
- James Cheney, Christian Urban — Nominal Logic Programming [[pdf](http://arxiv.org/pdf/cs/0609062v2.pdf)]
- Alexey Radul, Gerald Jay Sussman — The Art of the Propagator [[pdf](http://web.mit.edu/~axch/www/art.pdf)]
- Craig Chambers, Weimin Chen — Efficient Multiple and Predicate Dispatching [[pdf](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.37.6735&amp;rep=rep1&amp;type=pdf)]
- Luc Maranget — Compiling Pattern Matching to good Decision Trees [[pdf](http://www.cs.tufts.edu/~nr/cs257/archive/luc-maranget/jun08.pdf)]
- Philip Wadler — Views: A way for pattern matching to cohabit with data abstraction [[ps](http://homepages.inf.ed.ac.uk/wadler/papers/view/view.ps)]
- Sam Tobin-Hochstadt — Extensible Pattern Matching in an Extensible Language [[pdf](http://arxiv.org/pdf/1106.2578v1.pdf)]
- Anurag Mendhekar, Gregor Kiczales, John Lamping — Compilation Strategies as Objects [[pdf](http://cl-projects.org/project.OLD/suave/darcs/_darcs/current/experimental/suavescript-old/research/kiczales-compilation-strategies-as-objects.pdf)]
- Emden R. Gansner, John H. Reppy — A Multi-threaded Higher-order User Interface Toolkit [[ps](http://www.cs.tufts.edu/~nr/cs257/archive/john-reppy/exene.ps)]
- Conal Elliott, Paul Hudak — Functional Reactive Animation [[pdf](http://conal.net/papers/icfp97/icfp97.pdf)]

### Books

- Chris Okasaki — Purely Functional Data Structures [[pdf](http://www.cs.cmu.edu/~rwh/theses/okasaki.pdf)]
- Daniel P. Friedman, William E. Byrd, Oleg Kiselyov — The Reasoned Schemer [[MIT](http://mitpress.mit.edu/books/reasoned-schemer)]
- Peter Van Roy, Seif Haridi — Concepts, Techniques, and Models of Computer Programming [[MIT](http://mitpress.mit.edu/books/concepts-techniques-and-models-computer-programming)]
- Gregor Kiczales, Jim des Rivieres, Daniel G. Bobrow — The Art of the Metaobject Protocol [[MIT](http://mitpress.mit.edu/books/art-metaobject-protocol)]
- C. A. R. Hoare — Communicating Sequential Processes [[pdf](http://www.usingcsp.com/cspbook.pdf)]

### Resources

- core.logic — [GitHub](https://github.com/clojure/core.logic)
- core.match — [GitHub](https://github.com/clojure/core.match)


## Bonus 1: Joe Armstrong @ CEUG — 26 Years With Erlang

Video: [YouTube](http://www.youtube.com/watch?v=HCwRGHj5jOE)

- If you are an academic you think to develop a programming language in three or four years because that's the time it takes to get your PhD, then you finish your PhD and the whole world will use it. It doesn't work like that. You got to do quite few other things.
- That's what we did in 1985, before the Internet: we were creating programming languages.
- Version 1.03 lost in the mists of time.
- When Prolog program goes wrong, it says *No*.

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="s-Atom">uni</span> <span class="s-Atom">---&amp;gt</span><span class="p">;</span>
</span><span class='line'>    <span class="nf">case</span><span class="p">(</span><span class="s-Atom">wait</span><span class="p">,[</span>
</span><span class='line'>        <span class="s-Atom">n</span> <span class="s-Atom">=&amp;gt</span><span class="p">;</span> <span class="p">[</span><span class="s-Atom">term</span><span class="p">,</span><span class="s-Atom">exit</span><span class="p">],</span>
</span><span class='line'>        <span class="s-Atom">h</span> <span class="s-Atom">=&amp;gt</span><span class="p">;</span> <span class="p">[</span><span class="s-Atom">hold</span><span class="p">,</span>
</span><span class='line'>              <span class="nf">case</span><span class="p">(</span><span class="s-Atom">new_call</span><span class="p">,[</span>
</span><span class='line'>                  <span class="s-Atom">connected</span> <span class="s-Atom">=&amp;gt</span><span class="p">;</span> <span class="s-Atom">multi</span><span class="p">,</span>
</span><span class='line'>                  <span class="s-Atom">n</span> <span class="s-Atom">=&amp;gt</span><span class="p">;</span> <span class="nf">case</span><span class="p">(</span><span class="s-Atom">gone_away</span><span class="p">,[</span>
</span><span class='line'>                           <span class="s-Atom">yes</span> <span class="s-Atom">=&amp;gt</span><span class="p">;</span> <span class="s-Atom">exit</span><span class="p">,</span>
</span><span class='line'>                           <span class="s-Atom">no</span> <span class="s-Atom">=&amp;gt</span><span class="p">;</span> <span class="p">[</span><span class="s-Atom">conv</span><span class="p">,</span><span class="s-Atom">uni</span><span class="p">]</span>
</span><span class='line'>                       <span class="p">]),</span>
</span><span class='line'>                  <span class="s-Atom">h</span> <span class="s-Atom">=&amp;gt</span><span class="p">;</span> <span class="p">[</span><span class="s-Atom">conv</span><span class="p">,</span><span class="s-Atom">uni</span><span class="p">]</span>
</span><span class='line'>              <span class="p">])</span>
</span><span class='line'>             <span class="p">]</span>
</span><span class='line'>    <span class="p">]).</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

- This diagrams are nested state machines.
- You do not program the abnormal things, you do not make any decisions about how to program the stuff which is outside of the specification. What you do is you crash your program and let somebody else to resolve the problem and put back all the invariants.
- It took four days to re-write the whole Erlang.
- That's the entire documentation of Erlang 1.05

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>h                help
</span><span class='line'>reset            reset all queues
</span><span class='line'>reset_erlang     kill all erlang definitions
</span><span class='line'>load(F)          load erlang file &lt;f>.erlang
</span><span class='line'>load             load the same file as before
</span><span class='line'>load(?)          what is the current load file
</span><span class='line'>what_erlang      list all loaded erlang files
</span><span class='line'>go               reduce the main queue to zero
</span><span class='line'>send(A,B,C)      perform a send to the main queue
</span><span class='line'>send(A,B)        perform a send to the main queue
</span><span class='line'>cq               see queue — print main queue
</span><span class='line'>wait_queue(N)    print wait_queue(N)
</span><span class='line'>cf               see frozen — print all frozen states
</span><span class='line'>cqns             see all equations
</span><span class='line'>cqns(N)          see equation(N)
</span><span class='line'>start(Mod,Goal)  starts Goal in Mod
</span><span class='line'>top              top loop run system
</span><span class='line'>q                quit top loop
</span><span class='line'>open_dots(Node)  opens Node
</span><span class='line'>talk(N)          N=1 verbose, =0 silent
</span><span class='line'>peep(M)          set peeping point on M
</span><span class='line'>no_peep(M)       unset peeping point on M
</span><span class='line'>vsn(X)           erlang vsn number is X</span></code></pre></td></tr></table></div></figure></notextile></div>

- Don't speculate about performance. Write the program, run it, and measure it.
- Robert collected the whole pile of papers on how abstract machines worked. I borrowed this file and took it for a weekend, and I read every single paper from beginning to end… and I understood nothing. Then Monday morning I suddenly woke up and I understood it.
- There is no garbage collection in atom table.
- The original Erlang movie was made for ISS 90. And we had script!
- Robert wanted to buy a train set on the money from the lab.
- "Amazing but true! Blindingly fast!"
- 8 Dec 1995, AXE-N cancelled. 1996 AXD 301 started.
- AXD 301 could switch up to 160Gb/sec. For countries of the size of Sweeden you can only sell one. I think British Telecom bought 3 or something. It was great technical success but it didn't earn any money.
- Banning things has interesting consequences. Erlang got open sourced. Four days after Erlang was banned all people who developed it left Ericsson and started their own company Bluetail.
- Now DNA of Erlang is spreading through various companies.


## Bonus 2: Joe Armstrong @ CEUG — Sherlock's Last Case

Video: [YouTube](http://www.youtube.com/watch?v=hh4tmDB9iQI)

- "How can you be more efficient programmer? By not programming."
- When you program for 20–30 years, the "make it work" challenge is gone away. It's more challenging to think what problem you are going to solve.
- The problem I've been thinking for the last five years is how to organize the data, how to organize ideas.
- Value store is a key-value store without keys. How to get the data out of this database?
- Sherlock's Problem: There is $X$, and there are thousands of $Y_i$. Which $Y_i$ is the nearest to $X$?
- The categorization problem is extremly difficult. That's why object-oriented programming is stupid.
- Concurrency oriented programming is a physical modelling.
- Measures of similarity. TF*IDF.
- Naive Bayesian

$$
P(A|B) P(B) = P(B|A) P(A)
$$

- Normalized compression difference: If $A$ and $B$ are similar then size(compress($A$++$B$) will be wee bit larger than size(compress($A$)). It's insensitive to choice of compression algorithm.
- Idea for IDE: Social programming network. It shows all the people working on the code similar to what you are typing.

### Q &amp; A

- Macros and include files should be removed from the language.
- Maybe atoms should be garbage collected.
- The biggest problem in building technical systems is 'connecting thing together' problem.
- If I need to write a language, it wouldn't be programming language. I would write a protocol description language.
- Principle of observational equivalence.
- [UBF](http://ubf.github.io/ubf/).
- "There are languages that people bitch about, and there are languages that nobody's using." — Bjarne Stroustrup
- Scale change. Petabyte change is enormously interesting.
- We need to make cryptography available to all the people.
- Take the data out of the cloud, and put it into your home clouds.
- NSA will kill Google and Facebook.


## Epilogue

<blockquote><p>As I leave #LambdaJam I'm particularly happy at my improved sense of being able to think about OO stuff in FP terms. That may serve me well.</p><footer><strong>@kaleidic</strong> <cite><a href='https://twitter.com/kaleidic/statuses/355327906764959744'>twitter.com/kaleidic/statuses/&hellip;</a></cite></footer></blockquote>

<blockquote><p>Life returning to normal. Have been suffering for PCSD (Post Conference Stress Disorder) — too many ideas in too short time + Jet Lag</p><footer><strong>@joeerl</strong> <cite><a href='https://twitter.com/joeerl/statuses/356672073675972609'>twitter.com/joeerl/statuses/&hellip;</a></cite></footer></blockquote>

</f></p></body></html></p></body></html></p></body></html>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PyCon Canada 2012]]></title>
    <link href="http://blog.ndpar.com/2012/11/12/pycon-canada-2012/"/>
    <updated>2012-11-12T15:40:01-05:00</updated>
    <id>http://blog.ndpar.com/2012/11/12/pycon-canada-2012</id>
    <content type="html"><![CDATA[<p>This weekend I attended <a href="http://pycon.ca/">PyCon Canada</a>, the first conference in Canada dedicated to Python ecosystem. As you might find from my blog, I’m not a Python guy. I’ve been using Python mostly as a scripting language. I went to this conference for fresh ideas, or, as Michael Feathers said, for cross-polination from Python community. This blog post is not a detailed review of the conference — I just want to share my impression in general.</p>

<h2 id="organization">Organization</h2>

<p>Considering how little time the organizers had for preparing this conference, 5 months I believe, they did amazing job. They invited great speakers. They kept people well informed using mailing list and Twitter. The official web site was clear and easy to navigate. The location was good. The food was decent. The only complaint I had is about the temperature in the rooms on the first day. It was so freezing cold inside that I had to wear my jacket all the time. But on the second day the problem was fixed.</p>

<h2 id="keynotes">Keynotes</h2>

<p>Keynotes were absolutely fantastic. There were three of them. Jessica McKellar was talking about Python community. How they foster it, how they attract new people to programming in general and to Python in particular. She shared her experience from organizing Boston Python user group, the biggest Python user group in the world. The takeaway from her talk: Python community is big, welcoming, and well supported by Python Foundation.</p>

<p>Second keynote was Michael Feathers’ <em>Why You Should(n’t) be Using a Functional Programming Language Instead</em>. The main idea of his talk is: Don’t lock yourself inside one language. Go outside of your community to see what other languages exist out there, how they solved the problems. Study those languages, learn their idioms and techniques, and then go back to your language and start using the ideas you’ve learnt. I completely agree with that, and that’s why I went to this conference in the first place. He gave bunch of examples of functional programming in Haskell. Then he showed his Ruby code written in functional style, where you could see the influence of Haskell. I liked his presentation because he verbalized the ideas I myself have been thinking about for a while. When I started programming in Groovy my Groovy code was basically a Java code without semicolons. Now my Java code looks more like Groovy.</p>

<p>The closing keynote was by Fernando Pérez, the scientist from University of California, Berkeley, and the creator of IPython. The talk, titled <a href="https://speakerdeck.com/fperez/science-and-python-a-interactively-biased-retrospective-of-a-mostly-successful-decade"><em>Science and Python</em></a>,  was really mind blowing. When I was a student I did all my computations using mainly Fortran and some proprietary software I don’t even remember the name of. Later, I played with Mathematica and Octave a little bit. But I didn’t know that you can do very sophisticated scientific calculations using Python. Fernando gave some examples from neuroscience, astrophysics and biology, and it’s really impressive. The discovery of Supernova PTF11kyl is especially astonishing. From now on, if I need to do some math, I’ll be using Python libraries; no more proprietary expensive software. Another theme of the presentation was IPython. Initially I thought it’s just a shell on top of the standard Python, but it’s actually the whole ecosystem. I cannot explain in a few words how amazing it is. Just google for “ipython notebook” or read Fernando’s <a href="http://blog.fperez.org/2012/09/blogging-with-ipython-notebook.html">blog</a>.</p>

<h2 id="talks">Talks</h2>

<p>As it happens on every conference, there were some great talks and some lousy talks, interesting talks and boring talks, geeky talks and academic talks. It’s all normal and fine. The good thing about this conference though is that signal-noise ratio was pretty high; congratulations to the organizers for choosing talks. Another thing I like is the diversity of formats. There were 45-min presentation, 20-min talks, 5-min lightning talks, 90-min tutorials, and 3-hour workshop (there are also two full day coding sessions but I’m not attending them). This is a really good approach. Switching between different formats during the day helps your brain functioning more productive, in my opinion.</p>

<h2 id="pleasant-discoveries">Pleasant discoveries</h2>

<p>I found many projects presented at the conference are using RabbitMQ, and that’s great. I wish in Java world people would use AMQP more frequently instead of blindly choosing JMS for every new project.</p>

<p>Many people are using MongoDB properly. Nowadays NoSQL is a very popular buzzword, and many projects are using various NoSQL databases just because it’s cool, even if it makes no sense for the project at all. It was nice to see that there are developers out there who do their homework and adopt NoSQL because it fits their domain.</p>

<h2 id="unpleasant-discoveries">Unpleasant discoveries</h2>

<p>There seems to be a trend in Python community to despise Java. I actually see this trend in many communities outside of Java, so it’s not Python specific, but at this conference I’ve heard too many jokes about Java so it’s not funny anymore, especially hearing them from the people who don’t write a line of code in Java.</p>

<p>Another thing surprised me is the fanatic admiration of Mercurial and hate of Git from some Python programmers. I know lots of people who hate Git, mainly because they are confused and scared by Git. But dislike it for the reason not being written in Python is something new to me.</p>

<h2 id="problems-in-python">Problems in Python</h2>

<p>Package and distribution management in Python is in pretty bad shape. Every person I talked to admitted that it’s complete mess at the moment. I myself feel that pain every time I need to install a new library. Which tool should I use: pip, easy_install, pysetup? Some libraries installed using those tools don’t work, or work partially. Many programmers use rpm or deb packages instead of Python tools, because OS packages usually work. I came to the same conclusion on my Mac OS. The only flawlessly working Python environment I have is that installed via mac ports. In Java we don’t have those problems. Maven solved it once and for all long time ago. Now every JVM language benefits from it. Python community should clean up this mess and standardize their tools. I was told that with introducing PyPi and PEPs the situation is getting better, well, let’s see if it resolves all the issues.</p>

<h2 id="what-ive-learnt">What I’ve learnt</h2>

<p>Here is the list of things I found pretty interesting, in no particular order.</p>

<h3 id="python-libraries-to-use">Python libraries to use</h3>

<p>numpy, matplotlib, pandas, scipy, sympy, quantities, collections. Thanks to the people who told me about these libraries.</p>

<h3 id="cool-python-stuff">Cool Python stuff</h3>

<p>RunSnakeRun — GUI for Python profiler. Check out the screenshots on their <a href="http://www.vrplumber.com/programming/runsnakerun/">web site</a>. I wish Java profilers could draw such nice graphs.</p>

<p><a href="http://bpython-interpreter.org/screenshots/">bpython</a> — Python REPL for geeks written in <a href="http://excess.org/urwid/examples.html">Urwid</a>. Thanks to Ian Ward for the really nice <a href="http://pyvideo.org/video/1568/console-applications-with-urwid">presentation</a>.</p>

<h3 id="interesting-ideas">Interesting ideas</h3>

<p>Print log statements in JSON format so that you can analyze them using powerful tools. You can also save logs in MongoDB, either offline or asynchronously, and do statistic analysis using aggregation framework.</p>

<p>Write stored procedures in PostgreSQL in Python (and some other languages). They look much better in Python than plSQL.</p>

<h2 id="things-to-learna-namelearnnbspa">Things to learn<a name="learn"> </a></h2>

<p>Here are some technology and tools that have a great potential, in my opinion, and worthy of learning: ZeroMQ, IPython, OpenStack. Those were mentioned multiple times during the conference, and I need to check them out in more details.</p>

<h2 id="summary">Summary</h2>

<p>The conference was great. I’m glad I attended it. The organizers did a great job. The conference was beneficial not only to Python community but to Toronto programming community in general. Thanks to all who made it happen.</p>

<p>P.S. Videos from the conference are available <a href="http://pyvideo.org/category/25/pycon-ca-2012">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SpringOne2GX 2010]]></title>
    <link href="http://blog.ndpar.com/2010/10/31/springone2gx-2010/"/>
    <updated>2010-10-31T08:00:00-04:00</updated>
    <id>http://blog.ndpar.com/2010/10/31/springone2gx-2010</id>
    <content type="html"><![CDATA[<p>Last week I attended SpringOne2GX conference in Chicago, the main event in Spring/Groovy/Grails community. Here I want to post my brief review of this conference.</p>

<h3 id="first-impressions">First impressions</h3>

<p>The hotel (Westin Lombard) was nice and clean. Internet: there were 2 wireless networks and one cable — everything was free and worked pretty well, signal was good in almost all rooms. The conference reception was well organized — every participant received bunch of souvenirs and special edition of NFJS magazine. I saw hundreds of smiling and happy people of different ages and different outfits. Most of them with Macs. Most of them know each other. The food was fantastic, especially dinner with wine and beer.</p>

<h2 id="day-1">Day 1</h2>

<p>The first day was mostly introduction and orientation. There was only one talk on the schedule.</p>

<h3 id="rod-johnson--keynote-videohttpwwwinfoqcompresentationsspringone-2gx-2010-keynote">Rod Johnson — Keynote (<a href="http://www.infoq.com/presentations/SpringOne-2GX-2010-Keynote">video</a>)</h3>

<p>I thought Spring was initially created 7 years ago but the oldest class in the source tree is dated by January 17, 2001, so Spring is actually almost 10 years old. Because of the anniversary the main theme of the presentation was: <em>Where Spring goes in the next decade</em>.</p>

<p>Since the core framework is well crafted already, the focus will be on the integration and making Spring portfolio as a platform for applications. There are three key values in Spring — <em>portability</em>, <em>productivity</em>, and <em>innovation</em> — and the platform will be built along those dimensions.</p>

<h4 id="portability">Portability</h4>

<p>In the past SpringSource made a good job by providing a framework that makes Java applications easily portable across different application servers. The goal for the next decade is to expand the same portability to the cloud — Google AppEngine, vFabric, vmforce, etc.</p>

<h4 id="productivity">Productivity</h4>

<p>As we all know the ultimate reason of the Spring existence is to make the life of application developer easier, our work is more productive. The framework hides the low-level boilerplate, and provides well defined abstractions. In the next year there will be several features added to the Spring portfolio. Rod mentioned some of them:</p>

<ul>
  <li>Seamless GWT integration</li>
  <li>Database reverse engineering with roundtripping support in Spring Roo 1.1. You will be able to generate the domain object tree based on your database schema, and it will be updated every time you change the database.</li>
  <li>Spring Payment Services project with Visa integration.</li>
</ul>

<p>Another aspect of productivity is a tool suite, where Spring provides STS. Rod invited Christian Dupuis on the stage, where he demoed how to developed Grails applications in STS. If you are a Grails developer you should definitely take a look at the latest version of STS — it will increase your productivity significantly.</p>

<h4 id="innovation">Innovation</h4>

<p>There will be several new projects released in the Spring portfolio soon:</p>

<ul>
  <li>Spring Social — application abstraction for social networks.</li>
  <li>Spring Mobile — platform for multi-device applications.</li>
  <li>Spring-AMQP — API for integration with RabbitMQ.</li>
  <li>Spring Data — API to work with NoSQL databases, in particular Neo4J support in Spring Roo.</li>
</ul>

<p>Keith Donald demoed <a href="http://greenhouse.springsource.org">GreenHouse</a> project and corresponding <a href="http://itunes.apple.com/us/app/greenhouse/id395862873">iPhone app</a>. This is a reference implementation of Spring Mobile and Spring Social, and this app was really really useful during the conference when I needed to check the schedule and find the room.</p>

<p>At the end of the presentation Rod introduced, and Mik Kersten demoed, the next big thing — <em>Code2Cloud</em>. It’s basically a tool that allows you to keep and manage your entire development environment in the cloud: the running app, the source code, the issue tracker, and the build server. Everything is in the cloud and configured by mouse click. It looks cool, and it definitely will be a buzz word in the next year, but I’m not sure if many people will use it. We’ll see.</p>

<h2 id="day-2">Day 2</h2>

<p>I’m going to write only about technical sessions I attended.</p>

<h3 id="juumlrgen-houmlller--whats-new-in-spring-framework-31-videohttpwwwinfoqcompresentationsspring-30-31-32">Jürgen Höller — What’s new in Spring Framework 3.1? (<a href="http://www.infoq.com/presentations/Spring-3.0-3.1-3.2">video</a>)</h3>

<p>That was one of the best talks of this conference: technical, right to the point, with well-wrtten slides, and personal charm of the presenter. Despite the number 3.1 in the title, Jürgen actually covered three versions of Spring framework: 3.0, 3.1, and 3.2. I’m going to briefly mention the interesting features, and if you want more details you can check the excellent on-line documentation.</p>

<h4 id="spring-30">Spring 3.0</h4>

<ul>
  <li>
    <p>Custom annotations. You can create your own annotation by combining multiple existing annotations in one group. Spring automatically detects your annotation during the application context startup, and no special configuration is required. This is a very handy feature, especially when you copy-paste the same annotation group over and over again.</p>
  </li>
  <li>
    <p>Configuration classes and annotated factory methods. If you annotate a method with @Bean annotation Spring framework will make the output of the method a Spring bean. There are some other annotations supported, e.g. @Lazy.</p>
  </li>
  <li>
    <p>Standardized annotations. Spring now supports JSR-330 @Inject, JSR-250 @ManagedBean, and EJB 3.x @TransactionAnnotation.</p>
  </li>
  <li>
    <p>EL++. Expression language can be used now in bean definitions inside appcontext XML, and also in component annotations. Very powerful feature.</p>
  </li>
  <li>
    <p>REST support. Spring provides RestTemplate for client code, @PathVariable annotation, and special view resolvers on the server side. It’s very interesting topic — check the documentation for details.</p>
  </li>
  <li>
    <p>Declarative model validation. You can specify data constraints right in your code by using annotations — very similar to what you have in GORM.</p>
  </li>
  <li>
    <p>Improved scheduling. New namespace, and @Scheduled and @Async annotations makes your appcontext smaller and more readable.</p>
  </li>
</ul>

<p>If you follow Spring releases, you probably use some or most of these features already. Now let’s see what Spring 3.1 brings to us.</p>

<h4 id="spring-31">Spring 3.1</h4>

<ul>
  <li>
    <p>Environment profiles for beans. Similar to Maven profiles but works in runtime. The idea here is to create a single deployment unit for all environments and enable certain Spring beans for specific environment. I can’t wait to try this feature in our enterprise project.</p>
  </li>
  <li>
    <p>Cache abstraction. After 5 years of hibernation this feature is finally implemented. Spring provides an API to work with distributed cache, in particular in cloud environments. There will be adapters for most popular cache implementations, such as EhCache, GemFire, Coherence.</p>
  </li>
  <li>
    <p>Conversation management, or how Jürgen calls it HttpSession++. It’s basically an extension of HttpSession shared across multiple browsers and window tabs. Looks very interesting.</p>
  </li>
  <li>
    <p>Enhanced Groovy support.</p>
  </li>
  <li>
    <p><code>c:</code> namespace, which is a shortcut for <code>&lt;constructor-arg&gt;</code>, analogous to <code>p:</code> namespace for properties. Small feature that makes your appcontext consistent and more readable.</p>
  </li>
</ul>

<h4 id="spring-32">Spring 3.2</h4>

<p>Java SE 7 support, JDBC 4.1, support for fork-join framework, general focus on concurrent programming.</p>

<h3 id="jeff-brown--gorm-inside-and-out">Jeff Brown — GORM inside and out</h3>

<p>This talk was also good. I worked a bit with GORM before, and had an idea how it’s implemented, but it was useful to hear more details from one of its developers.</p>

<p>Jeff started with the background of GORM, the complexity of Hibernate and JPA, and how GORM solves this problem following convention-over-configuration and sensible defaults strategies. He showed how to model the domain objects, what happens behind the scene when you link objects together, how to specify uni- and bi-directional relationships, and how to change default collection implementation in case of one-to-many relationship.</p>

<p>During the presentation he was switching back and forth between sides and terminal, so it was easy to follow and understand the evolution of the sample application. He explained how to introduce various constraints into the model and how Grails would validate them. One of the interesting features I didn’t know about was how to test internationalized error messages. You don’t need to change your locale for that, simply add <code>lang=your_language</code> parameter to the URL, and Grails will switch to that language for all subsequent requests. Pretty handy.</p>

<p>He concluded the talk by showing how dynamic finders are implemented in GORM using Groovy metaprogramming feature. Interesting part here is that you can implement similar things in your Groovy code using the same technique, basically having custom mini-GORM in your Groovy project!</p>

<h3 id="venkat-subramaniam--improving-your-groovy-code-quality">Venkat Subramaniam — Improving your Groovy code quality</h3>

<p>The title of this presentation was little bit misleading for me. I expected Venkat to show some Groovy specific mistakes and how to avoid them. Instead, he was talking about the errors that in most cases are equally applied to any programming language. He mentioned various code smells and explained how to fix them. If you are interested, you can download the slides from Venkat’s <a href="http://www.agiledeveloper.com/presentations/improving_your_groovy_code_quality.zip">web site</a>.</p>

<p>He also gave an advise how to maintain the high code quality:</p>

<ul>
  <li>Have a respectable colleague review your code.</li>
  <li>Use code analysis tools like CodeNarc and Sonar Groovy plugin.</li>
</ul>

<p>One of the topics he covered was the usage of the <code>return</code> keyword in Groovy. That was interesting. Compare the following two functions, guess what they return, and check your answer in the console</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="nf">func1</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="mi">5</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">22</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="nf">func2</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="mi">5</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>        <span class="mi">22</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="paul-king-guillaume-laforge--groovydsls-from-beginner-to-expert-videohttpwwwinfoqcompresentationsgroovy-dsls">Paul King, Guillaume Laforge — Groovy.DSLs (from: beginner, to: expert) (<a href="http://www.infoq.com/presentations/Groovy-DSLs">video</a>)</h3>

<p>This would be very nice presentation if the speakers didn’t try to cover too much. This talk could be easily split into two: one is an overview of Groovy language and another one is DSL. Unfortunately they spent lot of time on theoretical DSL part and Groovy overview, so the practical DSL part was too short from my perspective. The good thing though is that I have slides now, so I can dig deeper into this subject at my spare time.</p>

<p>In the second part of the talk Paul and Guillaume explained which features of Groovy language make it so simple to create DSLs. Here are some of them:</p>

<ul>
  <li>Static imports and import aliases.</li>
  <li>Simplified collection syntax.</li>
  <li>Small or no language noise.</li>
  <li>Aggregating multiple method calls using ‘with’ construct.</li>
  <li>Closures.</li>
  <li>Operator overloading.</li>
  <li>Metaprogramming.</li>
</ul>

<p>In the last part speakers talked about different patterns and techniques of DSL implementations. They provided a comprehensive list of books you might want to read if you are interested in building DSLs.</p>

<h3 id="adrian-colyer--technical-keynote-videohttpwwwinfoqcompresentationsspring-2010-technology">Adrian Colyer — Technical keynote (<a href="http://www.infoq.com/presentations/Spring-2010-Technology">video</a>)</h3>

<p>Adrian’s talk was mostly a reiteration of Rod’s keynote from the previous day with some technical details. He mentioned Spring Payment and Spring Data projects, bean profiles and cache support in the Spring core. He showed Spring portability in action by providing links to Spring applications deployed on <a href="http://springtravelsql.appspot.com/login">Google AppEngine</a> and <a href="http://booking-mvc.internal.vmforce.com/spring/intro">vmForce</a>.</p>

<p>Another interesting part was 20 minutes dedicated to RabbitMQ and Spring-AMQP. He even mentioned <em>Spring-Erlang</em> project which is supposed to be a convenient abstraction on top of standard Jinterface library.</p>

<p>As a continuation of innovation theme Graeme Rocher demoed GORM support for NoSQL databases. That was cool. He simply uninstalled Hibernate plugin and installed Redis plugin, without touching data model. Everything worked perfect. Right now Spring works with Redis and GemFire, but soon they are going to add support for CouchDB, Cassandra, Riak, Neo4j, and MongoDB. Another interesting thing Graeme showed was <em>grails-console</em>. It’s a pretty nice tool, you should check it out. It allows you to interact with the Grails data storage using GORM features. Very handy.</p>

<p>Another co-presenter was Keith Donald who demoed Spring Social and Spring Mobile. He explained how OAuth works, and how interoperability with social networks was implemented in GreenHouse.</p>

<p>The keynote was concluded by Jon Travis who demoed <em>SpringInsight</em>.</p>

<h2 id="day-3">Day 3</h2>

<h3 id="venkat-subramaniam--functional-programming-in-groovy">Venkat Subramaniam — Functional programming in Groovy</h3>

<p>That was an excellent talk and nice start of the new conference day. Venkat explained main concepts and values of functional programming, and illustrated the theory with comprehensible examples.</p>

<p>He compared imperative and functional style of programming by showing how to implement for-loop using <code>inject</code> function in Groovy. I think it was one of the best explanations of functional folding I’ve ever heard. He also demonstrated map and filter operations using <code>collect</code> and <code>findAll</code> methods.</p>

<p>He clarified the difference between function value and closure, and between iterative procedure and iterative process. He gave an example on how to pass closure as a parameter to simulate function object in Groovy. He also showed how to replace tail-recursion, which Groovy doesn’t support, with <code>inject</code> method call.</p>

<p>The presentation was concluded with an example of how to use functional techniques to build DSLs in Groovy.</p>

<h3 id="matthias-radestock-mark-pollack-mark-fisher--rabbitmq-and-spring-amqp-videohttpwwwinfoqcompresentationsspring-amqp">Matthias Radestock, Mark Pollack, Mark Fisher — RabbitMQ and Spring-AMQP (<a href="http://www.infoq.com/presentations/Spring-AMQP">video</a>)</h3>

<p>If you read my blog, you know that RabbitMQ is one of my latest interests. I decided to go to this talk just to see how the creators would present their projects. It turned out to be a nice introduction to both RabbitMQ and <a href="http://www.springsource.org/spring-amqp">Spring-AMQP</a>. They explained main concepts of AMQP and how it is different from JMS. Here I want to give you some ideas which were not obvious for me when I started working with RabbitMQ.</p>

<ul>
  <li>Messaging is all about decoupling, and AMQP is much more flexible than JMS in terms of publisher-consumer decomposition.</li>
  <li>All resources are dynamically created and destroyed by clients — the static pre-configuration is optional.</li>
  <li>Exchanges are stateless, they don’t keep messages, they only copy and dispatch them. Queues hold the messages and deliver one message to a single client. They neither do routing nor message copying.</li>
  <li>Queue never receives the same message twice.</li>
  <li>If the message doesn’t match routing key it’s dropped.</li>
  <li>Because of the open protocol, you can use all available TCP tools to monitor your message traffic.</li>
</ul>

<p>Besides AMQP implementation RabbitMQ also provides some other useful features like custom exchanges, exchange-to-exchange routing, different protocol adaptors, etc. Spring, as usual, gives you a consistent API on top of the RabbitMQ client which hides all low-level boilerplate and makes your application code more readable.</p>

<h3 id="craig-walls--developing-social-ready-web-applications-videohttpwwwinfoqcompresentationsdeveloping-social-ready-web-apps">Craig Walls — Developing social-ready web applications (<a href="http://www.infoq.com/presentations/Developing-Social-Ready-Web-Apps">video</a>)</h3>

<p>This presentation was about integrating your Java code with different social networks. There are three types of such integration: widgets, embedded code, REST API. Craig briefly explained first two, and then dived into REST.</p>

<p>All popular social networks provide REST API which allows you to communicate with them. For simple operations, like search, you can just use standard Spring RestTemplate class to retrieve the data. Try for example the following URLs:</p>

<ul>
  <li><a href="http://api.twitter.com/1/friends/ids.xml?screen_name=ndpar">http://api.twitter.com/1/friends/ids.xml?screen_name=ndpar</a></li>
  <li><a href="http://search.twitter.com/search.json?q=s2gx">http://search.twitter.com/search.json?q=s2gx</a></li>
  <li><a href="https://graph.facebook.com/ndpar">https://graph.facebook.com/ndpar</a></li>
</ul>

<p>This basic approach fails though if you try to post a new message, because you have to be authorized for update operations. That’s where OAuth comes in. The idea behind OAuth is pretty simple: instead of sharing your user-password with different clients, it uses generated tokens. This model is more flexible because if you want to revoke the permission from particular client you don’t need to change your password and notify rest of the clients — you just remove that client’s token from the list of authorized clients and that’s it. The only problem with OAuth and social networks is that they support different versions of OAuth. This problem is solved by Spring Social project.</p>

<p>Spring Social offers consistent template-based API across different social providers. It basically gives you an OAuth aware RestTemplate, so you can do something like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">TwitterTemplate</span> <span class="n">twitter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TwitterTemplate</span><span class="o">(</span><span class="n">API_KEY</span><span class="o">,</span> <span class="n">API_SECRET</span><span class="o">,</span> <span class="n">ACCESS_TOKEN</span><span class="o">,</span> <span class="n">ACCESS_TOKEN_SECRET</span><span class="o">);</span>
</span><span class='line'><span class="n">twitter</span><span class="o">.</span><span class="na">updateStatus</span><span class="o">(</span><span class="err">“</span><span class="n">Hello</span> <span class="err">#</span><span class="n">s2gx</span> <span class="o">!</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'><span class="n">twitter</span><span class="o">.</span><span class="na">retweet</span><span class="o">(</span><span class="mi">26887414177L</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If you are in a social network business, definitely take a look at <a href="http://www.springsource.org/spring-social">Spring Social</a>.</p>

<h3 id="mark-pollack-chris-richardson--using-spring-with-non-relational-databases-videohttpwwwinfoqcompresentationsusing-spring-with-nosql-databases">Mark Pollack, Chris Richardson — Using Spring with non-relational databases (<a href="http://www.infoq.com/presentations/Using-Spring-with-NoSQL-Databases">video</a>)</h3>

<p>Relational databases are great, right? They’ve been with us for ages. Everybody knows how to work with them, how to build SQL statements. Every language provides ODBC library. There are bunch of frameworks that make developer’s life easier. So why is so much buzz around NoSQL?</p>

<p>Mark and Chris started their talk highlighting some problems that exist in relational database world:</p>

<ul>
  <li>Object-relational impedance mismatch. Complicated mapping of rich domain model to relational schema. Relational schema rigidity.</li>
  <li>Extremely difficult/impossible to scale write operations.</li>
  <li>Suboptimal performance in some cases.</li>
</ul>

<p>All these issues are addressed in NoSQL databases. Although keep in mind that it’s not coming for free — you have to trade off ACID semantics, transactions and some other features of RDBMS. But if scalability is more important for you than consistency then NoSQL is your way to go.</p>

<p>There are tons of NoSQL databases available for you, but they all can be split into 4 categories based on their data model:</p>

<ul>
  <li>Key-Value: Amazon Dynamo, Redis, Riak, Voldemort.</li>
  <li>Column: Google Bigtable, HBase, Cassandra.</li>
  <li>Document: CouchDB, MongoDB.</li>
  <li>Graph: Neo4j, Sones, InfiniteGraph.</li>
</ul>

<p>Mark and Chris talked about each type, what their typical use cases are, and how their APIs look like. They showed examples for Redis, Cassandra, MongoDB, CouchDB and Neo4j. Then they introduced <a href="http://www.springsource.org/spring-data">Spring Data</a> project which, as everything from SpringSource, simplifies the application development and hides low-level code. Right now they support most of the popular NoSQL databases, and they plan to add more in the future.</p>

<p>The project is in active development phase, and the new contributors are welcome. So if it sounds interesting for you, go and check it out.</p>

<h2 id="day-4">Day 4</h2>

<h3 id="hans-dockter--gradle--a-better-way-to-build">Hans Dockter — Gradle — a better way to build</h3>

<p>I never played with Gradle, so I was very curious to see how it looks like. According to Hans, who is the creator of this tool, Gradle is a general purpose build system with Groovy DSL interface. It’s written in Java and provides build-in support for Java, Groovy, Scala, web and OSGi projects. It’s a build language, so you can extend it for your own purposes if needed.</p>

<p>If you compare it with Ant, Gradle is definitely much better because it’s more compact and flexible. It offers dependency resolution with integration with Maven and Ivy repositories. It also has some advanced features like incremental builds for custom tasks and parallel testing.</p>

<p>The only problem I had with this presentation was that Hans kept comparing Gradle with Maven. In my opinion they are not comparable. They have different philosophy if you want. All Maven “constraints” are imposed by design, so it makes no sense to blame Maven for them. I think Ant-Gradle comparison is more appropriate and that’s what Hans should have emphasized.</p>

<p>Other than that the session was pretty informative, and I have a better picture of Gradle now.</p>

<h3 id="brian-sletten--groovy--the-semantic-web">Brian Sletten — Groovy + The Semantic Web</h3>

<p>I had no idea what Semantic Web was. I saw this term first time on the conference schedule, so I decided to go to this talk just to educate myself. I cannot even briefly describe all the discoveries I made during this presentation because I still feel little bit overwhelmed. I just want to provide some links from Brian’s slides that can guide you if you want to learn this concept.</p>

<ul>
  <li><a href="http://en.wikipedia.org/wiki/Semantic_Web">Semantic Web</a> — article from wikipedia.</li>
  <li>Formal W3C specs: <a href="http://www.w3.org/RDF/">RDF</a>, <a href="http://www.w3.org/TR/rdfa-syntax/">RDFa</a>, <a href="http://www.w3.org/2004/02/skos/">SKOS</a>, <a href="http://www.w3.org/TR/rdf-sparql-query/">SPARQL</a>, <a href="http://www.w3.org/TR/owl2-overview/">OWL</a>.</li>
  <li>SPARQL <a href="http://librdf.org/query">demo</a>.</li>
  <li><a href="http://www.w3.org/2007/08/pyRdfa">RDFa distiller and parser</a>. Try to feed Brian’s test page URL (http://bosatsu.net/nfjs/test.html) to the distiller and see what it returns.</li>
  <li><a href="http://opengraphprotocol.org">OG</a> — open graph protocol.</li>
  <li><a href="http://jena.sourceforge.net">Jena</a> — Java API to work with Semantic Web.</li>
  <li><a href="http://github.com/shellac/java-rdfa">Java-RDFa</a> parser.</li>
  <li><a href="http://clarkparsia.com/pellet/">Pellet</a> — Java API for OWL.</li>
</ul>

<h3 id="conclusion">Conclusion</h3>

<p>Whew! This happened to be longer review than I planned initially. If you are still with me, congratulations!</p>

<p>There were much more presentations at this conference but because of the tight schedule I had to sacrifice 80% of them. My overall impression from this conference is very positive. If you are a Spring/Groovy/Grails developer I encourage you to go to this event next year. The biggest benefit of it: <em>You start seeing the Spring as a universe</em>, not as a bunch of separate projects. You cannot get this feeling from the documentation, even if it’s perfect as the Spring one.</p>
]]></content>
  </entry>
  
</feed>
