<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Erlang | Side Notes]]></title>
  <link href="http://blog.ndpar.com/categories/erlang/atom.xml" rel="self"/>
  <link href="http://blog.ndpar.com/"/>
  <updated>2013-08-13T22:45:33-04:00</updated>
  <id>http://blog.ndpar.com/</id>
  <author>
    <name><![CDATA[Andrey Paramonov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sleeping Barber in Erlang]]></title>
    <link href="http://blog.ndpar.com/2013/06/11/sleeping-barber-in-erlang/"/>
    <updated>2013-06-11T20:43:00-04:00</updated>
    <id>http://blog.ndpar.com/2013/06/11/sleeping-barber-in-erlang</id>
    <content type="html"><![CDATA[<p>After working on <a href="http://en.wikipedia.org/wiki/Sleeping_barber_problem"><em>Sleeping Barber</em></a> problem at <a href="http://www.meetup.com/Toronto-Coding-Dojo/events/120577762/">Coding Dojo</a> I decided to implement it in Erlang. Because Erlang is the perfect language for these sorts of problems, many people have alredy solved it in many different ways. I found at least three groups of solutions: 1) direct implementation using message passing between processes, 2) OTP solution using <em>gen_server</em>, and 3) something resembling object-oriented approach.</p>

<p>Strangely enough, I didn’t see any solution based on <a href="https://en.wikipedia.org/wiki/Finite-state_machine">FSM</a>. That is odd because this is the first thing coming to my mind when I hear this problem. To fill the gap, I’m going to solve it using <em>gen_fsm</em>, which is a standard OTP behaviour for FSM.</p>

<!-- more -->

<h2 id="overview-of-genfsm">Overview of gen_fsm</h2>

<p>In essence gen_fsm behaviour is built the same way as a <a href="/2009/11/12/state-machine-in-erlang/">naïve</a> implementation of FSM. It just hides the low-level code that deals with messages and provides integration with OTP framework. An implementation of gen_fsm behaviour consists of three parts</p>

<ul>
  <li>A <em>client API</em> that calls gen_fsm public interface</li>
  <li>gen_fsm <em>callbacks</em> required by OTP</li>
  <li>State <em>transition</em> functions</li>
</ul>

<p>We’ll see examples of all of them in a minute, but first</p>

<h2 id="dialogue">Dialogue</h2>

<p><em>Barber shop. The Barber is sleeping in the chair. Customer I comes in.</em></p>

<p><em>Customer I.</em> Good morning.<br />
<em>Barber.</em> Good morning. Please take a seat.</p>

<p><em>Barber starts shaving Customer I. Customer II comes in.</em></p>

<p><em>Customer II.</em> Good morning.<br />
<em>Barber.</em> I’m busy. You have to wait.<br />
<em>Customer II.</em> OK.</p>

<p><em>Customer II goes to waiting room. The same happens with Customers III and IV. Customer V comes in.</em></p>

<p><em>Customer V.</em> Good morning.<br />
<em>Barber.</em> Sorry Customer V. Not today.<br />
<em>Customer V.</em> Maybe tomorrow.</p>

<p><em>Customer V exits the shop. Meantime Barber finished Customer I’s haircut.</em></p>

<p><em>Barber.</em> Do you like your haircut?<br />
<em>Customer I.</em> Thank you.<br />
<em>Barber (looking at Customer II).</em> Next please.</p>

<p><em>The same happens with Customer II, III and IV. After that Barber takes the chair and sleeps.</em></p>

<h2 id="modules">Modules</h2>

<p>From this dialogue we can see we just need to implement two modules: <em>barber</em> and <em>customer</em>.
I’m not going to show all the functions here in this article, only those that are interesting from gen_fsm perspective.</p>

<p>Let’s start with <em>customer</em> because it’s simpler.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>customer.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">customer</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">behaviour</span><span class="p">(</span><span class="n">gen_fsm</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% API</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">sit_down</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">done</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">wait</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">sorry</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% Callback functions</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">init</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">handle_event</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span> <span class="n">handle_sync_event</span><span class="o">/</span><span class="mi">4</span><span class="p">,</span> <span class="n">handle_info</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span>
</span><span class='line'>         <span class="n">terminate</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span> <span class="n">code_change</span><span class="o">/</span><span class="mi">4</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% FSM states</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">waiting</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">served</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%%====================================================================</span>
</span><span class='line'><span class="c">%% API</span>
</span><span class='line'><span class="c">%%====================================================================&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">start</span><span class="p">()</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="nv">Pid</span><span class="p">}</span> <span class="o">=</span> <span class="nn">gen_fsm</span><span class="p">:</span><span class="nf">start</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="p">[],</span> <span class="p">[]),</span>
</span><span class='line'>    <span class="nv">Pid</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">sit_down</span><span class="p">(</span><span class="nv">Customer</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="nn">gen_fsm</span><span class="p">:</span><span class="nf">send_event</span><span class="p">(</span><span class="nv">Customer</span><span class="p">,</span> <span class="n">sit_down</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">done</span><span class="p">(</span><span class="nv">Customer</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="nn">gen_fsm</span><span class="p">:</span><span class="nf">send_event</span><span class="p">(</span><span class="nv">Customer</span><span class="p">,</span> <span class="nb">exit</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">wait</span><span class="p">(</span><span class="nv">Customer</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="nn">gen_fsm</span><span class="p">:</span><span class="nf">send_event</span><span class="p">(</span><span class="nv">Customer</span><span class="p">,</span> <span class="n">wait</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">sorry</span><span class="p">(</span><span class="nv">Customer</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="nn">gen_fsm</span><span class="p">:</span><span class="nf">send_event</span><span class="p">(</span><span class="nv">Customer</span><span class="p">,</span> <span class="nb">exit</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%%====================================================================</span>
</span><span class='line'><span class="c">%% gen_fsm callbacks (empty functions are omitted)</span>
</span><span class='line'><span class="c">%%====================================================================&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">init</span><span class="p">([])</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="err">“</span><span class="nv">Good</span> <span class="n">morning</span><span class="p">.</span><span class="err">”</span><span class="p">),</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="n">waiting</span><span class="p">,</span> <span class="n">unow</span><span class="p">()}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%%====================================================================</span>
</span><span class='line'><span class="c">%% FSM states and transitions</span>
</span><span class='line'><span class="c">%%====================================================================&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">waiting</span><span class="p">(</span><span class="n">sit_down</span><span class="p">,</span> <span class="nv">WaitStart</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="err">“</span><span class="nv">I</span><span class="err">’</span><span class="n">ve</span> <span class="n">been</span> <span class="n">waiting</span> <span class="n">for</span> <span class="err">~</span><span class="n">p</span> <span class="n">sec</span><span class="p">.</span><span class="err">”</span><span class="p">,</span> <span class="p">[</span><span class="n">duration</span><span class="p">(</span><span class="nv">WaitStart</span><span class="p">)]),</span>
</span><span class='line'>    <span class="p">{</span><span class="n">next_state</span><span class="p">,</span> <span class="n">served</span><span class="p">,</span> <span class="n">unow</span><span class="p">()};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">waiting</span><span class="p">(</span><span class="n">wait</span><span class="p">,</span> <span class="nv">StateData</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="err">“</span><span class="nv">OK</span><span class="p">.</span><span class="err">”</span><span class="p">),</span>
</span><span class='line'>    <span class="p">{</span><span class="n">next_state</span><span class="p">,</span> <span class="n">waiting</span><span class="p">,</span> <span class="nv">StateData</span><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">waiting</span><span class="p">(</span><span class="nb">exit</span><span class="p">,</span> <span class="p">_</span><span class="nv">StateData</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="err">“</span><span class="nv">Maybe</span> <span class="n">tomorrow</span><span class="p">.</span><span class="err">”</span><span class="p">),</span>
</span><span class='line'>    <span class="p">{</span><span class="n">stop</span><span class="p">,</span> <span class="n">normal</span><span class="p">,</span> <span class="n">undefined</span><span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">served</span><span class="p">(</span><span class="nb">exit</span><span class="p">,</span> <span class="nv">ServiceStart</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="err">“</span><span class="nv">Thank</span> <span class="n">you</span><span class="p">.</span> <span class="nv">The</span> <span class="n">haircut</span> <span class="n">took</span> <span class="err">~</span><span class="n">p</span> <span class="n">sec</span><span class="p">.</span><span class="err">”</span><span class="p">,</span> <span class="p">[</span><span class="n">duration</span><span class="p">(</span><span class="nv">ServiceStart</span><span class="p">)]),</span>
</span><span class='line'>    <span class="p">{</span><span class="n">stop</span><span class="p">,</span> <span class="n">normal</span><span class="p">,</span> <span class="n">undefined</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><em>barber</em> module is little bit more complicated, because it not only calls customer’s API, it also sends events to itself.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>barber.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">barber</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">behaviour</span><span class="p">(</span><span class="n">gen_fsm</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% API</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start_link</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">new_customer</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% Callback functions</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">init</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">handle_event</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span> <span class="n">handle_sync_event</span><span class="o">/</span><span class="mi">4</span><span class="p">,</span> <span class="n">handle_info</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span>
</span><span class='line'>         <span class="n">terminate</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span> <span class="n">code_change</span><span class="o">/</span><span class="mi">4</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%% FSM states</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">busy</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">sleep</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">define</span><span class="p">(</span><span class="nv">SERVER</span><span class="p">,</span> <span class="o">?</span><span class="nv">MODULE</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">HAIRCUT_TIME</span><span class="p">,</span> <span class="mi">5000</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">ROOM_SIZE</span><span class="p">,</span> <span class="mi">3</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;-</span><span class="n">record</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="p">{</span><span class="n">chair</span><span class="p">,</span> <span class="n">room</span> <span class="o">=</span> <span class="p">[]}).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%%====================================================================</span>
</span><span class='line'><span class="c">%% API</span>
</span><span class='line'><span class="c">%%====================================================================&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">start_link</span><span class="p">()</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="nn">gen_fsm</span><span class="p">:</span><span class="nf">start_link</span><span class="p">({</span><span class="n">local</span><span class="p">,</span> <span class="o">?</span><span class="nv">SERVER</span><span class="p">},</span> <span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="p">[],</span> <span class="p">[]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">new_customer</span><span class="p">(</span><span class="nv">Customer</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="nn">gen_fsm</span><span class="p">:</span><span class="nf">send_event</span><span class="p">(</span><span class="o">?</span><span class="nv">SERVER</span><span class="p">,</span> <span class="p">{</span><span class="n">new</span><span class="p">,</span> <span class="nv">Customer</span><span class="p">}).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%%====================================================================</span>
</span><span class='line'><span class="c">%% gen_fsm callbacks (empty functions are omitted)</span>
</span><span class='line'><span class="c">%%====================================================================&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">init</span><span class="p">([])</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="err">“</span><span class="nv">Shop</span> <span class="n">is</span> <span class="n">open</span><span class="p">.</span> <span class="n">zzzzZ</span><span class="err">”</span><span class="p">),</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="n">sleep</span><span class="p">,</span> <span class="nl">#state</span><span class="p">{}}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">handle_info</span><span class="p">(</span><span class="n">finish</span><span class="p">,</span> <span class="n">busy</span><span class="p">,</span> <span class="nl">#state</span><span class="p">{</span><span class="n">chair</span> <span class="o">=</span> <span class="nv">Customer</span><span class="p">,</span> <span class="n">room</span> <span class="o">=</span> <span class="nv">Room</span><span class="p">})</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="err">“</span><span class="nv">Do</span> <span class="n">you</span> <span class="n">like</span> <span class="n">your</span> <span class="n">haircut</span> <span class="err">~</span><span class="n">p</span><span class="o">?</span><span class="err">”</span><span class="p">,</span> <span class="p">[</span><span class="nv">Customer</span><span class="p">]),</span>
</span><span class='line'>    <span class="nn">customer</span><span class="p">:</span><span class="nf">done</span><span class="p">(</span><span class="nv">Customer</span><span class="p">),</span>
</span><span class='line'>    <span class="k">case</span> <span class="nv">Room</span> <span class="k">of</span>
</span><span class='line'>        <span class="p">[</span><span class="nv">C</span> <span class="p">|</span> <span class="nv">Rest</span><span class="p">]</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>            <span class="n">log</span><span class="p">(</span><span class="err">“</span><span class="nv">Next</span> <span class="n">please</span> <span class="err">~</span><span class="n">p</span><span class="p">.</span><span class="err">”</span><span class="p">,</span> <span class="p">[</span><span class="nv">C</span><span class="p">]),</span>
</span><span class='line'>            <span class="n">serving</span><span class="p">(</span><span class="nv">C</span><span class="p">),</span>
</span><span class='line'>            <span class="nv">NewStateData</span> <span class="o">=</span> <span class="nl">#state</span><span class="p">{</span><span class="n">chair</span> <span class="o">=</span> <span class="nv">C</span><span class="p">,</span> <span class="n">room</span> <span class="o">=</span> <span class="nv">Rest</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="n">next_state</span><span class="p">,</span> <span class="n">busy</span><span class="p">,</span> <span class="nv">NewStateData</span><span class="p">};</span>
</span><span class='line'>        <span class="p">[]</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>            <span class="n">log</span><span class="p">(</span><span class="err">“</span><span class="nv">Time</span> <span class="n">for</span> <span class="n">nap</span><span class="p">.</span> <span class="n">zzzzZ</span><span class="p">.</span><span class="err">”</span><span class="p">),</span>
</span><span class='line'>            <span class="p">{</span><span class="n">next_state</span><span class="p">,</span> <span class="n">sleep</span><span class="p">,</span> <span class="nl">#state</span><span class="p">{}}</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">serving</span><span class="p">(</span><span class="nv">Customer</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="nn">customer</span><span class="p">:</span><span class="nf">sit_down</span><span class="p">(</span><span class="nv">Customer</span><span class="p">),</span>
</span><span class='line'>    <span class="nn">timer</span><span class="p">:</span><span class="nb">send_after</span><span class="p">(</span><span class="o">?</span><span class="nv">HAIRCUT_TIME</span><span class="p">,</span> <span class="n">finish</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c">%%====================================================================</span>
</span><span class='line'><span class="c">%% FSM states and transitions</span>
</span><span class='line'><span class="c">%%====================================================================&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">sleep</span><span class="p">({</span><span class="n">new</span><span class="p">,</span> <span class="nv">Customer</span><span class="p">},</span> <span class="nv">StateData</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="err">“</span><span class="nv">Good</span> <span class="n">morning</span> <span class="err">~</span><span class="n">p</span><span class="p">.</span> <span class="nv">Please</span> <span class="n">take</span> <span class="n">a</span> <span class="n">seat</span><span class="p">.</span><span class="err">”</span><span class="p">,</span> <span class="p">[</span><span class="nv">Customer</span><span class="p">]),</span>
</span><span class='line'>    <span class="n">serving</span><span class="p">(</span><span class="nv">Customer</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">NewStateData</span> <span class="o">=</span> <span class="nv">StateData</span><span class="nl">#state</span><span class="p">{</span><span class="n">chair</span> <span class="o">=</span> <span class="nv">Customer</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="n">next_state</span><span class="p">,</span> <span class="n">busy</span><span class="p">,</span> <span class="nv">NewStateData</span><span class="p">}.</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">busy</span><span class="p">({</span><span class="n">new</span><span class="p">,</span> <span class="nv">Customer</span><span class="p">},</span> <span class="nl">#state</span><span class="p">{</span><span class="n">room</span> <span class="o">=</span> <span class="nv">Room</span><span class="p">}</span> <span class="o">=</span> <span class="nv">StateData</span><span class="p">)</span>
</span><span class='line'>  <span class="k">when</span> <span class="nb">length</span><span class="p">(</span><span class="nv">Room</span><span class="p">)</span> <span class="o">==</span> <span class="o">?</span><span class="nv">ROOM_SIZE</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="err">“</span><span class="nv">Sorry</span> <span class="err">~</span><span class="n">p</span><span class="p">.</span> <span class="nv">Not</span> <span class="n">today</span><span class="p">.</span><span class="err">”</span><span class="p">,</span> <span class="p">[</span><span class="nv">Customer</span><span class="p">]),</span>
</span><span class='line'>    <span class="nn">customer</span><span class="p">:</span><span class="nf">sorry</span><span class="p">(</span><span class="nv">Customer</span><span class="p">),</span>
</span><span class='line'>    <span class="p">{</span><span class="n">next_state</span><span class="p">,</span> <span class="n">busy</span><span class="p">,</span> <span class="nv">StateData</span><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">busy</span><span class="p">({</span><span class="n">new</span><span class="p">,</span> <span class="nv">Customer</span><span class="p">},</span> <span class="nl">#state</span><span class="p">{</span><span class="n">room</span> <span class="o">=</span> <span class="nv">Room</span><span class="p">}</span> <span class="o">=</span> <span class="nv">StateData</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="n">log</span><span class="p">(</span><span class="err">“</span><span class="nv">I</span><span class="err">’</span><span class="n">m</span> <span class="n">busy</span><span class="p">.</span> <span class="nv">You</span> <span class="n">have</span> <span class="n">to</span> <span class="n">wait</span><span class="p">.</span><span class="err">”</span><span class="p">),</span>
</span><span class='line'>    <span class="nn">customer</span><span class="p">:</span><span class="nf">wait</span><span class="p">(</span><span class="nv">Customer</span><span class="p">),</span>
</span><span class='line'>    <span class="nv">NewStateData</span> <span class="o">=</span> <span class="nv">StateData</span><span class="nl">#state</span><span class="p">{</span><span class="n">room</span> <span class="o">=</span> <span class="nv">Room</span> <span class="o">++</span> <span class="p">[</span><span class="nv">Customer</span><span class="p">]},</span>
</span><span class='line'>    <span class="p">{</span><span class="n">next_state</span><span class="p">,</span> <span class="n">busy</span><span class="p">,</span> <span class="nv">NewStateData</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To reproduce the dialogue above we evaluate the following expressions in the REPL</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nn">barber</span><span class="p">:</span><span class="nf">start_link</span><span class="p">().</span>
</span><span class='line'><span class="nn">barber</span><span class="p">:</span><span class="nf">new_customer</span><span class="p">(</span><span class="nn">customer</span><span class="p">:</span><span class="nf">start</span><span class="p">()).</span>
</span><span class='line'><span class="nn">barber</span><span class="p">:</span><span class="nf">new_customer</span><span class="p">(</span><span class="nn">customer</span><span class="p">:</span><span class="nf">start</span><span class="p">()).</span>
</span><span class='line'><span class="nn">barber</span><span class="p">:</span><span class="nf">new_customer</span><span class="p">(</span><span class="nn">customer</span><span class="p">:</span><span class="nf">start</span><span class="p">()).</span>
</span><span class='line'><span class="nn">barber</span><span class="p">:</span><span class="nf">new_customer</span><span class="p">(</span><span class="nn">customer</span><span class="p">:</span><span class="nf">start</span><span class="p">()).</span>
</span><span class='line'><span class="nn">barber</span><span class="p">:</span><span class="nf">new_customer</span><span class="p">(</span><span class="nn">customer</span><span class="p">:</span><span class="nf">start</span><span class="p">()).</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="resources">Resources</h3>

<ul>
  <li><a href="https://github.com/ndpar/erlang/tree/master/barber">Source code</a> for this article.</li>
  <li><a href="http://ascii.io/a/3613">Screencast</a> reproducing the dialogue.</li>
  <li><a href="http://www.erlang.org/doc/man/gen_fsm.html">gen_fsm</a> documentation.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Joe Armstrong at MostlyErlang]]></title>
    <link href="http://blog.ndpar.com/2013/05/21/joe-armstrong-mostlyerlang/"/>
    <updated>2013-05-21T15:13:01-04:00</updated>
    <id>http://blog.ndpar.com/2013/05/21/joe-armstrong-mostlyerlang</id>
    <content type="html"><![CDATA[<p>The main guest at today’s <a href="http://mostlyerlang.wordpress.com/2013/05/21/43/">MostlyErlang</a> podcast is Joe Armstrong, the co-inventor of Erlang, a wise man, and a brilliant speaker. I listened to the podcast few times, and every time enjoyed it. I highly recommend it to all programmers regardless whether they are using Erlang or not.</p>

<p>While we are waiting for the oficial transcript, this post provides some highlights. I put here the quotes I found particularly interesting or funny.</p>

<h2 id="concurrency">Concurrency</h2>

<blockquote>
  <p>I’ve got a blog on my GitHub, and I thouhgt I’d put two different types of articles there and see what the response is. One theme I’m pursuing is “explaining to 5-year-old” theme, and the other is “technically complicated” theme.</p>
</blockquote>

<p>Then he describes the “<a href="http://joearms.github.io/2013/04/05/concurrent-and-parallel-programming.html">concurrency vs parallelism</a>” picture for 5 y.o. </p>

<blockquote>
  <p>That blog entry got 25,000 people read it, and they got 10 responses and quite a lot of criticism actually from people who know what concurrency and parallelism is. And then I compare it to some other articles I’ve written that technically deeper. There you got only few hundred people read it.</p>
</blockquote>

<p>I noticed it too. All those people, who responded with <a href="http://www.yosefk.com/blog/parallelism-and-concurrency-need-different-tools.html">long blogs</a> about concurrency, missed the point: This picture was for kids, and for kids it’s a pretty good picture. Adults should go and read the technical papers, but they didn’t.</p>

<!-- more -->

<h2 id="let-it-crash">Let it crash</h2>

<blockquote>
  <p>Once upon a time we had a Leadership Election algorithm in Erlang. We got some theoreticians involved, and they proved the algorithm to be correct. It’s been in practice for some time when we sent them a bug report, which showed that the thing elected two leaders, and we can reproduce it. And then they looked at this bug and went back at the code, and said the code is correct, but we had to make certain assumptions that this failure couldn’t happen.</p>
</blockquote>

<p>I like it. We should always keep it in mind: Before you prove anything, make sure, your assumptions are valid.</p>

<h2 id="favourite-bad-idea">Favourite bad idea</h2>

<blockquote>
  <p>The first bad idea we put in Erlang is the process priorities. I don’t think it’s documented anywhere. It’s definitely not in my book. It’s not supposed to be documented — that’s deliberate.</p>
</blockquote>

<p><a href="http://www.erlangprogramming.org/">Erlang Programming</a> mentions the process priorities on page 113, but they wrote the whole paragraph explaining why it’s a bad idea.</p>

<blockquote>
  <p>I was forced into position where I had to put them in [the language]. So I waited a few weeks and I put in an Erlang code that sets process priorities some integer, and this code didn’t do anything at all. It was commented out. I shipped the system, and then I asked “How do you like it with priorities?” And they said “Now it’s much better!”</p>
</blockquote>

<p>Brilliant! Although, it pisses them off when people eventually find what’s going on in the code.</p>

<h2 id="performance">Performance</h2>

<blockquote>
  <p>One thing I like about Erlang is it’s got pretty predictible performance model.</p>
</blockquote>

<blockquote>
  <p>There was some guy on the mailing list that said “I wrote a code that finds line breaks in the large file, and the result surprised me. I expected it to take this long, and it took a heck of a lot longer.” I wrote a little benchmark and I couldn’t see that effect. I mailed back “mine didn’t behave like that.” Then he said “There is another funny thing: the distribution of my file is not uniformed. I’ve got extremly long lines in it, and the rest are the same.” And from then it took Patrik five minutes to find a bug in the system. But if he hadn’t made an observation “this thing surprises me” and didn’t give this clue that it happened under these circumstances, that bug could be in the system for years. But people find performance thing and they don’t tell us the fact they are surprised, so we can’t debug it.</p>
</blockquote>

<p>Lesson learned: If you <a href="http://code.mixpanel.com/2011/08/05/how-and-why-we-switched-from-erlang-to-python/">don’t like</a> the performance of your Erlang code, don’t be shy to speak up about it. Either you are doing something wrong or there is a bug in Erlang. Both things are fixable.</p>

<h2 id="scalability">Scalability</h2>

<blockquote>
  <p><a href="http://www.ericsson.com/ourportfolio/products/sgsn-mme">MME</a> is a thing in the backbone of mobile telephony network, it makes all mobile data work. And it’s written in Erlang. Smartphones wouldn’t be able to connect to the network at all without MME. Now, Ericsson’s got the biggest market share in the world for mobile base stations, for we do 40% of the total world market of 3G and CDMA and 60% of the world market for LTE and 4G. This gives us about 50% of the world market. That means Erlang’s controlling 50% of all smartphones world wide.</p>
</blockquote>

<p>That’s impressive, and at the same time it’s sad because people don’t know about it. People are talking about Twitter scale, Google scale, or other sorts of “web-scale”, but they don’t realize that most of the data Twitter and Google receive nowadays is comming through mobile network, which means most of Twitter and Google data is coming throug Erlang. Think about it.</p>

<p>On the other hand, those who see the power of Erlang get big competitive advantage.</p>

<blockquote>
  <p>At Erlang user conference somebody from gaming company came to me and said “Erlang’s great! We have it on our server, and we managed to get 3 million connections on it!” And he was overjoyed. It’s fantastic. I said “Great! You got to tell everybody…” And he said “No, no.” — “Why not?” — “Because we tell our competitiors we use Jigsaw.”</p>
</blockquote>

<blockquote>
  <p>There is no commercial advantage from using Ruby on Rails or Java or anything else. You might go to the conferences and swap battle stories and swap tips. But if you actually found something which is bloody better, you are not going to tell anybody, are you?</p>
</blockquote>

<p>Hm, maybe that’s why I cannot find any software company in Toronto that’s doing Erlang. Hey Toronto programmers, if you are programming in Erlang, please let me know — I won’t tell your competitors, I promise.</p>

<h2 id="broken-software">Broken software</h2>

<blockquote>
  <p>Most of my time as a programmer is spent fixing broken stuff that shouldn’t be broken. Whenever I’m trying to do something, it doesn’t work. I used to spend more than 50% of my time fixing trivial things, and the percentage of my time is increasing by year. If I look back 20 years ago, I din’t spend 50% of my time fixing broken software. The software that was available was a lot lot simpler, and it was written by engineers and teams and by small group of people, and it didn’t have errors in it. If we extrapolate this in 20 years time, it’s going to be even more software, and 90% of it will be completely broken, unless we find better ways of structuring it and gluing things together.</p>
</blockquote>

<p>So true. I have the same statistics. One third of my time I’m shaving software yaks, and another third I’m debugging protocols trying to figure out why my code is not working with another code.</p>

<h2 id="conference-driven-development">Conference driven development</h2>

<blockquote>
  <p>I’m giving a keynote at LambdaJam. I’ve written a <a href="http://lambdajam.com/sessions#armstrong">flushing title</a> but I haven’t written the talk yet.</p>
</blockquote>

<p>Lesson learned: Next time you want to give a talk at a conference, come up with a catchy title, and think about the talk itself later.</p>

<blockquote>
  <p>I deliberately give myself titles for stuff I know nothing about, and I implement it all. You know, Robert did that for Lua. You know why Lua got developed in Erlang? Robert was going to give a talk on writing DSL in Erlang. I remember him talking to me “I’m giving a talk on implementing DSL in Erlang.” I said “Oh, yeah.” And he said “I don’t know anything about it. I better implement Lua.”</p>
</blockquote>

<p>It’s a really good idea to submit a conference proposal for the stuff you want to learn. When the proposal is accepted, you don’t have a choice but go and study the thing. Otherwise you would procrastinate forever. I notice actually many people do that. Maybe I’ll do the same with Erlang, at some point.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Retreat 2012]]></title>
    <link href="http://blog.ndpar.com/2012/12/09/code-retreat-2012/"/>
    <updated>2012-12-09T07:00:00-05:00</updated>
    <id>http://blog.ndpar.com/2012/12/09/code-retreat-2012</id>
    <content type="html"><![CDATA[<p>Yesterday was the Global Day of Code Retreat. Software engineers around the globe met together to learn from each other.</p>

<p><img class="center" src="https://pbs.twimg.com/media/A9mptOCCAAE0d7z.jpg" title="CR2012 1" ></p>

<p>There were several sessions where people were pair-programming <a href="http://en.wikipedia.org/wiki/Conway's_Game_of_Life">Conway’s Game of Life</a>.</p>

<p><img class="center" src="https://pbs.twimg.com/media/A9nZYcTCQAEVtkP.jpg" title="CR2012 2" ></p>

<p>Each session you had to choose a new partner, so that both of you can learn something new.</p>

<p><img class="center" src="https://pbs.twimg.com/media/A9n_aHzCcAARnkJ.jpg" title="CR2012 3" ></p>

<p>During the first session my partner and I decided to implement the Game in Java, mainly because it was the language she was most comfortable with. We implemented the procedural solution using two-dimensional array and nested loops. At that moment that was the only solution I could think of. The main challenge was to cover all edge cases and fix all <code>ArrayIndexOutOfBoundsException</code>s. Java is fairly verbose language, and with nested loops and if-else statements the final solution was pretty hard to read. You can see <a href="http://rosettacode.org/wiki/Conway's_Game_of_Life#Java">here</a> how it might look like.</p>

<p>First session was a warmup, during which most people realized that programming arrays is a tedious work. For the second session my new partner suggested an object-oriented approach, where you would operate on Cell objects that would encapsulate coordinates on the grid. In this case you move the game logic from the grid to the cell, making it easier to calculate a new state. This was my first acquaintance with C#. Interesting language — basically, Java with lambdas. Here is an <a href="http://rosettacode.org/wiki/Conway's_Game_of_Life#C.23">example</a> of C# implementation. Our solution was very similar.</p>

<p>While the first session’s data structure was array of booleans, on the second session it was replaced by a list of objects. The next step would be to relax the data structure even further. We decided to experiment with un-ordered set of coordinate pairs. For language we chose Clojure. Although we didn’t finish the implementation, by the end of the session we had a clear picture how to solve the problem in functional style.</p>

<p>On the fourth session the facilitators put an interesting constraint: the coding must be done in absolute silence. That was the most amazing experience of the day. Before we started I thought we couldn’t accomplish much without talking. As it turned out, we could. The key of effective silent coding is to use the tools which both partners are familiar with. In our case we both were advanced users of Vim, and we knew Lisp languages. Our Clojure implementation was based on map/filter/reduce approach and spanned 20 lines of code. After the session <a href="http://langnostic.blogspot.com">Leo</a> showed me Christophe Grand’s <a href="http://clj-me.cgrand.net/2011/08/19/conways-game-of-life/">7-line solution</a> based on list comprehensions. It is so wonderful that I want to post it here</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>life.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">neighbours</span> <span class="p">[[</span><span class="nv">x</span> <span class="nv">y</span><span class="p">]]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">dx</span> <span class="p">[</span><span class="mi">-1</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">]</span> <span class="nv">dy</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">zero? </span><span class="nv">dx</span><span class="p">)</span> <span class="p">[</span><span class="mi">-1</span> <span class="mi">1</span><span class="p">]</span> <span class="p">[</span><span class="mi">-1</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">])]</span>
</span><span class='line'>    <span class="p">[(</span><span class="nb">+ </span><span class="nv">dx</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">dy</span> <span class="nv">y</span><span class="p">)]))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">step</span> <span class="p">[</span><span class="nv">cells</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">set </span><span class="p">(</span><span class="nb">for </span><span class="p">[[</span><span class="nv">loc</span> <span class="nv">n</span><span class="p">]</span> <span class="p">(</span><span class="nf">frequencies</span> <span class="p">(</span><span class="nb">mapcat </span><span class="nv">neighbours</span> <span class="nv">cells</span><span class="p">))</span>
</span><span class='line'>             <span class="ss">:when</span> <span class="p">(</span><span class="nb">or </span><span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nf">cells</span> <span class="nv">loc</span><span class="p">)))]</span>
</span><span class='line'>         <span class="nv">loc</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>For the last session we chose Erlang. Because we already knew how to implement the functional solution, that was just an exercise of translating Clojure code into Erlang. Unfortunately we didn’t find an equivalent of <code>frequencies</code> function in the standard library, so we implemented it ourselves. Other than that, the Erlang code is almost identical to Clojure.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>life.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">import</span><span class="p">(</span><span class="n">sets</span><span class="p">,</span> <span class="p">[</span><span class="n">from_list</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">to_list</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">is_element</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">neighbours</span><span class="p">({</span><span class="nv">X</span><span class="p">,</span> <span class="nv">Y</span><span class="p">})</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[{</span><span class="nv">X</span> <span class="o">+</span> <span class="nv">DX</span><span class="p">,</span> <span class="nv">Y</span> <span class="o">+</span> <span class="nv">DY</span><span class="p">}</span> <span class="p">||</span> <span class="nv">DX</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="nv">DY</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">{</span><span class="nv">DX</span><span class="p">,</span> <span class="nv">DY</span><span class="p">}</span> <span class="o">=/=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">}].</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">step</span><span class="p">(</span><span class="nv">Cells</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">Nbs</span> <span class="o">=</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">flatmap</span><span class="p">(</span><span class="k">fun</span> <span class="n">neighbours</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">to_list</span><span class="p">(</span><span class="nv">Cells</span><span class="p">)),</span>
</span><span class='line'>    <span class="nv">NewCells</span> <span class="o">=</span> <span class="p">[</span><span class="nv">C</span> <span class="p">||</span> <span class="p">{</span><span class="nv">C</span><span class="p">,</span> <span class="nv">N</span><span class="p">}</span> <span class="err">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">-</span> <span class="n">frequencies</span><span class="p">(</span><span class="nv">Nbs</span><span class="p">),</span>
</span><span class='line'>                     <span class="p">(</span><span class="nv">N</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span> <span class="ow">orelse</span> <span class="p">((</span><span class="nv">N</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="ow">andalso</span> <span class="n">is_element</span><span class="p">(</span><span class="nv">C</span><span class="p">,</span> <span class="nv">Cells</span><span class="p">))],</span>
</span><span class='line'>    <span class="n">from_list</span><span class="p">(</span><span class="nv">NewCells</span><span class="p">).</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">frequencies</span><span class="p">(</span><span class="nv">List</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">frequencies</span><span class="p">(</span><span class="nv">List</span><span class="p">,</span> <span class="p">[]).</span>
</span><span class='line'><span class="nf">frequencies</span><span class="p">([],</span> <span class="nv">Acc</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nv">Acc</span><span class="p">;</span>
</span><span class='line'><span class="nf">frequencies</span><span class="p">([</span><span class="nv">X</span><span class="p">|</span><span class="nv">Xs</span><span class="p">],</span> <span class="nv">Acc</span><span class="p">)</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">keyfind</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">Acc</span><span class="p">)</span> <span class="k">of</span>
</span><span class='line'>        <span class="p">{</span><span class="nv">X</span><span class="p">,</span> <span class="nv">F</span><span class="p">}</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">frequencies</span><span class="p">(</span><span class="nv">Xs</span><span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">keyreplace</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">Acc</span><span class="p">,</span> <span class="p">{</span><span class="nv">X</span><span class="p">,</span> <span class="nv">F</span><span class="o">+</span><span class="mi">1</span><span class="p">}));</span>
</span><span class='line'>        <span class="n">false</span>  <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">frequencies</span><span class="p">(</span><span class="nv">Xs</span><span class="p">,</span> <span class="nn">lists</span><span class="p">:</span><span class="nf">keystore</span><span class="p">(</span><span class="nv">X</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">Acc</span><span class="p">,</span> <span class="p">{</span><span class="nv">X</span><span class="p">,</span> <span class="mi">1</span><span class="p">}))</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="summary">Summary</h2>

<p>During this day I learnt a lot: new language, new abstractions, new techniques, new ways of communication, new ideas. I met bunch of smart people. I was so overwhelmed with all this cool stuff that I had to write this blog post to offload it from my head.</p>

<p>If you are a programmer and you’ve never been to Code Retreat, I strongly encourage you to do it next year. It’s an exciting experience.</p>

<p>I want to thank all the people who organized and participated in this event.</p>

<h3 id="photo-credits">Photo Credits</h3>

<ul>
  <li>Michael DiBernardo <a href="https://twitter.com/mdibernardo/status/277439446381625345/photo/1">[1]</a></li>
  <li>Kunal Gupta <a href="https://twitter.com/kunalfrompolar/status/277491865991921664/photo/1">[2]</a></li>
  <li>Carlo Barrettara <a href="https://twitter.com/barrettara/status/277533676273823746/photo/1">[3]</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang explained: Selective receive]]></title>
    <link href="http://blog.ndpar.com/2010/11/10/erlang-selective-receive/"/>
    <updated>2010-11-10T07:00:00-05:00</updated>
    <id>http://blog.ndpar.com/2010/11/10/erlang-selective-receive</id>
    <content type="html"><![CDATA[<p>If you worked with Erlang you’ve probably heard about selective receive. In this article I want to demonstrate what selective receive is and how it works. Let me start with an excerpt from Joe Armstrong’s book <a href="http://www.pragprog.com/titles/jaerlang/programming-erlang">Programming Erlang</a> (<a href="http://media.pragprog.com/titles/jaerlang/Concurrent.pdf">Section 8.6</a>, p.155):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="k">receive</span>
</span><span class='line'>    <span class="nv">Pattern1</span> <span class="p">[</span><span class="k">when</span> <span class="nv">Guard1</span><span class="p">]</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nv">Expressions1</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">Pattern2</span> <span class="p">[</span><span class="k">when</span> <span class="nv">Guard2</span><span class="p">]</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nv">Expressions2</span><span class="p">;</span>
</span><span class='line'>    <span class="err">…</span>
</span><span class='line'><span class="k">after</span>
</span><span class='line'>    <span class="nv">Time</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nv">ExpressionTimeout</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ol>
  <li>When we enter a <strong>receive</strong> statement, we start a timer (but only if an <strong>after</strong> section is present in the expression).</li>
  <li>Take the first message in the mailbox and try to match it against <code>Pattern1</code>, <code>Pattern2</code>, and so on. If the match succeeds, the message is removed from the mailbox, and the expressions following the pattern are evaluated.</li>
  <li>If none of the patterns in the <strong>receive</strong> statement matches the first message in the mailbox, then the first message is removed from the mailbox and put into a “save queue.” The second message in the mailbox is then tried. This procedure is repeated until a matching message is found or until all the messages in the mailbox have been examined.</li>
  <li>If none of the messages in the mailbox matches, then the process is suspended and will be rescheduled for execution the next time a new message is put in the mailbox. Note that when a new message arrives, the messages in the save queue are not rematched; only the new message is matched.</li>
  <li>As soon as a message has been matched, then all messages that have been put into the save queue are reentered into the mailbox in the order in which they arrived at the process. If a timer was set, it is cleared.</li>
  <li>If the timer elapses when we are waiting for a message, then evaluate the expressions <code>ExpressionsTimeout</code> and put any saved messages back into the mailbox in the order in which they arrived at the process.</li>
</ol>

<!-- more -->

<p>Did you notice the concept of “save queue”? That’s what many people are not aware of. Let’s run few tests and see the mailbox and the save queue in action.</p>

<p>The first test is simple</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">self</span><span class="p">()</span> <span class="o">!</span> <span class="n">a</span><span class="p">.</span>
</span><span class='line'><span class="n">a</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="mi">2</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">process_info</span><span class="p">(</span><span class="n">self</span><span class="p">()).</span>
</span><span class='line'> <span class="err">…</span>
</span><span class='line'> <span class="p">{</span><span class="n">message_queue_len</span><span class="p">,</span><span class="mi">1</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">messages</span><span class="p">,[</span><span class="n">a</span><span class="p">]},</span>
</span><span class='line'> <span class="err">…</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="mi">3</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">receive</span> <span class="n">a</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">1</span><span class="p">;</span> <span class="n">b</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">2</span> <span class="k">end</span><span class="p">.</span>
</span><span class='line'><span class="mi">1</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="mi">4</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">process_info</span><span class="p">(</span><span class="n">self</span><span class="p">()).</span>
</span><span class='line'> <span class="err">…</span>
</span><span class='line'> <span class="p">{</span><span class="n">message_queue_len</span><span class="p">,</span><span class="mi">0</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">messages</span><span class="p">,[]},</span>
</span><span class='line'> <span class="err">…</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We send a message to the shell, we see it in the process mailbox, then we receive it by matching, after which the queue is empty. Standard queue behaviour.</p>

<p>For the next test we send three messages, and we match the last one</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">self</span><span class="p">()</span> <span class="o">!</span> <span class="n">c</span><span class="p">,</span> <span class="n">self</span><span class="p">()</span> <span class="o">!</span> <span class="n">d</span><span class="p">,</span> <span class="n">self</span><span class="p">()</span> <span class="o">!</span> <span class="n">a</span><span class="p">.</span>
</span><span class='line'><span class="n">a</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="mi">2</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">process_info</span><span class="p">(</span><span class="n">self</span><span class="p">()).</span>
</span><span class='line'> <span class="err">…</span>
</span><span class='line'> <span class="p">{</span><span class="n">message_queue_len</span><span class="p">,</span><span class="mi">3</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">messages</span><span class="p">,[</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">]},</span>
</span><span class='line'> <span class="err">…</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="mi">3</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">receive</span> <span class="n">a</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">1</span><span class="p">;</span> <span class="n">b</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">2</span> <span class="k">end</span><span class="p">.</span>
</span><span class='line'><span class="mi">1</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="mi">4</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">process_info</span><span class="p">(</span><span class="n">self</span><span class="p">()).</span>
</span><span class='line'> <span class="err">…</span>
</span><span class='line'> <span class="p">{</span><span class="n">message_queue_len</span><span class="p">,</span><span class="mi">2</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">messages</span><span class="p">,[</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">]},</span>
</span><span class='line'> <span class="err">…</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Again, no surprises. In fact, this test demonstrates what people think when they hear about selective receive.</p>

<p>Unfortunately we didn’t see what happened internally between expressions 3 and 4. To find it out we need to modify the test. Let’s start the shell in distributed mode so that we can connect to it later from the remote shell.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">(</span><span class="n">foo</span><span class="p">@</span><span class="n">bar</span><span class="p">)</span><span class="mi">1</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">register</span><span class="p">(</span><span class="n">shell</span><span class="p">,</span> <span class="n">self</span><span class="p">()).</span>
</span><span class='line'><span class="n">true</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="n">foo</span><span class="p">@</span><span class="n">bar</span><span class="p">)</span><span class="mi">2</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">shell</span> <span class="o">!</span> <span class="n">c</span><span class="p">,</span> <span class="n">shell</span> <span class="o">!</span> <span class="n">d</span><span class="p">.</span>
</span><span class='line'><span class="n">d</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="n">foo</span><span class="p">@</span><span class="n">bar</span><span class="p">)</span><span class="mi">3</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">process_info</span><span class="p">(</span><span class="nb">whereis</span><span class="p">(</span><span class="n">shell</span><span class="p">)).</span>
</span><span class='line'> <span class="err">…</span>
</span><span class='line'> <span class="p">{</span><span class="n">message_queue_len</span><span class="p">,</span><span class="mi">2</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">messages</span><span class="p">,[</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">]},</span>
</span><span class='line'> <span class="err">…</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="n">foo</span><span class="p">@</span><span class="n">bar</span><span class="p">)</span><span class="mi">4</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">receive</span> <span class="n">a</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">1</span><span class="p">;</span> <span class="n">b</span> <span class="o">-</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">2</span> <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>At this moment the shell is suspended, exactly as described in step 4 of selective receive algorithm. Open remote shell, connect to the initial one, and type the following:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">(</span><span class="n">foo</span><span class="p">@</span><span class="n">bar</span><span class="p">)</span><span class="mi">1</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">process_info</span><span class="p">(</span><span class="nb">whereis</span><span class="p">(</span><span class="n">shell</span><span class="p">)).</span>
</span><span class='line'> <span class="err">…</span>
</span><span class='line'> <span class="p">{</span><span class="n">message_queue_len</span><span class="p">,</span><span class="mi">0</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">messages</span><span class="p">,[]},</span>
</span><span class='line'> <span class="err">…</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>That’s interesting: no messages in the mailbox! As Joe said, they are in the save queue. Now send a matching message:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">(</span><span class="n">foo</span><span class="p">@</span><span class="n">bar</span><span class="p">)</span><span class="mi">2</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">shell</span> <span class="o">!</span> <span class="n">a</span><span class="p">.</span>
</span><span class='line'><span class="n">a</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Go back to initial shell, which should be resumed now, and check the mailbox again:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="p">(</span><span class="n">foo</span><span class="p">@</span><span class="n">bar</span><span class="p">)</span><span class="mi">5</span><span class="err">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="nb">process_info</span><span class="p">(</span><span class="nb">whereis</span><span class="p">(</span><span class="n">shell</span><span class="p">)).</span>
</span><span class='line'> <span class="err">…</span>
</span><span class='line'> <span class="p">{</span><span class="n">message_queue_len</span><span class="p">,</span><span class="mi">2</span><span class="p">},</span>
</span><span class='line'> <span class="p">{</span><span class="n">messages</span><span class="p">,[</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">]},</span>
</span><span class='line'> <span class="err">…</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>That’s the same output we saw in the previous test, but now we know what happens behind the scene: <em>messages are moved from the mailbox to the save queue and then back to the mailbox after the matching message arrives</em>.</p>

<p>Next time you explore your Erlang process, keep in mind the save queue and disappearing and reappearing messages.</p>

<h3 id="resources">Resources</h3>

<ul>
  <li>A <a href="http://ascii.io/a/3477">screencast</a> recorded for this blog entry.</li>
  <li>Joe Armstrong: <a href="http://www.search-document.com/pdf/3/3/erlang.html">A History of Erlang</a>. In this article you can find why the selective receive was implemented this way.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book review: Erlang and OTP in Action]]></title>
    <link href="http://blog.ndpar.com/2010/11/06/erlang-and-otp-in-action/"/>
    <updated>2010-11-06T08:00:00-04:00</updated>
    <id>http://blog.ndpar.com/2010/11/06/erlang-and-otp-in-action</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/posts//otp-action-book-cover.png"></p>

<p>Title: Erlang and OTP in Action<br />
Author: Martin Logan, Eric Merritt, and Richard Carlsson<br />
Paperback: 432 pages<br />
Publisher: <a href="http://www.manning.com/logan/">Manning Publications</a>; November 2010<br />
Language: English<br />
ISBN-10: 1933988789<br />
ISBN-13: 978-1933988788<br />
$38.99 (<a href="http://www.amazon.com/Erlang-OTP-Action-Martin-Logan/dp/1933988789">amazon.com</a>)</p>

<h3 id="overview">Overview</h3>

<p>Even though this book has Erlang in its title, it’s only about 15% of the content dedicated to Erlang language itself — the biggest portion of the book is about OTP. Nowadays, when more and more developers get familiar with Erlang, they need a new book that can boost them to the next level of proficiency, where they can produce industry standard code leveraging all the power of Erlang platform. This book is supposed to fill this gap!</p>

<!-- more -->

<h2 id="part-one--the-otp-basics">Part One — The OTP basics</h2>

<h3 id="chapter-1--the-erlangotp-platform">Chapter 1 — The Erlang/OTP platform</h3>

<p>This chapter gives an overview of the important <em>concepts and features</em> of Erlang/OTP: concurrency, fault-tolerance, distribution. It discusses four inter-process communication paradigms — shared memory, STM, futures, message passing — and shows how the latter makes the distribution trivial to implement in Erlang. You will see how the linked processes and supervision trees build the foundation of Erlang famous fault-tolerance, and how three aspects of Erlang runtime system — sophisticated scheduler, non-blocking IO, and per-process garbage collection — complete the picture.</p>

<h3 id="chapter-2--erlang-language-essentials">Chapter 2 — Erlang language essentials</h3>

<p>Take a deep breath — this long chapter is going to be an Erlang Crash Course. If you already worked with the language, most of it won’t be new for you, but it’s still worthy to read it because there are many small things that you are probably not aware of or don’t use very often. For example,</p>

<ul>
  <li>are you familiar with all available shell functions, and break menu options?</li>
  <li>do you know how to work with multiple shells in one window?</li>
  <li>how lists are implemented internally, and how to use ++ operator efficiently?</li>
  <li>what’s the difference between arithmetic and exact equality operators?</li>
  <li>do you know that all operators are actually functions, and <code>1+2</code> is the same as <code>erlang:'+'(1,2)</code>?</li>
  <li>that assignment operator is a form of pattern matching?</li>
  <li>that you can use pattern matching instead of regex: <code>"http://" ++ Rest = "http://www.erlang.org"</code>?</li>
  <li>what’s the difference between case- and if-expressions, and between pattern matching and guards?</li>
  <li>that besides list comprehensions there are also bitstring comprehensions: <code>&lt;&lt; &lt;&lt;X:3&gt;&gt; || X &lt;- [1,2,3,4,5,6,7] &gt;&gt;</code>?</li>
  <li>which steps Erlang preprocessor performs?</li>
  <li>what’s the difference between linked and monitored processes?</li>
  <li>what’s the relationship between messages and signals?</li>
</ul>

<p>There is also nice introduction to algorithms in this chapter with excellent examples of how to use tail-recursion and accumulators to improve performance.</p>

<p>Some important topics are covered briefly, like selective receive mechanism, for example. But at the end of the chapter authors give a list of useful Erlang resources, including books and web sites, so you should be able to find there the answers to all your language related questions.</p>

<h3 id="chapter-3--writing-a-tcp-based-rpc-service">Chapter 3 — Writing a TCP based RPC service</h3>

<p>This chapter is about OTP <em>behaviours</em>. It describes what behaviour is, what are the benefits of it comparing to pure Erlang implementation, and which parts the behaviour consists of. As a ‘Hello, World’ example authors implemented TCP server!</p>

<p>Over the course of the chapter you will learn how to model client-server communication using <em>gen_server</em> behaviour, and how to implement active socket connection using <em>get_tcp</em> module.</p>

<p>It also shows the industry conventions and best practices of how to implement and layout behaviour module. You can use this chapter as a reference every time you need to implement a behaviour.</p>

<p>Code snippet: <a href="http://github.com/erlware/Erlang-and-OTP-in-Action-Source/blob/master/chapter_03/tr_server.erl">TCP server</a>.</p>

<h3 id="chapter-4--otp-applications-and-supervision">Chapter 4 — OTP applications and supervision</h3>

<p>An OTP <em>application</em> is what ties your modules into a single unit. A <em>supervisor</em> is what makes your application fault-tolerant. From this chapter you will learn how to implement both behaviours properly: how to layout application directory, how to structure application descriptor, how to write child specifications and restart strategies, and how to generate application documentation. As before, all examples are accompanied by standard conventions and best practices.</p>

<p>Sample code: <a href="http://github.com/erlware/Erlang-and-OTP-in-Action-Source/tree/master/chapter_04/tcp_rpc/">application directory layout</a>.</p>

<h3 id="chapter-5--using-the-main-graphical-introspection-tools">Chapter 5 — Using the main graphical introspection tools</h3>

<p>This chapter demonstrates how to use some of the Erlang graphical tools: appmon, webtool, pman, debugger, and table viewer. It’s good to know that those tools exist, so when you encounter a problem in your code, you would be able to find the root cause and resolve it quickly.</p>

<p><img class="center" src="/images/posts/otp-action-book-tools.png"></p>

<h2 id="part-two--building-a-production-system">Part Two — Building a production system</h2>

<p>In the second part of the book you are going to apply all the knowledge you obtained in the first part to build a real world production system: <em>distributed cache</em>.</p>

<h3 id="chapter-6--implementing-a-caching-system">Chapter 6 — Implementing a caching system</h3>

<p>How do you implement a cache? I guess there are many ways to do it, but I would never come up with the idea the authors of the book came up with. They use a <em>separate process to store each value</em>, and they map each key to its corresponding process. How cool is that! This way of thinking is possible only in Erlang.</p>

<p>During the implementation of process management you will learn a new strategy when the supervisor creates multiple child-processes in runtime based on preconfigured template. It’s different from what you saw in Chapter 4 where single child process was created on the application startup. One interesting twist here is an inversion of control — the worker process will call the supervisor to start it.</p>

<p>The rest of the chapter is dedicated to ETS tables (which are used here to store the mapping). You will see how to create tables and how to perform CRUD operations.</p>

<h3 id="chapter-7--logging-and-event-handling">Chapter 7 — Logging and event handling</h3>

<p>Logging is very important part of any system. In OTP there are two logging utilities: error_logger and SASL. <em>error_logger</em> is similar to log4x libraries in other languages. It provides basic functions (info, warning and error) that you can call from your code to print messages to the standard output. SASL is more sophisticated. It’s an OTP application that logs life cycle events, including crash reports, from other applications. Both methods are thoroughly described in the first part of this chapter.</p>

<p>The second part explains how to implement <em>custom event handler</em>. An OTP event handler is just another behaviour that models observer pattern. You can use it for example to implement your own log appender which you can plug in to the error_logger.</p>

<p>The final section of the chapter provides a step-by-step guide of how to build a <em>custom event stream</em>, and how to integrate it with the cache application. This technique was totally new to me. I never worked with event handlers on such advanced level.</p>

<p>Code snippets: <a href="http://github.com/erlware/Erlang-and-OTP-in-Action-Source/blob/master/chapter_07/simple_cache/src/sc_event.erl">event manager</a> and <a href="http://github.com/erlware/Erlang-and-OTP-in-Action-Source/blob/master/chapter_07/simple_cache/src/sc_event_logger.erl">event handler</a>.</p>

<h3 id="chapter-8--distributed-erlangotp">Chapter 8 — Distributed Erlang/OTP</h3>

<p>Distribution is one of the famous features of Erlang. It’s very easy to build distributed applications, and more important, it’s such a fun to play with Erlang <em>clusters</em>.</p>

<p>This chapter will guide you through all the methods and techniques you need to know to make your application distributed. You will learn how to start Erlang nodes in different modes, how to combine them into the clusters, how to define topology and isolate clusters from each other, and how to send messages between nodes in the same cluster.</p>

<p>One of the cool things I learned from this chapter is a <em>remote shell</em>. It’s very similar to SSH but more powerful. Unlike SSH, Erlang remote shell is not a session — it’s a real shell of the remote node where you can start any application including graphical tools!</p>

<p>The second half of the chapter discusses the problem of <em>resource discovery</em>: What’s the best way to add a new node to the cluster and synchronize its state with existing nodes? The authors come up with a simple and elegant algorithm. You will use this algorithm in the next chapter to build a distributed cache.</p>

<p>Code snippet: resource discovery <a href="http://github.com/erlware/Erlang-and-OTP-in-Action-Source/blob/master/chapter_08/resource_discovery.erl">algorithm</a>.</p>

<h3 id="chapter-9--adding-distribution-to-the-cache-with-mnesia">Chapter 9 — Adding distribution to the cache with Mnesia</h3>

<p>When you design a distributed system you have to make a choice which inter-node communication strategy you are going to use: <em>synchronous</em> or <em>asynchronous</em>. Chapter 9 starts with the comparison of these two approaches, their advantages and drawbacks.</p>

<p>The next step towards the distributed cache is obvious: making the cache storage distributed. As you remember from the chapter 6 the storage was implemented as ETS table. The easiest way to make it distributed is to replace it with Mnesia database. Why and how? You will find it in the next section of this chapter.</p>

<p>You will learn what <em>Mnesia</em> is, how to configure it properly, and how to manipulate the data. At the end you will meet beauty and the beast of read operations - query list comprehensions and match specifications. Equipped with all these knowledge you will easily replace ETS table with Mnesia, and make your cache distributed.</p>

<p>The most amazing part of the last section is an algorithm of <em>dynamic table replication</em>. You will definitely appreciate it after you learn it — it’s the heart of true scalability.</p>

<p>Code snippet: working with <a href="http://github.com/erlware/Erlang-and-OTP-in-Action-Source/blob/master/chapter_09/simple_cache/src/sc_store.erl">Mnesia</a>.</p>

<h3 id="chapter-10--packaging-services-deployment">Chapter 10 — Packaging, services, deployment</h3>

<p>At this moment you should be able to write non-trivial OTP applications. It’s time to think now how to make your application easy to install and start. So far you have started it manually from the shell, and if your app had many dependencies, it was a tedious process. This chapter describes how to <em>automate</em> it.</p>

<p>In OTP a deployment unit is called <em>release</em>. In this chapter you will learn how to build it properly, i.e. how to create release metadata and configuration, resolve dependencies, and generate boot scripts. You will see different ways to start your application: locally in shell, as a daemon or in embedded mode.</p>

<p>After you release the application, you might want to share it with other people. That’s what the next section is about. It shows you how to make a <em>package</em> — standard or customized, universal or OS-dependent — and how to install it on a different machine.</p>

<h2 id="part-three--integrating-and-refining">Part Three — Integrating and refining</h2>

<p>In the previous part you built a distributed cache in OTP, and you can use it now from any Erlang application. This is already a big achievement, and you must be proud of it, but you can make it even bigger if you expose this wonderful functionality to other platforms. Erlang is known for its robustness and scalability, and it would be very beneficial for non-Erlang clients as well to utilize these features.</p>

<h3 id="chapter-11--text-and-rest-communication-via-tcp-and-http">Chapter 11 — Text and REST (Communication via TCP and HTTP)</h3>

<p>The first non-Erlang interface you are going to implement is TCP. If you remember, you already did it in Chapter 3 when you implemented <em>TCP server</em>. That server though had one significant limitation: it handled only one connection. The new implementation in this chapter is more efficient: it supports multiple concurrent connections.</p>

<p>The next interface is HTTP. Although it sounds similar to the previous one, the way you will implement it is totally different. You won’t use standard gen_server behaviour. Instead, you will implement a <em>custom behaviour</em> which you are going to define yourself. This is a very advanced topic, and if you want to build extensible systems in Erlang, you need to understand all the details of how to do it. Fortunately, this section provides thorough instructions.</p>

<p>Over the course of this chapter you will also learn bunch of other useful things besides server behaviours. You will see how HTTP protocol works and how to design RESTful services on top of it, how to use TCP sockets more effectively, and how to increase stability of your system with well-designed OTP supervisors. You will have lots of fun doing binary pattern matching.</p>

<p>Code snippets: <a href="http://github.com/erlware/Erlang-and-OTP-in-Action-Source/tree/master/chapter_11/tcp_interface/src/">TCP interface</a>, <a href="http://github.com/erlware/Erlang-and-OTP-in-Action-Source/tree/master/chapter_11/gen_web_server/src/">HTTP server behaviour</a>, <a href="http://github.com/erlware/Erlang-and-OTP-in-Action-Source/tree/master/chapter_11/http_interface/src/">REST interface</a>.</p>

<h3 id="chapter-12--drivers-communication-with-c-programs">Chapter 12 — Drivers (Communication with C programs)</h3>

<p>This chapter is tough — you have to be a C programmer to understand all the details. If you are not involved into C programming, it’s still worthy to read it, just to understand the concept, although it might be hard to get through the entire text.</p>

<p>There are two types of drivers in Erlang: <em>port drivers</em> and <em>linked-in drivers</em>. The chapter starts with an overview of them both. It explains their benefits and drawbacks, how you should design the driver, and where you should handle the driver’s state, global vs. instance variables.</p>

<p>The rest of the chapter is a tutorial of how to implement drivers. It describes three components that comprise driver implementation: C side, Erlang side and the protocol between them. It shows the differences in each component for both types of drivers, and it gives you recommendations of how you should approach the problem required communication with C code.</p>

<h3 id="chapter-13--jinterface-communication-with-java-programs">Chapter 13 — Jinterface (Communication with Java programs)</h3>

<p>Unlike the C driver implementation, connecting together Erlang and Java is pretty simple: you instantiate OtpNode class in the JVM thread, and it becomes available as Erlang node to any running Erlang application. You can start sending messages between Java and Erlang, and all Erlang terms will be properly converted to Java classes, and vice versa. All the magic is done in <em>Jinterface</em> library, which is a part of OTP distribution, and what you need to know to start using it is perfectly explained in this chapter.</p>

<p>After you learn how to work with Jinterface, you will apply this knowledge to building the bridge between the cache you implemented in the previous chapters and HBase. <em>HBase</em> is one of the modern NoSQL databases. If you didn’t work with it before, don’t worry — the authors will show you how to get started with it, and how to implement HBase connector using Java API. Having this API in place, all you need to do is to link it with the Erlang cache using the technique described above.</p>

<p>By the end of the chapter (and in fact end of the book) you will have a distributed cache written in Erlang backed by NoSQL database via Erlang-Java bridge. I don’t know about you, but I was actually very impressed after I finished the coding and saw the entire solution working on my machine. It’s really amazing that you can build pretty sophisticate piece of software with such a small amount of code.</p>

<p>Code snippets: <a href="http://github.com/erlware/Erlang-and-OTP-in-Action-Source/blob/master/chapter_13/simple_cache/java_src/HBaseNode.java">message receiver</a> and <a href="http://github.com/erlware/Erlang-and-OTP-in-Action-Source/blob/master/chapter_13/simple_cache/java_src/HBaseTask.java">message responder</a>.</p>

<h3 id="chapter-14--optimization-and-performance">Chapter 14 — Optimization and performance</h3>

<p>As we all know, premature optimization is the root of all evil. In other words, don’t spend time optimizing your solution before you actually measured the performance. That implies you must know what and how to measure. In this chapter authors describe the approach you should take when you prepare performance test, as well as the basic tools available in Erlang for performance testing: <em>cprof</em> and <em>fprof</em>.</p>

<p>The second part of the chapter explains the Erlang programming language <em>caveats</em>. You will see</p>

<ul>
  <li>how primitive data types stored in memory, and which data structures you should use to fulfil performance requirements;</li>
  <li>how to use some built-in functions and operators properly;</li>
  <li>how to call function in different ways, and how performant those calls are;</li>
  <li>how compiler optimizes pattern matching and tail recursion;</li>
  <li>whether to use OTP behaviours or plain Erlang processes.</li>
</ul>

<p>That concludes the main content of the book.</p>

<p>There are also two appendices in this book. The first one describes how to install Erlang on the OS of your choice. The second explains what <em>referential transparency</em> is and why lists in Erlang are implemented as they are.</p>

<h3 id="conclusion">Conclusion</h3>

<p>If you are an intermediate Erlang developer, go and buy this book! It will teach you how to build robust production systems following proven design principles and standard conventions. It will make your code easy to read and maintain. You will learn lots of new things and it will be a big step towards Erlang mastery.</p>

<p>Happy OTPing!</p>
]]></content>
  </entry>
  
</feed>
