<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: J | Side Notes]]></title>
  <link href="http://blog.ndpar.com/categories/j/atom.xml" rel="self"/>
  <link href="http://blog.ndpar.com/"/>
  <updated>2014-10-13T21:45:18-04:00</updated>
  <id>http://blog.ndpar.com/</id>
  <author>
    <name><![CDATA[Andrey Paramonov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fast Fourier transform in J]]></title>
    <link href="http://blog.ndpar.com/2014/10/12/fft-j/"/>
    <updated>2014-10-12T08:00:00-04:00</updated>
    <id>http://blog.ndpar.com/2014/10/12/fft-j</id>
    <content type="html"><![CDATA[<p>In the previous <a href="/2014/10/11/dft-j/">post</a> we discussed the descrete Fourier transform (DFT). Its J implementation was pretty straightforward, and the program looked almost identical to its mathematical definition. In this post, I want to explore how to implement fast Fourier transform (FFT), a recursively defined version of DFT that reduces algorithmic complexity from $O(n^2)$ to $O(N\log{N})$.</p>

<h2 id="math">Math</h2>

<p>Recall the DFT formula from the previous post</p>

<script type="math/tex; mode=display">
\mathcal{F}_N\mathbf{f}[m] = \sum_{n=0}^{N-1} \mathbf{f}[n] e^{-2\pi i mn/N}, \quad m = 0, \dots , N-1
</script>

<p>I use a slightly different notation here to make recursive definition easier to understand.</p>

<p>We assume that <em>N</em> is a power of 2. Using basic arithmetic and properties of complex exponentials, we can derive the formula for the DFT of order <em>2N</em> in terms of two DFTs of order <em>N</em></p>

<script type="math/tex; mode=display">
\mathcal{F}_{2N}\mathbf{f}[m]=\mathcal{F}_N\mathbf{f}_{even}+e^{-\pi im/N}\mathcal{F}_N\mathbf{f}_{odd}
</script>

<script type="math/tex; mode=display">
\mathcal{F}_{2N}\mathbf{f}[m+N]=\mathcal{F}_N\mathbf{f}_{even}-e^{-\pi im/N}\mathcal{F}_N\mathbf{f}_{odd}
</script>

<p>where $m=0,\dots,N-1$. The base case, when $N=1$, is</p>

<script type="math/tex; mode=display">
\mathcal{F}_1\mathbf{f}[0] = \mathbf{f}[0]
</script>

<p>i.e. the identity function.</p>

<!-- more -->

<h2 id="programming">Programming</h2>

<p>Let’s express the FFT algorithm in words. If $N=1$ then the <code>fft</code> function is just the identity function (<code>]</code> in J). Overwise, it’s a function involving a recursive call on an input vector of half the length. Here is the same phrase written in J</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fft=: something_recursive_here ` ] @. (1 = #)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If $N&gt;1$, we split the input vector into two vectors by even and odd indices. We apply FFT recursively to each of these vectors. We multiply the first output vector by 1 and the second one by $e^{-\pi im/N}$. Then, we find the sum and difference of the result vectors, and concatenate them. That should be it.</p>

<p>Let’s start with the split function. To split a vector by even and odd indices in J, we can split it by groups of two elements, stack the groups on top of each other making an $N\times2$ matrix, then transpose it to get $2\times N$ matrix, which gives us the two vectors we need. Here is the implementation of the split function</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>spl=: |:@(_2 ]\ ])</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>and here is an example of applying this function to a range vector</p>

<pre><code>   spl 0 1 2 3 4 5 6 7
0 2 4 6
1 3 5 7
</code></pre>

<p>The next step is the function $e^{-\pi im/N}$. We implement it in two steps: first, scalar $\omega=e^{\pi i/N}$, then vector $\boldsymbol\omega=\omega^{-m}$. The implementation is analogous to the one from the previous <a href="/2014/10/11/dft-j/">post</a>, with the difference of $\pi i/N$ instead of $2\pi i/N$, and vector $\boldsymbol\omega$ instead of matrix $\Omega$</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>omg=: ^@o.@(0j1&amp;%)
</span><span class='line'>omv=: omg ^ -@i.</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The new matrix $\Omega$ is build by stacking a unit vector $[1,\dots,1]$ of length <em>N</em> on top of the vector $\boldsymbol\omega$</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Omg=: 1 ,: omv</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here is an example of its application to $N=4$</p>

<pre><code>   Omg 4
1                  1              1                   1
1 0.707107j_0.707107 2.22045e_16j_1 _0.707107j_0.707107
</code></pre>

<p>Now we can go back to the <code>fft</code> function and add some code to the <code>something_recursive_here</code> placeholder</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fft=: final_piece_here@(Omg@#@{. * $:”1)@spl ` ] @. (1 = #)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>$:"1</code> means the <code>fft</code> function is recursively applied to every row of its input matrix (which is the result of the <code>spl</code> function above). <code>Omg@#@{.</code> means: take the first row of the input matrix, get the length of it, and pass it to the <code>Omg</code> function.</p>

<p><code>final_piece_here</code> is then what we described above as “find the sum and difference of the result vectors, and concatenate them”. In J it’s implemented as the fork <code>+/ , -/</code>. Now we have all the pieces in place, and the final program is</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>spl=: |:@(_2 ]\ ])
</span><span class='line'>omg=: ^@o.@(0j1&amp;%)
</span><span class='line'>omv=: omg ^ -@i.
</span><span class='line'>Omg=: 1 ,: omv
</span><span class='line'>fft=: (+/ , -/)@(Omg@#@{. * $:”1)@spl ` ] @. (1 = #)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="references">References</h2>

<ul>
  <li>Source code with examples on <a href="https://github.com/ndpar/j/blob/master/fourier.ijs">GitHub</a></li>
  <li>Official FFT add-on on <a href="http://www.jsoftware.com/jwiki/Addons/math/fftw">jsoftware</a> wiki.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Descrete Fourier transform in J]]></title>
    <link href="http://blog.ndpar.com/2014/10/11/dft-j/"/>
    <updated>2014-10-11T08:00:00-04:00</updated>
    <id>http://blog.ndpar.com/2014/10/11/dft-j</id>
    <content type="html"><![CDATA[<p>The Fourier analysis in general and the Fourier transform in particular has always been one of my favourite topics in mathematics. When I started learning the <a href="http://www.jsoftware.com">J programming language</a> I thought that implementing the descrete Fourier transform (DFT) in J must be really elegant. One rainy weekend I finally found time to do that, and this post is a result of my experiments.</p>

<h2 id="math">Math</h2>

<p>The definition of one-dimensional DFT is pretty simple. It is just a function that maps a given vector <strong>f</strong> of length <em>N</em> to a vector <strong>F</strong> of the same length by the following formula</p>

<script type="math/tex; mode=display">
\mathbf{F}[m] = \sum_{n=0}^{N-1} \mathbf{f}[n] e^{-2\pi i mn/N}, \quad m = 0, \dots , N-1
</script>

<p>To implement this formula the only thing we need is basic arithmetic for complex numbers. Not only does J provide such an arithmetic, it has special code for complex exponentiation, which makes the implementation much easier than it would be in other languages.</p>

<p>Before we start coding let’s rewrite the formula in terms of matrix multiplication so that we can utilize this feature of J. Let $\omega$ be the primitive <em>N</em>th root of unity $\omega = e^{2\pi i/N}$, then the DFT formula becomes</p>

<script type="math/tex; mode=display">
\mathbf{F} = \mathbf{f} \cdot \Omega
</script>

<p>where <strong>f</strong> is an input vector and $\Omega$ is a symmetric matrix $(\omega^{-mn})$ with $m,n=0,\dots,N-1$.</p>

<!-- more -->

<h2 id="programming">Programming</h2>

<p>We are now ready to code. Let’s start with $\omega = e^{2\pi i/N}$. As I said before J has special code for function $e^{\pi x}$, namely the composition <code>^@o.@</code>. In our case $x$ is equal to $2i/N$, where $N$ is an input to the function $\omega$. In other words, $x$ is a function that divides $2i$ by its input, which in J is written as <code>0j2&amp;%</code>. That means the complete little omega implementation is</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>omg=: ^@o.@(0j2&amp;%)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The next step is the matrix $\Omega=(\omega^{-mn})$. We can think of it this way: make a multiplication table of vectors $[0,\dots,N-1]$ and $-[0,\dots,N-1]$, then raise $\omega$ to the power of every element from that table. In J the multiplication table of a vector by its negative is implemented as the hook <code>*/ -</code>. For building a range-vector $[0,\dots,N-1]$ we can use the function <code>i.</code>. Therefore, the implementation of a square matrix $(-mn)$ in J is the composition <code>(*/ -)@i.</code>, and the function of $\Omega$ is</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Omg=: omg ^ (*/ -)@i.</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The last piece of the DFT program is the formula $\mathbf{f}\cdot\Omega$. Our <code>Omg</code> function accepts as a parameter the length of the input vector, while the <code>dft</code> function does the vector itself. That means we need to compose <code>Omg</code> function with the length function <code>#</code>. Then the composition <code>Omg@#</code> will work on vectors.</p>

<p>The matrix (and vector) multiplication function in J is <code>+/ .*</code>. Therefore, the product of the input vector and the function <code>Omg@#</code> is just a hook</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dft=: +/ .* Omg@#</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>That’s it. This is a complete implementation of DFT in J. Let’s put all three lines together.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>omg=: ^@o.@(0j2&amp;%)
</span><span class='line'>Omg=: omg ^ (&lt;em>/ -)@i.
</span><span class='line'>dft=: +/ .&lt;/em> Omg@#</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The whole program fits in one tweet. If you like one-liners, you can do this as well</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dft=: +/ .* ^@o.@(0j2&amp;% * (*/ -)@i.)@#</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="references">References</h2>

<ul>
  <li>Source code with examples on <a href="https://github.com/ndpar/j/blob/master/fourier.ijs">GitHub</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
